using Inv.API.Models;
using Inv.DAL.Domain;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Web.Http;
using Inv.API.Tools;
using Inv.BLL.Services.MSVendor;
using Inv.BLL.Services.MsVendorTypes;
using Inv.API.Models.CustomModel;
using Inv.BLL.Services.MsReceiptNote;
using Inv.BLL.Services.CalPostOrder;
using Inv.Static.Enums;
using System.Transactions;
using Inv.BLL.Services.MsTerms;
using Inv.BLL.Services.MSCustomer;
using Inv.BLL.Services.HrEmployees;
using Inv.BLL.Services.CalBusinessPartnerAccounts;
using Inv.BLL.Services.GLDefAccount;
using Inv.BLL.Services.SysAnalyticalCodes;
using Inv.BLL.Services.CalCostCenters;
using Inv.BLL.Services.ProdJobOrder;
using Inv.BLL.Services.SrVehicles;
using Inv.BLL.Services.MSCurrency;
using Inv.DAL.RedisCache;


namespace Inv.API.Controllers.Shared
{
    public class PostOrderController : BaseController
    {
        public string Message = string.Empty;
        public string MessageBox = string.Empty;

        private RedisCache redis = RedisCache.GetInstance();
        private readonly ICal_PostOrderService PostOrderService;
        private readonly IProd_JobOrderService JobOrderService;
        private readonly IMs_TermsService TermsService;
        private readonly IMS_CustomerService CustomerService;
        private readonly IMS_VendorService VendorService;
        private readonly IHr_EmployeesService EmpService;
        private readonly ICal_BusinessPartnerAccountsService BusinessService;
        private readonly IGLDefAccountService Cal_AccountChart;
        private readonly ISys_AnalyticalCodesService AnalyticalCodesService;
        private readonly ICalCostCentersService CostCentersService;
        private readonly ISr_VehiclesService VehiclesService;
        private readonly IMS_CurrencyService CurrencyService;
        public string tableNameHeader = string.Empty;

        public PostOrderController(string TableNameHeader, ICal_PostOrderService postOrderService, IMs_TermsService termsService,
            IMS_CustomerService customerService, IMS_VendorService vendorService, IHr_EmployeesService empService, ICal_BusinessPartnerAccountsService 
            businessService, IGLDefAccountService calAccountChart, ISys_AnalyticalCodesService analyticalCodesService, ICalCostCentersService costCentersService, 
            IProd_JobOrderService jobOrderService, ISr_VehiclesService vehiclesService, IMS_CurrencyService currencyService)
        {
            this.tableNameHeader = TableNameHeader;
            this.JobOrderService = jobOrderService;
            this.PostOrderService = postOrderService;
            this.TermsService = termsService;
            this.CustomerService = customerService;
            this.VendorService = vendorService;
            this.EmpService = empService;
            this.BusinessService = businessService;
            this.Cal_AccountChart = calAccountChart;
            this.AnalyticalCodesService = analyticalCodesService;
            this.CostCentersService = costCentersService;
            this.VehiclesService = vehiclesService;
            this.CurrencyService = currencyService;
        }


        #region Save From ReceiptNote To Cal_PostOrder
        public bool AccountingSave(int? FinancialIntervalsId, Ms_ReceiptNote bsReceiptNote, FormMode formMode)
        {
            MS_Settings Setting = redis.GetOrSetSettings();
            MS_Currency LocalCurrency = redis.GetOrSetLocalCurrency();

            bool valid = false, SkipCondition = false; /*int GlobalAccOut;*/
            List<Cal_PostOrder> post = new List<Cal_PostOrder>();
            if (!bsReceiptNote.CurrencyId.HasValue)
            {
                Message = "لابد من اختيار عملة المستند اولا  ";
                return false;
            }
            if (formMode == FormMode.Edit)
            {
                #region Remove Old Post
                if (bsReceiptNote != null)
                {
                    if (bsReceiptNote.RectId != 0)
                    {
                        Ms_ReceiptNote slInv = db.Ms_ReceiptNote.FirstOrDefault(x => x.RectId == bsReceiptNote.RectId);
                        if (slInv != null)
                        {
                            List<Cal_PostOrder> OldPost = PostOrderService.GetAll(x => x.TableCode == tableNameHeader && x.TableEntityId == bsReceiptNote.RectId);
                            int cont = OldPost.Count();
                            if (OldPost.Count > 0)
                            {
                                int deletedCount = PostOrderService.DeleteList(OldPost);
                                if (deletedCount <= 0)
                                {
                                    Message = "لم ينجح تحديث الأرصده السابقه *** حاول مره اخرى   ";
                                    return false;
                                }
                            }
                        }
                        else return false;
                    }
                    else return false;
                }
                else return false;
                #endregion
            }
            //if (formMode == FormMode.Add)
            //{
            if (bsReceiptNote != null)
            {
                //List<Cal_PostOrder> post = new List<Cal_PostOrder>();
                if (bsReceiptNote.TermId.HasValue)
                {
                    Ms_Terms term = TermsService.GetById(bsReceiptNote.TermId.Value);
                    if (term != null)
                    {
                        List<Ms_TermsDetails> trDetails = TermsService.FindTermsDetailsById(x => x.TermId == term.TermId);

                        List<Cal_CustAccounts> lstCusAccs = new List<Cal_CustAccounts>();
                        List<Cal_VendAccounts> lstVendAccs = new List<Cal_VendAccounts>();
                        List<Cal_EmpAccounts> lstEmpAccs = new List<Cal_EmpAccounts>();
                        List<Cal_AssetAccounts> lstAssets = new List<Cal_AssetAccounts>();
                        List<Cal_BusinessPartnerAccounts> lstBusPartnerAccs = new List<Cal_BusinessPartnerAccounts>();
                        Cal_AccountChart chrtAccount = new Cal_AccountChart();

                        #region Definition
                        if (bsReceiptNote.RectSourceType.GetValueOrDefault(0) == 1 || (bsReceiptNote.RectSourceType.GetValueOrDefault(0) >= 5 && bsReceiptNote.RectSourceType.GetValueOrDefault(0) < 15))
                        {
                            if (bsReceiptNote.CustomerId.HasValue)
                                lstCusAccs = CustomerService.GetCustAccounts(x => x.CustomerId == bsReceiptNote.CustomerId && x.IsInUse == true);
                            else
                            {
                                Message = "العميل الفرعى غير موجود  ";
                                return false;
                            }
                        }
                        else if (bsReceiptNote.RectSourceType.GetValueOrDefault(0) == 2 ||
                                        (bsReceiptNote.RectSourceType.GetValueOrDefault(0) >= 15 && bsReceiptNote.RectSourceType.GetValueOrDefault(0) < 25))
                        {
                            if (bsReceiptNote.CustomerId.HasValue)
                                lstVendAccs = VendorService.GetVendAccounts(x => x.VendorId == bsReceiptNote.CustomerId && x.IsInUse == true);
                            else
                            {
                                Message = "المورد الفرعى غير موجود  ";
                                return false;
                            }
                        }
                        else if (bsReceiptNote.RectSourceType == 4 || bsReceiptNote.RectSourceType == 35 ||
                                        (bsReceiptNote.RectSourceType >= 25 && bsReceiptNote.RectSourceType < 34))
                        {
                            if (bsReceiptNote.EmpId.HasValue)
                                lstEmpAccs = EmpService.GetEmpAccounts(x => x.EmpId == bsReceiptNote.EmpId && x.IsInUse == true);
                            else
                            {
                                Message = "الموظف الفرعى غير موجود  ";
                                return false;
                            }
                        }
                        else if (bsReceiptNote.RectSourceType == 36 || bsReceiptNote.RectSourceType == 37)
                        {
                            if (bsReceiptNote.CustomerId.HasValue)
                                lstBusPartnerAccs = BusinessService.GetAll(x => x.TableEntityId == bsReceiptNote.CustomerId && x.TableCode == "Prod_JobOrder" && x.IsInUse == true);
                            else
                            {
                                Message = "أمر الشغل غير موجود  ";
                                return false;
                            }
                        }
                        else if (bsReceiptNote.RectSourceType >= 38 && bsReceiptNote.RectSourceType <= 47)
                        {
                            if (bsReceiptNote.CustomerId.HasValue)
                                lstBusPartnerAccs = BusinessService.GetAll(x => x.TableEntityId == bsReceiptNote.CustomerId && x.TableCode == "Sr_Vehicles" && x.IsInUse == true);
                            else
                            {
                                Message = "المركبه غير موجوده  ";
                                return false;
                            }
                        }
                        else if (bsReceiptNote.RectSourceType >= 48 && bsReceiptNote.RectSourceType <= 50)
                        {
                            if (bsReceiptNote.CustomerId.HasValue)
                                lstBusPartnerAccs = BusinessService.GetAll(x => x.TableEntityId == bsReceiptNote.CustomerId && x.TableCode == "Sr_VehicleJobOrder" && x.IsInUse == true);
                            else
                            {
                                Message = "أمر شغل المركبه غير موجود  ";
                                return false;
                            }
                        }
                        else if (bsReceiptNote.RectSourceType >= 51 && bsReceiptNote.RectSourceType <= 60)
                        {
                            if (bsReceiptNote.CustomerId.HasValue)
                                lstBusPartnerAccs = BusinessService.GetAll(x => x.TableEntityId == bsReceiptNote.CustomerId && x.TableCode == "Ms_LetterOfGuarantee" && x.IsInUse == true);
                            else
                            {
                                Message = "خطاب الضمان غير موجود  ";
                                return false;
                            }
                        }
                        else if (bsReceiptNote.RectSourceType >= 61 && bsReceiptNote.RectSourceType <= 63)
                        {
                            if (bsReceiptNote.CustomerId.HasValue)
                                lstBusPartnerAccs = BusinessService.GetAll(x => x.TableEntityId == bsReceiptNote.CustomerId && x.TableCode == "Sr_JobOrder" && x.IsInUse == true);
                            else
                            {
                                Message = "أمر صيانة المركبه غير موجود  ";
                                return false;
                            }
                        }
                        else if (bsReceiptNote.RectSourceType >= 64 && bsReceiptNote.RectSourceType <= 66)
                        {
                            if (bsReceiptNote.CustomerId.HasValue)
                                lstBusPartnerAccs = BusinessService.GetAll(x => x.TableEntityId == bsReceiptNote.CustomerId && x.TableCode == "Repair_JobOrder" && x.IsInUse == true);
                            else
                            {
                                Message = "أمر صيانة المعدات غير موجود  ";
                                return false;
                            }
                        }
                        else if (bsReceiptNote.RectSourceType >= 67 && bsReceiptNote.RectSourceType <= 77)
                        {
                            if (bsReceiptNote.CustomerId.HasValue)
                                lstAssets = db.Cal_AssetAccounts.Where(x => x.AssetId == bsReceiptNote.CustomerId && x.IsInUse == true).ToList();
                            else
                            {
                                Message = "الأصل الثابت غير موجود  ";
                                return false;
                            }
                        }
                        else if (bsReceiptNote.RectSourceType >= 78 && bsReceiptNote.RectSourceType <= 88)
                        {
                            if (bsReceiptNote.CustomerId.HasValue)
                                lstBusPartnerAccs = BusinessService.GetAll(x => x.TableEntityId == bsReceiptNote.CustomerId && x.TableCode == "Proj_Projects" && x.IsInUse == true);
                            else
                            {
                                Message = "المشروع غير موجود  ";
                                return false;
                            }
                        }
                        else if (bsReceiptNote.RectSourceType == 34)
                        {
                            if (bsReceiptNote.AccountId.HasValue)
                                chrtAccount = Cal_AccountChart.GetById(bsReceiptNote.AccountId.Value);
                            else
                            {
                                Message = "الحساب الفرعى غير موجود  ";
                                return false;
                            }
                        }
                        else if (bsReceiptNote.RectSourceType == 3) { }
                        else
                        {
                            Message = "لابد من اختيار الجهه  ";
                            return false;
                        }
                        #endregion

                        if (trDetails.Count > 0)
                        {
                            if (trDetails[0].AnalaticalCodeMust == true && !bsReceiptNote.AId.HasValue)
                            {
                                Message = "الكود التحليلى إجبارى ";
                                return false;
                            }
                            Sys_AnalyticalCodes AnCode = null;
                            try
                            {
                                //if (!bsReceiptNote.AId.HasValue && !string.IsNullOrEmpty(txtAnalyticalCode.Text.TrimEnd(' ').TrimStart(' ')))
                                if (!bsReceiptNote.AId.HasValue)
                                {
                                    AnCode = GetAnalyticalCode(bsReceiptNote.AId.Value);
                                    List<Sys_AnalyticalCodes> AnCodeList = AnalyticalCodesService.GetAll(x => x.Code == AnCode.Code);
                                    if (AnCodeList != null && AnCodeList.Count > 0)
                                    {
                                        bsReceiptNote.AId = AnCodeList[0].AId;
                                        AnCode = AnCodeList[0];
                                    }
                                }
                            }
                            catch
                            {
                            }

                            if (AnCode == null && bsReceiptNote.AId.HasValue)
                            {
                                AnCode = AnalyticalCodesService.GetById(bsReceiptNote.AId.Value);
                            }
                            if (!trDetails[0].AccountIdDebit.HasValue && trDetails[0].AccCashDebitOrCredit != true && trDetails[0].AccDiscDebitOrCredit != true &&
                                trDetails[0].AccTaxDebitOrCredit != true && trDetails[0].AddAcc1DebitOrCredit != true && trDetails[0].AddAcc2DebitOrCredit != true
                                && trDetails[0].AddAcc3DebitOrCredit != true && trDetails[0].AddAcc4DebitOrCredit != true && trDetails[0].AddAcc5DebitOrCredit != true
                                 && trDetails[0].AccountDebitFixed != 0 && trDetails[0].AccountDebitFixed != 2)
                            {
                                Message = "لا يوجد حساب مدين بنوع السند  ";
                                return false;
                            }
                            if (!trDetails[0].AccountIdCredit.HasValue && trDetails[0].AccCashDebitOrCredit != false && trDetails[0].AccDiscDebitOrCredit != false &&
                               trDetails[0].AccTaxDebitOrCredit != false && trDetails[0].AddAcc1DebitOrCredit != false && trDetails[0].AddAcc2DebitOrCredit != false
                               && trDetails[0].AddAcc3DebitOrCredit != false && trDetails[0].AddAcc4DebitOrCredit != false && trDetails[0].AddAcc5DebitOrCredit != false
                                && trDetails[0].AccountCreditFixed != 0 && trDetails[0].AccountCreditFixed != 2)
                            {
                                Message = "لا يوجد حساب دائن بنوع السند  ";
                                return false;
                            }
                            if (trDetails[0].AccountDebitFixed == 2)
                            {
                                if (AnCode == null && trDetails[0].AnalaticalCodeMust.GetValueOrDefault(false))
                                {
                                    MessageBox = "الكود التحليلي اجبارى ";
                                    return false;
                                }
                                else if (AnCode == null)
                                {
                                    SkipCondition = true;
                                }
                            }
                            if (!SkipCondition)
                                #region Debit Account
                                // manage first debit account in doctype
                                if (trDetails[0].AccountDebitFixed.HasValue && !string.IsNullOrEmpty(trDetails[0].ValuAccountDebit))
                                {
                                    //if (post.Count == 0)
                                    Cal_PostOrder postOrder = new Cal_PostOrder();
                                    postOrder.IsOpenningTerm = term.IsOpenningTerm;

                                    #region Cost Center
                                    if (trDetails[0].CostCenterIdDebit.HasValue || trDetails[0].CostCenterDebitFixed == 2)
                                    {
                                        Cal_CostCenters center = null;
                                        if (trDetails[0].CostCenterDebitFixed == 1)
                                        {
                                            //center = CostCentersService.GetByCostCenterId(trDetails[0].CostCenterIdDebit.Value);
                                            center = CostCentersService.GetById(trDetails[0].CostCenterIdDebit.Value);
                                            postOrder.CostCenterId = trDetails[0].CostCenterIdDebit;
                                            postOrder.HelpCostCenterId = null;
                                            postOrder.IsHelpCostCenter = false;
                                            postOrder.HelpCostCenterType = null;
                                        }
                                        else if (trDetails[0].CostCenterDebitFixed == 2 && AnCode != null && AnCode.CostCenterId.GetValueOrDefault(0) != 0)
                                        {
                                            //center = CostCentersService.GetById(AnCode.CostCenterId.Value);
                                            center = CostCentersService.GetById(AnCode.CostCenterId.Value);
                                            postOrder.CostCenterId = AnCode.CostCenterId;
                                            postOrder.HelpCostCenterId = null;
                                            postOrder.IsHelpCostCenter = false;
                                            postOrder.HelpCostCenterType = null;
                                        }
                                        else if (trDetails[0].CostCenterDebitFixed == 0)
                                        {
                                            if (bsReceiptNote.RectSourceType.GetValueOrDefault(0) == 1 ||
                                                (bsReceiptNote.RectSourceType.GetValueOrDefault(0) >= 5 && bsReceiptNote.RectSourceType.GetValueOrDefault(0) < 15))
                                            {
                                                MS_Customer cust = CustomerService.GetById(lstCusAccs[0].CustomerId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "MS_Customer";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب المدين و العميل غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار العميل أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType.GetValueOrDefault(0) == 2 ||
                                         (bsReceiptNote.RectSourceType.GetValueOrDefault(0) >= 15 && bsReceiptNote.RectSourceType.GetValueOrDefault(0) < 25))
                                            {
                                                MS_Vendor cust = VendorService.GetById(lstVendAccs[0].VendorId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "MS_Vendor";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب المدين و المورد غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار المورد أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType == 4 || bsReceiptNote.RectSourceType == 35 ||
                                                (bsReceiptNote.RectSourceType >= 25 &&
                                                bsReceiptNote.RectSourceType < 34))
                                            {
                                                Hr_Employees cust = EmpService.GetById(lstEmpAccs[0].EmpId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId1.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId1;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId1;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Hr_Employees";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب المدين و الموظف غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار الموظف أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType == 36 || bsReceiptNote.RectSourceType == 37)
                                            {
                                                Prod_JobOrder cust = JobOrderService.GetById(lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Prod_JobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب المدين و أمر الشغل غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر الشغل أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType >= 38 && bsReceiptNote.RectSourceType <= 47)
                                            {
                                                Sr_Vehicles cust = VehiclesService.GetById(lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Sr_Vehicles";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب المدين و المركبه غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار المركبه أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType >= 48 && bsReceiptNote.RectSourceType <= 50)
                                            {
                                                Sr_VehicleJobOrder cust = db.Sr_VehicleJobOrder.FirstOrDefault(x => x.VJOrderId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Sr_VehicleJobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب المدين و أمر الشغل غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر الشغل أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType >= 51 && bsReceiptNote.RectSourceType <= 60)
                                            {
                                                Ms_LetterOfGuarantee cust = db.Ms_LetterOfGuarantee.FirstOrDefault(x => x.LetOfGrnteeId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId1.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId1;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId1;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Ms_LetterOfGuarantee";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب المدين و خطاب الضمان غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار خطاب الضمان أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType >= 61 && bsReceiptNote.RectSourceType <= 63)
                                            {
                                                Sr_JobOrder cust = db.Sr_JobOrder.FirstOrDefault(x => x.JorderId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Sr_JobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب المدين و أمر صيانة مركبه غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر صيانة مركبه أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType >= 64 && bsReceiptNote.RectSourceType <= 66)
                                            {
                                                Repair_JobOrder cust = db.Repair_JobOrder.FirstOrDefault(x => x.RepairId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Repair_JobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب المدين و أمر صيانة معدات غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر صيانة معدات أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType >= 67 && bsReceiptNote.RectSourceType <= 77)
                                            {
                                                Asset_AssetCard cust = db.Asset_AssetCard.FirstOrDefault(x => x.AssetId == lstAssets[0].AssetId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Asset_AssetCard";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب المدين و الأصل الثابت غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار الأصل الثابت أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType >= 78 && bsReceiptNote.RectSourceType <= 88)
                                            {
                                                Proj_Projects cust = db.Proj_Projects.FirstOrDefault(x => x.ProjectId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId1.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId1;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId1;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Proj_Projects";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب المدين و الأصل الثابت غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار الأصل الثابت أولا";
                                                    return false;
                                                }
                                            }
                                            //if (bsReceiptNote.RectSourceType == 34)
                                            //{
                                            //    if (chrtAccount.cos.CostCenterId1.HasValue)
                                            //        {
                                            //            center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                            //            postOrder.CostCenterId = cust.CostCenterId1;
                                            //            postOrder.HelpCostCenterId = cust.CostCenterId1;
                                            //            postOrder.IsHelpCostCenter = true;
                                            //            postOrder.HelpCostCenterType = "Hr_Employees";
                                            //        }
                                            //        else
                                            //        {
                                            //            Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب المدين و المورد غير مرتبط بمركز تكلفه";
                                            //            return false;
                                            //        }                                               
                                            //}
                                        }

                                        if (center != null)
                                        {
                                            if (center.CurrencyId.HasValue)
                                            {
                                                ////postOrder.CurrencyId = chrt.CurrencyId;
                                                postOrder.BalancCrencyBeforDebtCostCentr = center.BalanceDebitCurncy;
                                                postOrder.BalancLocalBeforDebCostCentr = center.BalanceDebitLocal;
                                                postOrder.BalancCrencyBeforCredCostCentr = center.BalanceCreditCurncy;
                                                postOrder.BalancLocalBeforCredCostCentr = center.BalanceCreditLocal;
                                            }
                                            else
                                            {
                                                Message = "عملة مركز التكلفه المدين غير موجود *** كود مركز التكلفه =  " + center.CostCenterCode +
                                                    " اسم مركز التكلفه = " + center.CostCenterNameA;
                                                return false;
                                            }
                                        }

                                    }
                                    #endregion

                                    postOrder.TermId = term.TermId;
                                    postOrder.TableCode = tableNameHeader;
                                    postOrder.TableEntityId = bsReceiptNote.RectId;
                                    postOrder.IsPosted = false;
                                    postOrder.CurrencyId = bsReceiptNote.CurrencyId;
                                    if (trDetails[0].AccountIdDebit.HasValue)
                                    {
                                        if (trDetails[0].AccountDebitFixed == 1)
                                        {
                                            Cal_AccountChart chrt = Cal_AccountChart.GetById(trDetails[0].AccountIdDebit.Value);
                                            if (chrt != null)
                                            {
                                                if (chrt.CurrencyId.HasValue)
                                                {
                                                    //postOrder.CurrencyId = chrt.CurrencyId;
                                                    postOrder.BalaceCurrencyBeforDebit = chrt.BalanceDebitCurncy;
                                                    postOrder.BalaceLocalBeforDebit = chrt.BalanceDebitLocal;
                                                    postOrder.BalaceCurrencyBeforCredit = chrt.BalanceCreditCurncy;
                                                    postOrder.BalaceLocalBeforCredit = chrt.BalanceCreditLocal;
                                                    MS_Currency cur = CurrencyService.GetById(bsReceiptNote.CurrencyId.Value);
                                                    if (cur != null)
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                }
                                                else
                                                {
                                                    Message = "عملة الحساب المدين غير موجود *** كود الحساب =  " + chrt.AccountCode +
                                                        " اسم الحساب = " + chrt.AccountNameA;
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                Message = "الحساب المدين غير موجود . . .";
                                                return false;
                                            }
                                        }
                                        else if (trDetails[0].AccountDebitFixed == 2)
                                        {
                                            if (AnCode == null || !AnCode.AccountId.HasValue)
                                            {
                                                Message = "الكود التحليلى أو الحساب المرتبط به غير صحيح . . .";
                                                return false;
                                            }
                                            Cal_AccountChart chrt = Cal_AccountChart.GetById(AnCode.AccountId.Value);
                                            if (chrt != null)
                                            {
                                                if (chrt.CurrencyId.HasValue)
                                                {
                                                    //postOrder.CurrencyId = chrt.CurrencyId;
                                                    postOrder.BalaceCurrencyBeforDebit = chrt.BalanceDebitCurncy;
                                                    postOrder.BalaceLocalBeforDebit = chrt.BalanceDebitLocal;
                                                    postOrder.BalaceCurrencyBeforCredit = chrt.BalanceCreditCurncy;
                                                    postOrder.BalaceLocalBeforCredit = chrt.BalanceCreditLocal;
                                                    MS_Currency cur = CurrencyService.GetById(bsReceiptNote.CurrencyId.Value);
                                                    if (cur != null)
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                }
                                                else
                                                {
                                                    Message = "عملة الحساب المدين غير موجود *** كود الحساب =  " + chrt.AccountCode +
                                                        " اسم الحساب = " + chrt.AccountNameA;
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                Message = "الحساب المدين غير موجود . . .";
                                                return false;
                                            }
                                        }
                                    }
                                    //else if (trDetails[0].AccCashDebitOrCredit != true && trDetails[0].AccDiscDebitOrCredit != true && trDetails[0].AccTaxDebitOrCredit!=true)
                                    //{
                                    //    Message = "الحساب المدين غير موجود بنوع السند  ";
                                    //    return false;
                                    //}
                                    if (trDetails[0].AccountDebitFixed == 1)
                                    {
                                        postOrder.AccountId = trDetails[0].AccountIdDebit.Value;
                                        postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDebit, bsReceiptNote);
                                        postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                        postOrder.HelpAccId = null;
                                        postOrder.IsHelpAcc = false;
                                        postOrder.HelpAccType = null;
                                    }
                                    else if (trDetails[0].AccountDebitFixed == 2)
                                    {
                                        postOrder.AccountId = AnCode.AccountId.Value;
                                        postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDebit, bsReceiptNote);
                                        postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                        postOrder.HelpAccId = null;
                                        postOrder.IsHelpAcc = false;
                                        postOrder.HelpAccType = null;
                                    }
                                    else if (trDetails[0].AccountDebitFixed == 0)
                                    {

                                        if (bsReceiptNote.RectSourceType.GetValueOrDefault(0) == 1 ||
                                    (bsReceiptNote.RectSourceType.GetValueOrDefault(0) >= 5 && bsReceiptNote.RectSourceType.GetValueOrDefault(0) < 15))
                                        {
                                            if (lstCusAccs.Count == 0)
                                            {
                                                MessageBox = "العميل غير مربوط بحساب استاذ *** راجع مستند تعريف العميل   ";
                                                return false;
                                            }
                                            Cal_CustAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstCusAccs, bsReceiptNote);
                                            //Cal_CustAccounts CusAccs = GetCustHelpEntity((bsReceiptNote.Current as Ms_ReceiptNote).RectSourceType.GetValueOrDefault(0), lstCusAccs);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف العميل *** راجع مستند تعريف العميل   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "العميل غير مربوط بحساب استاذ *** راجع مستند تعريف العميل   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.CustAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "MS_Customer";
                                            MS_Customer cust = CustomerService.GetById(CusAccs.CustomerId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                        postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDebit, bsReceiptNote);
                                                        postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "العميل غير مرتبط بعمله *** راجع كارت العميل   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "العميل غير مرتبط بعمله *** راجع كارت العميل   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "العميل غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType.GetValueOrDefault(0) == 2 ||
                                            (bsReceiptNote.RectSourceType.GetValueOrDefault(0) >= 15 && bsReceiptNote.RectSourceType.GetValueOrDefault(0) < 25))
                                        {
                                            if (lstVendAccs.Count == 0)
                                            {
                                                MessageBox = "المورد غير مربوط بحساب استاذ *** راجع مستند تعريف المورد   ";
                                                return false;
                                            }
                                            Cal_VendAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstVendAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف المورد *** راجع مستند تعريف المورد   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "المورد غير مربوط بحساب استاذ *** راجع مستند تعريف المورد   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.VendAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "MS_Vendor";
                                            MS_Vendor cust = VendorService.GetById(CusAccs.VendorId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                        postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDebit, bsReceiptNote);
                                                        postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "المورد غير مرتبط بعمله *** راجع كارت المورد   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "المورد غير مرتبط بعمله *** راجع كارت المورد   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "المورد غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType == 4 || bsReceiptNote.RectSourceType == 35 ||
                                            (bsReceiptNote.RectSourceType >= 25 &&
                                            bsReceiptNote.RectSourceType < 34))
                                        {
                                            if (lstEmpAccs.Count == 0)
                                            {
                                                MessageBox = "الموظف غير مربوط بحساب استاذ *** راجع مستند تعريف الموظف   ";
                                                return false;
                                            }
                                            Cal_EmpAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstEmpAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الموظف *** راجع مستند تعريف الموظف   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الموظف غير مربوط بحساب استاذ *** راجع مستند تعريف الموظف   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.EmpAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Hr_Employees";
                                            Hr_Employees cust = EmpService.GetById(CusAccs.EmpId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                        postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDebit, bsReceiptNote);
                                                        postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الموظف غير مرتبط بعمله *** راجع كارت الموظف   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "الموظف غير مرتبط بعمله *** راجع كارت الموظف   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الموظف غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType == 36 || bsReceiptNote.RectSourceType == 37)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Prod_JobOrder";
                                            Prod_JobOrder cust = JobOrderService.GetById(CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                        postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDebit, bsReceiptNote);
                                                        postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                        postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDebit, bsReceiptNote);
                                                        postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType >= 38 && bsReceiptNote.RectSourceType <= 47)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Sr_Vehicles";
                                            Sr_Vehicles cust = VehiclesService.GetById(CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                //if (cust.CurrencyId.HasValue)
                                                //{
                                                //    MS_Currency cur = CurrencyService.GetById(tran,cust.CurrencyId.Value);
                                                //    if (cur != null)
                                                //    {
                                                //        postOrder.Rate = bsReceiptNote.Rate;
                                                //        postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDebit, bsReceiptNote);
                                                //        postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                //    }
                                                //    else
                                                //    {
                                                //        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                //        return false;
                                                //    }
                                                //}
                                                //else
                                                //{
                                                if (LocalCurrency != null)
                                                {
                                                    postOrder.Rate = bsReceiptNote.Rate;
                                                    postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDebit, bsReceiptNote);
                                                    postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                }
                                                else
                                                {
                                                    MessageBox = "خطأ بالعمله المحليه   ";
                                                    return false;
                                                }
                                                //}
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType >= 48 && bsReceiptNote.RectSourceType <= 50)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Sr_VehicleJobOrder";
                                            Sr_VehicleJobOrder cust = db.Sr_VehicleJobOrder.FirstOrDefault(x => x.VJOrderId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                //if (cust.CurrencyId.HasValue)
                                                //{
                                                //    MS_Currency cur = CurrencyService.GetById(tran,cust.CurrencyId.Value);
                                                //    if (cur != null)
                                                //    {
                                                //        postOrder.Rate = bsReceiptNote.Rate;
                                                //        postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDebit, bsReceiptNote);
                                                //        postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                //    }
                                                //    else
                                                //    {
                                                //        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                //        return false;
                                                //    }
                                                //}
                                                //else
                                                //{
                                                if (LocalCurrency != null)
                                                {
                                                    postOrder.Rate = bsReceiptNote.Rate;
                                                    postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDebit, bsReceiptNote);
                                                    postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                }
                                                else
                                                {
                                                    MessageBox = "خطأ بالعمله المحليه   ";
                                                    return false;
                                                }
                                                //}
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType >= 51 && bsReceiptNote.RectSourceType <= 60)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Ms_LetterOfGuarantee";
                                            Ms_LetterOfGuarantee cust = db.Ms_LetterOfGuarantee.FirstOrDefault(x => x.LetOfGrnteeId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                        postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDebit, bsReceiptNote);
                                                        postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                        postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDebit, bsReceiptNote);
                                                        postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType >= 61 && bsReceiptNote.RectSourceType <= 63)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Sr_JobOrder";
                                            Sr_JobOrder cust = db.Sr_JobOrder.FirstOrDefault(x => x.JorderId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                        postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDebit, bsReceiptNote);
                                                        postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                        postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDebit, bsReceiptNote);
                                                        postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType >= 64 && bsReceiptNote.RectSourceType <= 66)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Repair_JobOrder";
                                            Repair_JobOrder cust = db.Repair_JobOrder.FirstOrDefault(x => x.RepairId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                        postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDebit, bsReceiptNote);
                                                        postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                        postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDebit, bsReceiptNote);
                                                        postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType >= 67 && bsReceiptNote.RectSourceType <= 77)
                                        {
                                            if (lstAssets.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_AssetAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstAssets, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.AssetAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Asset_AssetCard";
                                            Asset_AssetCard cust = db.Asset_AssetCard.FirstOrDefault(x => x.AssetId == CusAccs.AssetId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                        postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDebit, bsReceiptNote);
                                                        postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                        postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDebit, bsReceiptNote);
                                                        postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType >= 78 && bsReceiptNote.RectSourceType <= 88)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Proj_Projects";
                                            Proj_Projects cust = db.Proj_Projects.FirstOrDefault(x => x.ProjectId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                        postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDebit, bsReceiptNote);
                                                        postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                        postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDebit, bsReceiptNote);
                                                        postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType == 34)
                                        {
                                            //postOrder.HelpAccId = CusAccs.EmpAccountId;
                                            postOrder.AccountId = chrtAccount.AccountId;
                                            postOrder.IsHelpAcc = false;
                                            //postOrder.HelpAccType = "Hr_Employees";
                                            //MS_Vendor cust = VendorService.GetById(CusAccs.EmpId.Value);
                                            if (chrtAccount != null)
                                            {
                                                if (chrtAccount.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(chrtAccount.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                        postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDebit, bsReceiptNote);
                                                        postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الحساب غير مرتبط بعمله *** راجع دليل الحسابات   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "الحساب غير مرتبط بعمله *** راجع دليل الحسابات   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الحساب غير موجود   ";
                                                return false;
                                            }
                                        }
                                    }
                                    post.Add(postOrder);
                                }
                            #endregion

                            SkipCondition = false;
                            if (trDetails[0].AccountCreditFixed == 2)
                            {
                                if (AnCode == null && trDetails[0].AnalaticalCodeMust.GetValueOrDefault(false))
                                {
                                    MessageBox = "الكود التحليلي اجبارى ";
                                    return false;
                                }
                                else if (AnCode == null)
                                {
                                    SkipCondition = true;
                                }
                            }
                            if (!SkipCondition)
                                #region Credit Account
                                // manage first credit account in doctype
                                if (trDetails[0].AccountCreditFixed.HasValue && !string.IsNullOrEmpty(trDetails[0].ValuAccountCredit))
                                {
                                    //if (post.Count == 0)
                                    Cal_PostOrder postOrder = new Cal_PostOrder();
                                    postOrder.IsOpenningTerm = term.IsOpenningTerm;

                                    #region Cost Center
                                    if (trDetails[0].CostCenterIdCredit.HasValue || trDetails[0].CostCenterCreditFixed == 2)
                                    {
                                        Cal_CostCenters center = null;
                                        if (trDetails[0].CostCenterCreditFixed == 1)
                                        {
                                            center = CostCentersService.GetById(trDetails[0].CostCenterIdCredit.Value);
                                            postOrder.CostCenterId = trDetails[0].CostCenterIdCredit;
                                            postOrder.HelpCostCenterId = null;
                                            postOrder.IsHelpCostCenter = false;
                                            postOrder.HelpCostCenterType = null;
                                        }
                                        else if (trDetails[0].CostCenterCreditFixed == 2 && AnCode != null && AnCode.CostCenterId.GetValueOrDefault(0) != 0)
                                        {
                                            center = CostCentersService.GetById(AnCode.CostCenterId.Value);
                                            postOrder.CostCenterId = AnCode.CostCenterId;
                                            postOrder.HelpCostCenterId = null;
                                            postOrder.IsHelpCostCenter = false;
                                            postOrder.HelpCostCenterType = null;
                                        }
                                        else if (trDetails[0].CostCenterCreditFixed == 0)
                                        {
                                            if (bsReceiptNote.RectSourceType.GetValueOrDefault(0) == 1 ||
                                      (bsReceiptNote.RectSourceType.GetValueOrDefault(0) >= 5 && bsReceiptNote.RectSourceType.GetValueOrDefault(0) < 15))
                                            {
                                                MS_Customer cust = CustomerService.GetById(lstCusAccs[0].CustomerId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "MS_Customer";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب الدائن و العميل غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار العميل أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType.GetValueOrDefault(0) == 2 ||
                                             (bsReceiptNote.RectSourceType.GetValueOrDefault(0) >= 15 && bsReceiptNote.RectSourceType.GetValueOrDefault(0) < 25))
                                            {
                                                MS_Vendor cust = VendorService.GetById(lstVendAccs[0].VendorId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "MS_Vendor";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب الدائن و المورد غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار المورد أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType == 4 || bsReceiptNote.RectSourceType == 35 ||
                                                (bsReceiptNote.RectSourceType >= 25 &&
                                                bsReceiptNote.RectSourceType < 34))
                                            {
                                                Hr_Employees cust = EmpService.GetById(lstEmpAccs[0].EmpId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId1.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId1;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId1;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Hr_Employees";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب  و الموظف غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار الموظف أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType == 36 || bsReceiptNote.RectSourceType == 37)
                                            {
                                                Prod_JobOrder cust = JobOrderService.GetById(lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Prod_JobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب الدائن و أمر الشغل غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر الشغل أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType >= 38 && bsReceiptNote.RectSourceType <= 47)
                                            {
                                                Sr_Vehicles cust = VehiclesService.GetById(lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Sr_Vehicles";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب الدائن و المركبه غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار المركبه أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType >= 48 && bsReceiptNote.RectSourceType <= 50)
                                            {
                                                Sr_VehicleJobOrder cust = db.Sr_VehicleJobOrder.FirstOrDefault(x => x.VJOrderId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Sr_VehicleJobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب الدائن و أمر الشغل غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر الشغل أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType >= 51 && bsReceiptNote.RectSourceType <= 60)
                                            {
                                                Ms_LetterOfGuarantee cust = db.Ms_LetterOfGuarantee.FirstOrDefault(x => x.LetOfGrnteeId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId1.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId1;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId1;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Ms_LetterOfGuarantee";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب الدائن و خطاب الضمان غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار خطاب الضمان أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType >= 61 && bsReceiptNote.RectSourceType <= 63)
                                            {
                                                Sr_JobOrder cust = db.Sr_JobOrder.FirstOrDefault(x => x.JorderId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Sr_JobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب الدائن و أمر صيانة مركبه غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر صيانة مركبه أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType >= 64 && bsReceiptNote.RectSourceType <= 66)
                                            {
                                                Repair_JobOrder cust = db.Repair_JobOrder.FirstOrDefault(x => x.RepairId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Repair_JobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب الدائن و أمر صيانة معدات غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر صيانة معدات أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType >= 67 && bsReceiptNote.RectSourceType <= 77)
                                            {
                                                Asset_AssetCard cust = db.Asset_AssetCard.FirstOrDefault(x => x.AssetId == lstAssets[0].AssetId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Asset_AssetCard";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب الدائن و الأصل الثابت غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار الأصل الثابت أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType >= 78 && bsReceiptNote.RectSourceType <= 88)
                                            {
                                                Proj_Projects cust = db.Proj_Projects.FirstOrDefault(x => x.ProjectId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId1.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId1;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId1;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Proj_Projects";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب الدائن و الأصل الثابت غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار الأصل الثابت أولا";
                                                    return false;
                                                }
                                            }
                                            //if (bsReceiptNote.RectSourceType == 34)
                                            //{
                                            //    if (chrtAccount.cos.CostCenterId1.HasValue)
                                            //        {
                                            //            center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                            //            postOrder.CostCenterId = cust.CostCenterId1;
                                            //            postOrder.HelpCostCenterId = cust.CostCenterId1;
                                            //            postOrder.IsHelpCostCenter = true;
                                            //            postOrder.HelpCostCenterType = "Hr_Employees";
                                            //        }
                                            //        else
                                            //        {
                                            //            Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب  و المورد غير مرتبط بمركز تكلفه";
                                            //            return false;
                                            //        }                                               
                                            //}
                                        }

                                        if (center != null)
                                        {
                                            if (center.CurrencyId.HasValue)
                                            {
                                                ////postOrder.CurrencyId = chrt.CurrencyId;
                                                postOrder.BalancCrencyBeforDebtCostCentr = center.BalanceDebitCurncy;
                                                postOrder.BalancLocalBeforDebCostCentr = center.BalanceDebitLocal;
                                                postOrder.BalancCrencyBeforCredCostCentr = center.BalanceCreditCurncy;
                                                postOrder.BalancLocalBeforCredCostCentr = center.BalanceCreditLocal;

                                            }
                                            else
                                            {
                                                Message = "عملة مركز التكلفه الدائن غير موجود *** كود مركز التكلفه =  " + center.CostCenterCode +
                                                    " اسم مركز التكلفه = " + center.CostCenterNameA;
                                                return false;
                                            }
                                        }

                                    }
                                    #endregion

                                    postOrder.TermId = term.TermId;
                                    postOrder.TableCode = tableNameHeader;
                                    postOrder.TableEntityId = bsReceiptNote.RectId;
                                    postOrder.IsPosted = false;
                                    postOrder.CurrencyId = bsReceiptNote.CurrencyId;
                                    if (trDetails[0].AccountIdCredit.HasValue)
                                    {
                                        if (trDetails[0].AccountCreditFixed == 1)
                                        {
                                            Cal_AccountChart chrt = Cal_AccountChart.GetById(trDetails[0].AccountIdCredit.Value);
                                            if (chrt != null)
                                            {
                                                if (chrt.CurrencyId.HasValue)
                                                {
                                                    //postOrder.CurrencyId = chrt.CurrencyId;
                                                    //postOrder.BalaceCurrencyBefor = chrt.BalanceCurncy;
                                                    postOrder.BalaceCurrencyBeforDebit = chrt.BalanceDebitCurncy;
                                                    postOrder.BalaceLocalBeforDebit = chrt.BalanceDebitLocal;
                                                    postOrder.BalaceCurrencyBeforCredit = chrt.BalanceCreditCurncy;
                                                    postOrder.BalaceLocalBeforCredit = chrt.BalanceCreditLocal;
                                                    MS_Currency cur = CurrencyService.GetById(bsReceiptNote.CurrencyId.Value);
                                                    if (cur != null)
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                }
                                                else
                                                {
                                                    Message = "عملة الحساب الدائن غير موجود *** كود الحساب =  " + chrt.AccountCode +
                                                        " اسم الحساب = " + chrt.AccountNameA;
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                Message = "الحساب  غير موجود . . .";
                                                return false;
                                            }
                                        }
                                        else if (trDetails[0].AccountCreditFixed == 2)
                                        {
                                            if (AnCode == null || !AnCode.AccountId.HasValue)
                                            {
                                                Message = "الكود التحليلى أو الحساب المرتبط به غير صحيح . . .";
                                                return false;
                                            }
                                            Cal_AccountChart chrt = Cal_AccountChart.GetById(AnCode.AccountId.Value);
                                            if (chrt != null)
                                            {
                                                if (chrt.CurrencyId.HasValue)
                                                {
                                                    //postOrder.CurrencyId = chrt.CurrencyId;
                                                    postOrder.BalaceCurrencyBeforDebit = chrt.BalanceDebitCurncy;
                                                    postOrder.BalaceLocalBeforDebit = chrt.BalanceDebitLocal;
                                                    postOrder.BalaceCurrencyBeforCredit = chrt.BalanceCreditCurncy;
                                                    postOrder.BalaceLocalBeforCredit = chrt.BalanceCreditLocal;
                                                    MS_Currency cur = CurrencyService.GetById(bsReceiptNote.CurrencyId.Value);
                                                    if (cur != null)
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                }
                                                else
                                                {
                                                    Message = "عملة الحساب  غير موجود *** كود الحساب =  " + chrt.AccountCode +
                                                        " اسم الحساب = " + chrt.AccountNameA;
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                Message = "الحساب  غير موجود . . .";
                                                return false;
                                            }
                                        }
                                    }
                                    //else if (trDetails[0].AccCashDebitOrCredit != false && trDetails[0].AccDiscDebitOrCredit != false && trDetails[0].AccTaxDebitOrCredit != false)
                                    //{
                                    //    Message = "الحساب  غير موجود بنوع السند  ";
                                    //    return false;
                                    //}
                                    if (trDetails[0].AccountCreditFixed == 1)
                                    {
                                        postOrder.AccountId = trDetails[0].AccountIdCredit.Value;
                                        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsReceiptNote);
                                        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                        postOrder.HelpAccId = null;
                                        postOrder.IsHelpAcc = false;
                                        postOrder.HelpAccType = null;
                                    }
                                    else if (trDetails[0].AccountCreditFixed == 2)
                                    {
                                        postOrder.AccountId = AnCode.AccountId.Value;
                                        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsReceiptNote);
                                        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                        postOrder.HelpAccId = null;
                                        postOrder.IsHelpAcc = false;
                                        postOrder.HelpAccType = null;
                                    }
                                    else if (trDetails[0].AccountCreditFixed == 0)
                                    {
                                        if (bsReceiptNote.RectSourceType.GetValueOrDefault(0) == 1 ||
                                   (bsReceiptNote.RectSourceType.GetValueOrDefault(0) >= 5 && bsReceiptNote.RectSourceType.GetValueOrDefault(0) < 15))
                                        {
                                            if (lstCusAccs.Count == 0)
                                            {
                                                Message = "العميل غير مربوط بحساب استاذ *** راجع مستند تعريف العميل    ";
                                                //MessageBox = "العميل غير مربوط بحساب استاذ *** راجع مستند تعريف العميل   ";
                                                return false;
                                            }
                                            Cal_CustAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstCusAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف العميل *** راجع مستند تعريف العميل   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                Message = "العميل غير مربوط بحساب استاذ *** راجع مستند تعريف العميل    ";
                                                //MessageBox = "العميل غير مربوط بحساب استاذ *** راجع مستند تعريف العميل   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.CustAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "MS_Customer";
                                            MS_Customer cust = CustomerService.GetById(CusAccs.CustomerId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsReceiptNote);
                                                        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        Message = "العميل غير مرتبط بعمله *** راجع كارت العميل    ";
                                                        //MessageBox = "العميل غير مرتبط بعمله *** راجع كارت العميل   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "العميل غير مرتبط بعمله *** راجع كارت العميل    ";
                                                    //MessageBox = "العميل غير مرتبط بعمله *** راجع كارت العميل   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                Message = "العميل غير موجود    ";
                                                //MessageBox = "العميل غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType.GetValueOrDefault(0) == 2 ||
                                            (bsReceiptNote.RectSourceType.GetValueOrDefault(0) >= 15 && bsReceiptNote.RectSourceType.GetValueOrDefault(0) < 25))
                                        {
                                            if (lstVendAccs.Count == 0)
                                            {
                                                Message = "المورد غير مربوط بحساب استاذ *** راجع مستند تعريف المورد    ";
                                                //MessageBox = "المورد غير مربوط بحساب استاذ *** راجع مستند تعريف المورد   ";
                                                return false;
                                            }
                                            Cal_VendAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstVendAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف المورد *** راجع مستند تعريف المورد   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                Message = "المورد غير مربوط بحساب استاذ *** راجع مستند تعريف المورد    ";
                                                //MessageBox = "المورد غير مربوط بحساب استاذ *** راجع مستند تعريف المورد   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.VendAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "MS_Vendor";
                                            MS_Vendor cust = VendorService.GetById(CusAccs.VendorId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsReceiptNote);
                                                        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        Message = "المورد غير مرتبط بعمله *** راجع كارت المورد    ";
                                                        //MessageBox = "المورد غير مرتبط بعمله *** راجع كارت المورد   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "المورد غير مرتبط بعمله *** راجع كارت المورد    ";
                                                    //MessageBox = "المورد غير مرتبط بعمله *** راجع كارت المورد   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                Message = "المورد غير موجود    ";
                                                //MessageBox = "المورد غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType == 4 || bsReceiptNote.RectSourceType == 35 ||
                                            (bsReceiptNote.RectSourceType >= 25 &&
                                         bsReceiptNote.RectSourceType < 34))
                                        {
                                            if (lstEmpAccs.Count == 0)
                                            {
                                                MessageBox = "الموظف غير مربوط بحساب استاذ *** راجع مستند تعريف الموظف   ";
                                                return false;
                                            }
                                            Cal_EmpAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstEmpAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الموظف *** راجع مستند تعريف الموظف   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الموظف غير مربوط بحساب استاذ *** راجع مستند تعريف الموظف   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.EmpAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Hr_Employees";
                                            Hr_Employees cust = EmpService.GetById(CusAccs.EmpId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsReceiptNote);
                                                        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الموظف غير مرتبط بعمله *** راجع كارت الموظف   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "الموظف غير مرتبط بعمله *** راجع كارت الموظف   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الموظف غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType == 36 || bsReceiptNote.RectSourceType == 37)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Prod_JobOrder";
                                            Prod_JobOrder cust = JobOrderService.GetById(CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsReceiptNote);
                                                        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsReceiptNote);
                                                        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType >= 38 && bsReceiptNote.RectSourceType <= 47)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Sr_Vehicles";
                                            Sr_Vehicles cust = VehiclesService.GetById(CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                //if (cust.CurrencyId.HasValue)
                                                //{
                                                //    MS_Currency cur = CurrencyService.GetById(tran,cust.CurrencyId.Value);
                                                //    if (cur != null)
                                                //    {
                                                //        postOrder.Rate = bsReceiptNote.Rate;
                                                //        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsReceiptNote);
                                                //        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                //    }
                                                //    else
                                                //    {
                                                //        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                //        return false;
                                                //    }
                                                //}
                                                //else
                                                //{
                                                if (LocalCurrency != null)
                                                {
                                                    postOrder.Rate = bsReceiptNote.Rate;
                                                    postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsReceiptNote);
                                                    postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                }
                                                else
                                                {
                                                    MessageBox = "خطأ بالعمله المحليه   ";
                                                    return false;
                                                }
                                                //}
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType >= 48 && bsReceiptNote.RectSourceType <= 50)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Sr_VehicleJobOrder";
                                            Sr_VehicleJobOrder cust = db.Sr_VehicleJobOrder.FirstOrDefault(x => x.VJOrderId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                //if (cust.CurrencyId.HasValue)
                                                //{
                                                //    MS_Currency cur = CurrencyService.GetById(tran,cust.CurrencyId.Value);
                                                //    if (cur != null)
                                                //    {
                                                //        postOrder.Rate = bsReceiptNote.Rate;
                                                //        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsReceiptNote);
                                                //        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                //    }
                                                //    else
                                                //    {
                                                //        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                //        return false;
                                                //    }
                                                //}
                                                //else
                                                //{
                                                if (LocalCurrency != null)
                                                {
                                                    postOrder.Rate = bsReceiptNote.Rate;
                                                    postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsReceiptNote);
                                                    postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                }
                                                else
                                                {
                                                    MessageBox = "خطأ بالعمله المحليه   ";
                                                    return false;
                                                }
                                                //}
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType >= 51 && bsReceiptNote.RectSourceType <= 60)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Ms_LetterOfGuarantee";
                                            Ms_LetterOfGuarantee cust = db.Ms_LetterOfGuarantee.FirstOrDefault(x => x.LetOfGrnteeId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsReceiptNote);
                                                        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsReceiptNote);
                                                        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType >= 61 && bsReceiptNote.RectSourceType <= 63)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Sr_JobOrder";
                                            Sr_JobOrder cust = db.Sr_JobOrder.FirstOrDefault(x => x.JorderId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsReceiptNote);
                                                        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsReceiptNote);
                                                        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType >= 64 && bsReceiptNote.RectSourceType <= 66)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Repair_JobOrder";
                                            Repair_JobOrder cust = db.Repair_JobOrder.FirstOrDefault(x => x.RepairId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsReceiptNote);
                                                        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsReceiptNote);
                                                        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType >= 67 && bsReceiptNote.RectSourceType <= 77)
                                        {
                                            if (lstAssets.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_AssetAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstAssets, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.AssetAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Asset_AssetCard";
                                            Asset_AssetCard cust = db.Asset_AssetCard.FirstOrDefault(x => x.AssetId == CusAccs.AssetId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsReceiptNote);
                                                        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsReceiptNote);
                                                        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType >= 78 && bsReceiptNote.RectSourceType <= 88)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Proj_Projects";
                                            Proj_Projects cust = db.Proj_Projects.FirstOrDefault(x => x.ProjectId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsReceiptNote);
                                                        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsReceiptNote);
                                                        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType == 34)
                                        {
                                            //postOrder.HelpAccId = CusAccs.EmpAccountId;
                                            postOrder.AccountId = chrtAccount.AccountId;
                                            postOrder.IsHelpAcc = false;
                                            //postOrder.HelpAccType = "Hr_Employees";
                                            //MS_Vendor cust = VendorService.GetById(CusAccs.EmpId.Value);
                                            if (chrtAccount != null)
                                            {
                                                if (chrtAccount.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(chrtAccount.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsReceiptNote);
                                                        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الحساب غير مرتبط بعمله *** راجع دليل الحسابات   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "الحساب غير مرتبط بعمله *** راجع دليل الحسابات   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الحساب غير موجود   ";
                                                return false;
                                            }
                                        }
                                    }
                                    post.Add(postOrder);
                                }
                            #endregion

                            SkipCondition = false;
                            if (trDetails[0].AccountCashIsFixed == 2)
                            {
                                if (AnCode == null && trDetails[0].AnalaticalCodeMust.GetValueOrDefault(false))
                                {
                                    MessageBox = "الكود التحليلي اجبارى ";
                                    return false;
                                }
                                else if (AnCode == null)
                                {
                                    SkipCondition = true;
                                }
                            }
                            if (!SkipCondition)
                                #region Cash Account
                                // manage first Cash account in doctype
                                if (trDetails[0].AccountCashIsFixed.HasValue && !string.IsNullOrEmpty(trDetails[0].ValuAccountCash))
                                {
                                    //if (post.Count == 0)
                                    Cal_PostOrder postOrder = new Cal_PostOrder();
                                    postOrder.IsOpenningTerm = term.IsOpenningTerm;
                                    #region Cost Center
                                    if (trDetails[0].CostCenterIdCash.HasValue || trDetails[0].CostCenterCashIsFixed == 2)
                                    {
                                        Cal_CostCenters center = null;
                                        if (trDetails[0].CostCenterCashIsFixed == 1)
                                        {
                                            center = CostCentersService.GetById(trDetails[0].CostCenterIdCash.Value);
                                            postOrder.CostCenterId = trDetails[0].CostCenterIdCash;
                                            postOrder.HelpCostCenterId = null;
                                            postOrder.IsHelpCostCenter = false;
                                            postOrder.HelpCostCenterType = null;
                                        }
                                        else if (trDetails[0].CostCenterCashIsFixed == 2 && AnCode != null && AnCode.CostCenterId.GetValueOrDefault(0) != 0)
                                        {
                                            center = CostCentersService.GetById(AnCode.CostCenterId.Value);
                                            postOrder.CostCenterId = AnCode.CostCenterId;
                                            postOrder.HelpCostCenterId = null;
                                            postOrder.IsHelpCostCenter = false;
                                            postOrder.HelpCostCenterType = null;
                                        }
                                        else if (trDetails[0].CostCenterCashIsFixed == 0)
                                        {
                                            if (bsReceiptNote.RectSourceType.GetValueOrDefault(0) == 1 ||
                                 (bsReceiptNote.RectSourceType.GetValueOrDefault(0) >= 5 &&
                                 bsReceiptNote.RectSourceType.GetValueOrDefault(0) < 15))
                                            {
                                                MS_Customer cust = CustomerService.GetById(lstCusAccs[0].CustomerId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "MS_Customer";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى حساب النقدى و العميل غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار العميل أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType.GetValueOrDefault(0) == 2 ||
                                        (bsReceiptNote.RectSourceType.GetValueOrDefault(0) >= 15 &&
                                        bsReceiptNote.RectSourceType.GetValueOrDefault(0) < 25))
                                            {
                                                MS_Vendor cust = VendorService.GetById(lstVendAccs[0].VendorId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "MS_Vendor";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى حساب النقدى و المورد غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار المورد أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType == 4 || bsReceiptNote.RectSourceType == 35 ||
                                                (bsReceiptNote.RectSourceType >= 25 &&
                                       bsReceiptNote.RectSourceType < 34))
                                            {
                                                Hr_Employees cust = EmpService.GetById(lstEmpAccs[0].EmpId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId1.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId1;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId1;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Hr_Employees";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى حساب النقدى و الموظف غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار الموظف أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType == 36 || bsReceiptNote.RectSourceType == 37)
                                            {
                                                Prod_JobOrder cust = JobOrderService.GetById(lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Prod_JobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى حساب النقدى و أمر الشغل غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر الشغل أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType >= 38 && bsReceiptNote.RectSourceType <= 47)
                                            {
                                                Sr_Vehicles cust = VehiclesService.GetById(lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Sr_Vehicles";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى حساب النقدى و المركبه غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار المركبه أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType >= 48 && bsReceiptNote.RectSourceType <= 50)
                                            {
                                                Sr_VehicleJobOrder cust = db.Sr_VehicleJobOrder.FirstOrDefault(x => x.VJOrderId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Sr_VehicleJobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى حساب النقدى و أمر الشغل غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر الشغل أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType >= 51 && bsReceiptNote.RectSourceType <= 60)
                                            {
                                                Ms_LetterOfGuarantee cust = db.Ms_LetterOfGuarantee.FirstOrDefault(x => x.LetOfGrnteeId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId1.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId1;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId1;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Ms_LetterOfGuarantee";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى حساب النقدى و خطاب الضمان غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار خطاب الضمان أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType >= 61 && bsReceiptNote.RectSourceType <= 63)
                                            {
                                                Sr_JobOrder cust = db.Sr_JobOrder.FirstOrDefault(x => x.JorderId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Sr_JobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى حساب النقدى و أمر صيانة مركبه غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر صيانة مركبه أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType >= 64 && bsReceiptNote.RectSourceType <= 66)
                                            {
                                                Repair_JobOrder cust = db.Repair_JobOrder.FirstOrDefault(x => x.RepairId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Repair_JobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى حساب النقدى و أمر صيانة معدات غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر صيانة معدات أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType >= 67 && bsReceiptNote.RectSourceType <= 77)
                                            {
                                                Asset_AssetCard cust = db.Asset_AssetCard.FirstOrDefault(x => x.AssetId == lstAssets[0].AssetId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Asset_AssetCard";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى حساب النقدى و الأصل الثابت غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار الأصل الثابت أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType >= 78 && bsReceiptNote.RectSourceType <= 88)
                                            {
                                                Proj_Projects cust = db.Proj_Projects.FirstOrDefault(x => x.ProjectId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId1.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId1;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId1;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Proj_Projects";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى حساب النقدى و الأصل الثابت غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار الأصل الثابت أولا";
                                                    return false;
                                                }
                                            }
                                            //if (bsReceiptNote.RectSourceType == 34)
                                            //{
                                            //    if (chrtAccount.cos.CostCenterId1.HasValue)
                                            //        {
                                            //            center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                            //            postOrder.CostCenterId = cust.CostCenterId1;
                                            //            postOrder.HelpCostCenterId = cust.CostCenterId1;
                                            //            postOrder.IsHelpCostCenter = true;
                                            //            postOrder.HelpCostCenterType = "Hr_Employees";
                                            //        }
                                            //        else
                                            //        {
                                            //            Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب  و المورد غير مرتبط بمركز تكلفه";
                                            //            return false;
                                            //        }                                               
                                            //}
                                        }

                                        if (center != null)
                                        {
                                            if (center.CurrencyId.HasValue)
                                            {
                                                ////postOrder.CurrencyId = chrt.CurrencyId;
                                                postOrder.BalancCrencyBeforDebtCostCentr = center.BalanceDebitCurncy;
                                                postOrder.BalancLocalBeforDebCostCentr = center.BalanceDebitLocal;
                                                postOrder.BalancCrencyBeforCredCostCentr = center.BalanceCreditCurncy;
                                                postOrder.BalancLocalBeforCredCostCentr = center.BalanceCreditLocal;

                                            }
                                            else
                                            {
                                                Message = "عملة مركز التكلفه الحساب النقدى غير موجود *** كود مركز التكلفه =  " + center.CostCenterCode +
                                                    " اسم مركز التكلفه = " + center.CostCenterNameA;
                                                return false;
                                            }
                                        }

                                    }
                                    #endregion

                                    postOrder.TermId = term.TermId;
                                    postOrder.TableCode = tableNameHeader;
                                    postOrder.TableEntityId = bsReceiptNote.RectId;
                                    postOrder.IsPosted = false;
                                    postOrder.CurrencyId = bsReceiptNote.CurrencyId;
                                    if (trDetails[0].AccountIdCash.HasValue)
                                    {
                                        if (trDetails[0].AccountCashIsFixed == 1)
                                        {
                                            Cal_AccountChart chrt = Cal_AccountChart.GetById(trDetails[0].AccountIdCash.Value);
                                            if (chrt != null)
                                            {
                                                if (chrt.CurrencyId.HasValue)
                                                {
                                                    //postOrder.CurrencyId = chrt.CurrencyId;
                                                    //postOrder.BalaceCurrencyBefor = chrt.BalanceCurncy;
                                                    postOrder.BalaceCurrencyBeforDebit = chrt.BalanceDebitCurncy;
                                                    postOrder.BalaceLocalBeforDebit = chrt.BalanceDebitLocal;
                                                    postOrder.BalaceCurrencyBeforCredit = chrt.BalanceCreditCurncy;
                                                    postOrder.BalaceLocalBeforCredit = chrt.BalanceCreditLocal;
                                                    MS_Currency cur = CurrencyService.GetById(bsReceiptNote.CurrencyId.Value);
                                                    if (cur != null)
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                }
                                                else
                                                {
                                                    Message = "عملة الحساب  غير موجود *** كود الحساب =  " + chrt.AccountCode +
                                                        " اسم الحساب = " + chrt.AccountNameA;
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                Message = "الحساب  غير موجود . . .";
                                                return false;
                                            }
                                        }
                                        else if (trDetails[0].AccountCashIsFixed == 2)
                                        {
                                            if (AnCode == null || !AnCode.AccountId.HasValue)
                                            {
                                                Message = "الكود التحليلى أو الحساب المرتبط به غير صحيح . . .";
                                                return false;
                                            }
                                            Cal_AccountChart chrt = Cal_AccountChart.GetById(AnCode.AccountId.Value);
                                            if (chrt != null)
                                            {
                                                if (chrt.CurrencyId.HasValue)
                                                {
                                                    //postOrder.CurrencyId = chrt.CurrencyId;
                                                    postOrder.BalaceCurrencyBeforDebit = chrt.BalanceDebitCurncy;
                                                    postOrder.BalaceLocalBeforDebit = chrt.BalanceDebitLocal;
                                                    postOrder.BalaceCurrencyBeforCredit = chrt.BalanceCreditCurncy;
                                                    postOrder.BalaceLocalBeforCredit = chrt.BalanceCreditLocal;
                                                    MS_Currency cur = CurrencyService.GetById(bsReceiptNote.CurrencyId.Value);
                                                    if (cur != null)
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                }
                                                else
                                                {
                                                    Message = "عملة الحساب  غير موجود *** كود الحساب =  " + chrt.AccountCode +
                                                        " اسم الحساب = " + chrt.AccountNameA;
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                Message = "الحساب  غير موجود . . .";
                                                return false;
                                            }
                                        }
                                    }
                                    //else if (trDetails[0].AccCashDebitOrCredit != true && trDetails[0].AccDiscDebitOrCredit != true && trDetails[0].AccTaxDebitOrCredit!=true)
                                    //{
                                    //    Message = "الحساب  غير موجود بنوع السند  ";
                                    //    return false;
                                    //}
                                    if (trDetails[0].AccountCashIsFixed == 1)
                                    {
                                        postOrder.AccountId = trDetails[0].AccountIdCash.Value;
                                        if (trDetails[0].AccCashDebitOrCredit == true)
                                        {
                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsReceiptNote);
                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                        }
                                        else
                                        {
                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsReceiptNote);
                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                        }
                                        postOrder.HelpAccId = null;
                                        postOrder.IsHelpAcc = false;
                                        postOrder.HelpAccType = null;
                                    }
                                    else if (trDetails[0].AccountCashIsFixed == 2)
                                    {
                                        postOrder.AccountId = AnCode.AccountId.Value;
                                        if (trDetails[0].AccCashDebitOrCredit == true)
                                        {
                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsReceiptNote);
                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                        }
                                        else
                                        {
                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsReceiptNote);
                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                        }
                                        postOrder.HelpAccId = null;
                                        postOrder.IsHelpAcc = false;
                                        postOrder.HelpAccType = null;
                                    }
                                    else if (trDetails[0].AccountCashIsFixed == 0)
                                    {
                                        if (bsReceiptNote.RectSourceType.GetValueOrDefault(0) == 1 ||
                                    (bsReceiptNote.RectSourceType.GetValueOrDefault(0) >= 5 &&
                                    bsReceiptNote.RectSourceType.GetValueOrDefault(0) < 15))
                                        {
                                            if (lstCusAccs.Count == 0)
                                            {
                                                MessageBox = "العميل غير مربوط بحساب استاذ *** راجع مستند تعريف العميل   ";
                                                return false;
                                            }
                                            Cal_CustAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstCusAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف العميل *** راجع مستند تعريف العميل   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "العميل غير مربوط بحساب استاذ *** راجع مستند تعريف العميل   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.CustAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "MS_Customer";
                                            MS_Customer cust = CustomerService.GetById(CusAccs.CustomerId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AccCashDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "العميل غير مرتبط بعمله *** راجع كارت العميل   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "العميل غير مرتبط بعمله *** راجع كارت العميل   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "العميل غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType.GetValueOrDefault(0) == 2 ||
                                            (bsReceiptNote.RectSourceType.GetValueOrDefault(0) >= 15 &&
                                            bsReceiptNote.RectSourceType.GetValueOrDefault(0) < 25))
                                        {
                                            if (lstVendAccs.Count == 0)
                                            {
                                                MessageBox = "المورد غير مربوط بحساب استاذ *** راجع مستند تعريف المورد   ";
                                                return false;
                                            }
                                            Cal_VendAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstVendAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف المورد *** راجع مستند تعريف المورد   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "المورد غير مربوط بحساب استاذ *** راجع مستند تعريف المورد   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.VendAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "MS_Vendor";
                                            MS_Vendor cust = VendorService.GetById(CusAccs.VendorId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AccCashDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "المورد غير مرتبط بعمله *** راجع كارت المورد   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "المورد غير مرتبط بعمله *** راجع كارت المورد   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "المورد غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType == 4 || bsReceiptNote.RectSourceType == 35 ||
                                            (bsReceiptNote.RectSourceType >= 25 &&
                                      bsReceiptNote.RectSourceType < 34))
                                        {
                                            if (lstEmpAccs.Count == 0)
                                            {
                                                MessageBox = "الموظف غير مربوط بحساب استاذ *** راجع مستند تعريف الموظف   ";
                                                return false;
                                            }
                                            Cal_EmpAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstEmpAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الموظف *** راجع مستند تعريف الموظف   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الموظف غير مربوط بحساب استاذ *** راجع مستند تعريف الموظف   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.EmpAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Hr_Employees";
                                            Hr_Employees cust = EmpService.GetById(CusAccs.EmpId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AccCashDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الموظف غير مرتبط بعمله *** راجع كارت الموظف   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "الموظف غير مرتبط بعمله *** راجع كارت الموظف   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الموظف غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType == 36 || bsReceiptNote.RectSourceType == 37)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Prod_JobOrder";
                                            Prod_JobOrder cust = JobOrderService.GetById(CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AccCashDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AccCashDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType >= 38 && bsReceiptNote.RectSourceType <= 47)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Sr_Vehicles";
                                            Sr_Vehicles cust = VehiclesService.GetById(CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                //if (cust.CurrencyId.HasValue)
                                                //{
                                                //    MS_Currency cur = CurrencyService.GetById(tran,cust.CurrencyId.Value);
                                                //    if (cur != null)
                                                //    {
                                                //        postOrder.Rate = bsReceiptNote.Rate;
                                                //        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsReceiptNote);
                                                //        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                //    }
                                                //    else
                                                //    {
                                                //        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                //        return false;
                                                //    }
                                                //}
                                                //else
                                                //{
                                                if (LocalCurrency != null)
                                                {
                                                    postOrder.Rate = bsReceiptNote.Rate;

                                                    if (trDetails[0].AccCashDebitOrCredit == true)
                                                    {
                                                        postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsReceiptNote);
                                                        postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsReceiptNote);
                                                        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "خطأ بالعمله المحليه   ";
                                                    return false;
                                                }
                                                //}
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType >= 48 && bsReceiptNote.RectSourceType <= 50)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Sr_VehicleJobOrder";
                                            Sr_VehicleJobOrder cust = db.Sr_VehicleJobOrder.FirstOrDefault(x => x.VJOrderId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                //if (cust.CurrencyId.HasValue)
                                                //{
                                                //    MS_Currency cur = CurrencyService.GetById(tran,cust.CurrencyId.Value);
                                                //    if (cur != null)
                                                //    {
                                                //        postOrder.Rate = bsReceiptNote.Rate;
                                                //        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsReceiptNote);
                                                //        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                //    }
                                                //    else
                                                //    {
                                                //        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                //        return false;
                                                //    }
                                                //}
                                                //else
                                                //{
                                                if (LocalCurrency != null)
                                                {
                                                    postOrder.Rate = bsReceiptNote.Rate;

                                                    if (trDetails[0].AccCashDebitOrCredit == true)
                                                    {
                                                        postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsReceiptNote);
                                                        postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsReceiptNote);
                                                        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "خطأ بالعمله المحليه   ";
                                                    return false;
                                                }
                                                //}
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType >= 51 && bsReceiptNote.RectSourceType <= 60)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Ms_LetterOfGuarantee";
                                            Ms_LetterOfGuarantee cust = db.Ms_LetterOfGuarantee.FirstOrDefault(x => x.LetOfGrnteeId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AccCashDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AccCashDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType >= 61 && bsReceiptNote.RectSourceType <= 63)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Sr_JobOrder";
                                            Sr_JobOrder cust = db.Sr_JobOrder.FirstOrDefault(x => x.JorderId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AccCashDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AccCashDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType >= 64 && bsReceiptNote.RectSourceType <= 66)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Repair_JobOrder";
                                            Repair_JobOrder cust = db.Repair_JobOrder.FirstOrDefault(x => x.RepairId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AccCashDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AccCashDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType >= 67 && bsReceiptNote.RectSourceType <= 77)
                                        {
                                            if (lstAssets.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_AssetAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstAssets, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.AssetAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Asset_AssetCard";
                                            Asset_AssetCard cust = db.Asset_AssetCard.FirstOrDefault(x => x.AssetId == CusAccs.AssetId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AccCashDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AccCashDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType >= 78 && bsReceiptNote.RectSourceType <= 88)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Proj_Projects";
                                            Proj_Projects cust = db.Proj_Projects.FirstOrDefault(x => x.ProjectId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AccCashDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AccCashDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType == 34)
                                        {
                                            //postOrder.HelpAccId = CusAccs.EmpAccountId;
                                            postOrder.AccountId = chrtAccount.AccountId;
                                            postOrder.IsHelpAcc = false;
                                            //postOrder.HelpAccType = "Hr_Employees";
                                            //MS_Vendor cust = VendorService.GetById(CusAccs.EmpId.Value);
                                            if (chrtAccount != null)
                                            {
                                                if (chrtAccount.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(chrtAccount.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AccCashDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الحساب غير مرتبط بعمله *** راجع دليل الحسابات   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "الحساب غير مرتبط بعمله *** راجع دليل الحسابات   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الحساب غير موجود   ";
                                                return false;
                                            }
                                        }
                                    }
                                    post.Add(postOrder);
                                }
                            #endregion

                            //check analytical code condition
                            SkipCondition = false;
                            if (trDetails[0].AccountDiscIsFixed == 2)
                            {
                                if (AnCode == null && trDetails[0].AnalaticalCodeMust.GetValueOrDefault(false))
                                {
                                    MessageBox = "الكود التحليلي اجبارى ";
                                    return false;
                                }
                                else if (AnCode == null)
                                {
                                    SkipCondition = true;
                                }
                            }
                            if (!SkipCondition)
                                #region Disc Account
                                // manage first Discount account in doctype
                                if (trDetails[0].AccountDiscIsFixed.HasValue && !string.IsNullOrEmpty(trDetails[0].ValuAccountDisc))
                                {
                                    //if (post.Count == 0)
                                    Cal_PostOrder postOrder = new Cal_PostOrder();
                                    postOrder.IsOpenningTerm = term.IsOpenningTerm;
                                    #region Cost Center
                                    if (trDetails[0].CostCenterIdDisc.HasValue || trDetails[0].CostCenterDiscIsFixed == 2)
                                    {
                                        Cal_CostCenters center = null;
                                        if (trDetails[0].CostCenterDiscIsFixed == 1)
                                        {
                                            center = CostCentersService.GetById(trDetails[0].CostCenterIdDisc.Value);
                                            postOrder.CostCenterId = trDetails[0].CostCenterIdDisc;
                                            postOrder.HelpCostCenterId = null;
                                            postOrder.IsHelpCostCenter = false;
                                            postOrder.HelpCostCenterType = null;
                                        }
                                        else if (trDetails[0].CostCenterDiscIsFixed == 2 && AnCode != null && AnCode.CostCenterId.GetValueOrDefault(0) != 0)
                                        {
                                            center = CostCentersService.GetById(AnCode.CostCenterId.Value);
                                            postOrder.CostCenterId = AnCode.CostCenterId;
                                            postOrder.HelpCostCenterId = null;
                                            postOrder.IsHelpCostCenter = false;
                                            postOrder.HelpCostCenterType = null;
                                        }
                                        else if (trDetails[0].CostCenterDiscIsFixed == 0)
                                        {
                                            if (bsReceiptNote.RectSourceType.GetValueOrDefault(0) == 1 ||
                                  (bsReceiptNote.RectSourceType.GetValueOrDefault(0) >= 5 &&
                                  bsReceiptNote.RectSourceType.GetValueOrDefault(0) < 15))
                                            {
                                                MS_Customer cust = CustomerService.GetById(lstCusAccs[0].CustomerId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "MS_Customer";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى حساب الخصم و العميل غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار العميل أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType.GetValueOrDefault(0) == 2 ||
                                       (bsReceiptNote.RectSourceType.GetValueOrDefault(0) >= 15 &&
                                       bsReceiptNote.RectSourceType.GetValueOrDefault(0) < 25))
                                            {
                                                MS_Vendor cust = VendorService.GetById(lstVendAccs[0].VendorId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "MS_Vendor";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى حساب الخصم و المورد غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار المورد أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType == 4 || bsReceiptNote.RectSourceType == 35 ||
                                                (bsReceiptNote.RectSourceType >= 25 &&
                               bsReceiptNote.RectSourceType < 34))
                                            {
                                                Hr_Employees cust = EmpService.GetById(lstEmpAccs[0].EmpId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId1.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId1;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId1;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Hr_Employees";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى حساب الخصم و الموظف غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار الموظف أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType == 36 || bsReceiptNote.RectSourceType == 37)
                                            {
                                                Prod_JobOrder cust = JobOrderService.GetById(lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Prod_JobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى حساب الخصم و أمر الشغل غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر الشغل أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType >= 38 && bsReceiptNote.RectSourceType <= 47)
                                            {
                                                Sr_Vehicles cust = VehiclesService.GetById(lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Sr_Vehicles";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى حساب الخصم و المركبه غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار المركبه أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType >= 48 && bsReceiptNote.RectSourceType <= 50)
                                            {
                                                Sr_VehicleJobOrder cust = db.Sr_VehicleJobOrder.FirstOrDefault(x => x.VJOrderId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Sr_VehicleJobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى حساب الخصم و أمر الشغل غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر الشغل أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType >= 51 && bsReceiptNote.RectSourceType <= 60)
                                            {
                                                Ms_LetterOfGuarantee cust = db.Ms_LetterOfGuarantee.FirstOrDefault(x => x.LetOfGrnteeId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId1.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId1;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId1;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Ms_LetterOfGuarantee";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى حساب الخصم و خطاب الضمان غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار خطاب الضمان أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType >= 61 && bsReceiptNote.RectSourceType <= 63)
                                            {
                                                Sr_JobOrder cust = db.Sr_JobOrder.FirstOrDefault(x => x.JorderId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Sr_JobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى حساب الخصم و أمر صيانة مركبه غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر صيانة مركبه أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType >= 64 && bsReceiptNote.RectSourceType <= 66)
                                            {
                                                Repair_JobOrder cust = db.Repair_JobOrder.FirstOrDefault(x => x.RepairId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Repair_JobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى حساب الخصم و أمر صيانة معدات غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر صيانة معدات أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType >= 67 && bsReceiptNote.RectSourceType <= 77)
                                            {
                                                Asset_AssetCard cust = db.Asset_AssetCard.FirstOrDefault(x => x.AssetId == lstAssets[0].AssetId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Asset_AssetCard";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى حساب الخصم و الأصل الثابت غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار الأصل الثابت أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType >= 78 && bsReceiptNote.RectSourceType <= 88)
                                            {
                                                Proj_Projects cust = db.Proj_Projects.FirstOrDefault(x => x.ProjectId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId1.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId1;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId1;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Proj_Projects";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى حساب الخصم و الأصل الثابت غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار الأصل الثابت أولا";
                                                    return false;
                                                }
                                            }
                                            //if (bsReceiptNote.RectSourceType == 34)
                                            //{
                                            //    if (chrtAccount.cos.CostCenterId1.HasValue)
                                            //        {
                                            //            center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                            //            postOrder.CostCenterId = cust.CostCenterId1;
                                            //            postOrder.HelpCostCenterId = cust.CostCenterId1;
                                            //            postOrder.IsHelpCostCenter = true;
                                            //            postOrder.HelpCostCenterType = "Hr_Employees";
                                            //        }
                                            //        else
                                            //        {
                                            //            Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب  و المورد غير مرتبط بمركز تكلفه";
                                            //            return false;
                                            //        }                                               
                                            //}
                                        }

                                        if (center != null)
                                        {
                                            if (center.CurrencyId.HasValue)
                                            {
                                                ////postOrder.CurrencyId = chrt.CurrencyId;
                                                postOrder.BalancCrencyBeforDebtCostCentr = center.BalanceDebitCurncy;
                                                postOrder.BalancLocalBeforDebCostCentr = center.BalanceDebitLocal;
                                                postOrder.BalancCrencyBeforCredCostCentr = center.BalanceCreditCurncy;
                                                postOrder.BalancLocalBeforCredCostCentr = center.BalanceCreditLocal;

                                            }
                                            else
                                            {
                                                Message = "عملة مركز التكلفه الحساب الخصم غير موجود *** كود مركز التكلفه =  " + center.CostCenterCode +
                                                    " اسم مركز التكلفه = " + center.CostCenterNameA;
                                                return false;
                                            }
                                        }

                                    }
                                    #endregion
                                    postOrder.TermId = term.TermId;
                                    postOrder.TableCode = tableNameHeader;
                                    postOrder.TableEntityId = bsReceiptNote.RectId;
                                    postOrder.IsPosted = false;
                                    postOrder.CurrencyId = bsReceiptNote.CurrencyId;
                                    if (trDetails[0].AccountIdDisc.HasValue)
                                    {
                                        if (trDetails[0].AccountDiscIsFixed == 1)
                                        {
                                            Cal_AccountChart chrt = Cal_AccountChart.GetById(trDetails[0].AccountIdDisc.Value);
                                            if (chrt != null)
                                            {
                                                if (chrt.CurrencyId.HasValue)
                                                {
                                                    //postOrder.CurrencyId = chrt.CurrencyId;
                                                    //postOrder.BalaceCurrencyBefor = chrt.BalanceCurncy;
                                                    postOrder.BalaceCurrencyBeforDebit = chrt.BalanceDebitCurncy;
                                                    postOrder.BalaceLocalBeforDebit = chrt.BalanceDebitLocal;
                                                    postOrder.BalaceCurrencyBeforCredit = chrt.BalanceCreditCurncy;
                                                    postOrder.BalaceLocalBeforCredit = chrt.BalanceCreditLocal;
                                                    MS_Currency cur = CurrencyService.GetById(bsReceiptNote.CurrencyId.Value);
                                                    if (cur != null)
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                }
                                                else
                                                {
                                                    Message = "عملة الحساب  غير موجود *** كود الحساب =  " + chrt.AccountCode +
                                                        " اسم الحساب = " + chrt.AccountNameA;
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                Message = "الحساب  غير موجود . . .";
                                                return false;
                                            }
                                        }
                                        else if (trDetails[0].AccountDiscIsFixed == 2)
                                        {
                                            if (AnCode == null || !AnCode.AccountId.HasValue)
                                            {
                                                Message = "الكود التحليلى أو الحساب المرتبط به غير صحيح . . .";
                                                return false;
                                            }
                                            Cal_AccountChart chrt = Cal_AccountChart.GetById(AnCode.AccountId.Value);
                                            if (chrt != null)
                                            {
                                                if (chrt.CurrencyId.HasValue)
                                                {
                                                    //postOrder.CurrencyId = chrt.CurrencyId;
                                                    postOrder.BalaceCurrencyBeforDebit = chrt.BalanceDebitCurncy;
                                                    postOrder.BalaceLocalBeforDebit = chrt.BalanceDebitLocal;
                                                    postOrder.BalaceCurrencyBeforCredit = chrt.BalanceCreditCurncy;
                                                    postOrder.BalaceLocalBeforCredit = chrt.BalanceCreditLocal;
                                                    MS_Currency cur = CurrencyService.GetById(bsReceiptNote.CurrencyId.Value);
                                                    if (cur != null)
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                }
                                                else
                                                {
                                                    Message = "عملة الحساب  غير موجود *** كود الحساب =  " + chrt.AccountCode +
                                                        " اسم الحساب = " + chrt.AccountNameA;
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                Message = "الحساب  غير موجود . . .";
                                                return false;
                                            }
                                        }
                                    }
                                    //else if (trDetails[0].AccCashDebitOrCredit != true && trDetails[0].AccDiscDebitOrCredit != true && trDetails[0].AccTaxDebitOrCredit!=true)
                                    //{
                                    //    Message = "الحساب  غير موجود بنوع السند  ";
                                    //    return false;
                                    //}
                                    if (trDetails[0].AccountDiscIsFixed == 1)
                                    {
                                        postOrder.AccountId = trDetails[0].AccountIdDisc.Value;

                                        if (trDetails[0].AccDiscDebitOrCredit == true)
                                        {
                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsReceiptNote);
                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                        }
                                        else
                                        {
                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsReceiptNote);
                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                        }
                                        postOrder.HelpAccId = null;
                                        postOrder.IsHelpAcc = false;
                                        postOrder.HelpAccType = null;
                                    }
                                    else if (trDetails[0].AccountDiscIsFixed == 2)
                                    {
                                        postOrder.AccountId = AnCode.AccountId.Value;
                                        if (trDetails[0].AccDiscDebitOrCredit == true)
                                        {
                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsReceiptNote);
                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                        }
                                        else
                                        {
                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsReceiptNote);
                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                        }
                                        postOrder.HelpAccId = null;
                                        postOrder.IsHelpAcc = false;
                                        postOrder.HelpAccType = null;
                                    }
                                    else if (trDetails[0].AccountDiscIsFixed == 0)
                                    {
                                        if (bsReceiptNote.RectSourceType.GetValueOrDefault(0) == 1 ||
                                     (bsReceiptNote.RectSourceType.GetValueOrDefault(0) >= 5 &&
                                     bsReceiptNote.RectSourceType.GetValueOrDefault(0) < 15))
                                        {
                                            if (lstCusAccs.Count == 0)
                                            {
                                                MessageBox = "العميل غير مربوط بحساب استاذ *** راجع مستند تعريف العميل   ";
                                                return false;
                                            }
                                            Cal_CustAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstCusAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف العميل *** راجع مستند تعريف العميل   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "العميل غير مربوط بحساب استاذ *** راجع مستند تعريف العميل   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.CustAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "MS_Customer";
                                            MS_Customer cust = CustomerService.GetById(CusAccs.CustomerId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                        if (trDetails[0].AccDiscDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "العميل غير مرتبط بعمله *** راجع كارت العميل   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "العميل غير مرتبط بعمله *** راجع كارت العميل   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "العميل غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType.GetValueOrDefault(0) == 2 ||
                                            (bsReceiptNote.RectSourceType.GetValueOrDefault(0) >= 15 &&
                                            bsReceiptNote.RectSourceType.GetValueOrDefault(0) < 25))
                                        {
                                            if (lstVendAccs.Count == 0)
                                            {
                                                MessageBox = "المورد غير مربوط بحساب استاذ *** راجع مستند تعريف المورد   ";
                                                return false;
                                            }
                                            Cal_VendAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstVendAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف المورد *** راجع مستند تعريف المورد   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "المورد غير مربوط بحساب استاذ *** راجع مستند تعريف المورد   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.VendAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "MS_Vendor";
                                            MS_Vendor cust = VendorService.GetById(CusAccs.VendorId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                        if (trDetails[0].AccDiscDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "المورد غير مرتبط بعمله *** راجع كارت المورد   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "المورد غير مرتبط بعمله *** راجع كارت المورد   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "المورد غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType == 4 || bsReceiptNote.RectSourceType == 35 ||
                                            (bsReceiptNote.RectSourceType >= 25 && bsReceiptNote.RectSourceType < 34))
                                        {
                                            if (lstEmpAccs.Count == 0)
                                            {
                                                MessageBox = "الموظف غير مربوط بحساب استاذ *** راجع مستند تعريف الموظف   ";
                                                return false;
                                            }
                                            Cal_EmpAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstEmpAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الموظف *** راجع مستند تعريف الموظف   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الموظف غير مربوط بحساب استاذ *** راجع مستند تعريف الموظف   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.EmpAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Hr_Employees";
                                            Hr_Employees cust = EmpService.GetById(CusAccs.EmpId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                        if (trDetails[0].AccDiscDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الموظف غير مرتبط بعمله *** راجع كارت الموظف   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "الموظف غير مرتبط بعمله *** راجع كارت الموظف   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الموظف غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType == 36 || bsReceiptNote.RectSourceType == 37)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Prod_JobOrder";
                                            Prod_JobOrder cust = JobOrderService.GetById(CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AccDiscDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AccDiscDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType >= 38 && bsReceiptNote.RectSourceType <= 47)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Sr_Vehicles";
                                            Sr_Vehicles cust = VehiclesService.GetById(CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                //if (cust.CurrencyId.HasValue)
                                                //{
                                                //    MS_Currency cur = CurrencyService.GetById(tran,cust.CurrencyId.Value);
                                                //    if (cur != null)
                                                //    {
                                                //        postOrder.Rate = bsReceiptNote.Rate;
                                                //        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsReceiptNote);
                                                //        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                //    }
                                                //    else
                                                //    {
                                                //        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                //        return false;
                                                //    }
                                                //}
                                                //else
                                                //{
                                                if (LocalCurrency != null)
                                                {
                                                    postOrder.Rate = bsReceiptNote.Rate;

                                                    if (trDetails[0].AccDiscDebitOrCredit == true)
                                                    {
                                                        postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsReceiptNote);
                                                        postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsReceiptNote);
                                                        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "خطأ بالعمله المحليه   ";
                                                    return false;
                                                }
                                                //}
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType >= 48 && bsReceiptNote.RectSourceType <= 50)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Sr_VehicleJobOrder";
                                            Sr_VehicleJobOrder cust = db.Sr_VehicleJobOrder.FirstOrDefault(x => x.VJOrderId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                //if (cust.CurrencyId.HasValue)
                                                //{
                                                //    MS_Currency cur = CurrencyService.GetById(tran,cust.CurrencyId.Value);
                                                //    if (cur != null)
                                                //    {
                                                //        postOrder.Rate = bsReceiptNote.Rate;
                                                //        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsReceiptNote);
                                                //        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                //    }
                                                //    else
                                                //    {
                                                //        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                //        return false;
                                                //    }
                                                //}
                                                //else
                                                //{
                                                if (LocalCurrency != null)
                                                {
                                                    postOrder.Rate = bsReceiptNote.Rate;

                                                    if (trDetails[0].AccDiscDebitOrCredit == true)
                                                    {
                                                        postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsReceiptNote);
                                                        postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsReceiptNote);
                                                        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "خطأ بالعمله المحليه   ";
                                                    return false;
                                                }
                                                //}
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType >= 51 && bsReceiptNote.RectSourceType <= 60)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Ms_LetterOfGuarantee";
                                            Ms_LetterOfGuarantee cust = db.Ms_LetterOfGuarantee.FirstOrDefault(x => x.LetOfGrnteeId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AccDiscDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AccDiscDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType >= 61 && bsReceiptNote.RectSourceType <= 63)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Sr_JobOrder";
                                            Sr_JobOrder cust = db.Sr_JobOrder.FirstOrDefault(x => x.JorderId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AccDiscDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AccDiscDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType >= 64 && bsReceiptNote.RectSourceType <= 66)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Repair_JobOrder";
                                            Repair_JobOrder cust = db.Repair_JobOrder.FirstOrDefault(x => x.RepairId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AccDiscDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AccDiscDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType >= 67 && bsReceiptNote.RectSourceType <= 77)
                                        {
                                            if (lstAssets.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_AssetAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstAssets, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.AssetAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Asset_AssetCard";
                                            Asset_AssetCard cust = db.Asset_AssetCard.FirstOrDefault(x => x.AssetId == CusAccs.AssetId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AccDiscDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AccDiscDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType >= 78 && bsReceiptNote.RectSourceType <= 88)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Proj_Projects";
                                            Proj_Projects cust = db.Proj_Projects.FirstOrDefault(x => x.ProjectId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AccDiscDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AccDiscDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType == 34)
                                        {
                                            //postOrder.HelpAccId = CusAccs.EmpAccountId;
                                            postOrder.AccountId = chrtAccount.AccountId;
                                            postOrder.IsHelpAcc = false;
                                            //postOrder.HelpAccType = "Hr_Employees";
                                            //MS_Vendor cust = VendorService.GetById(CusAccs.EmpId.Value);
                                            if (chrtAccount != null)
                                            {
                                                if (chrtAccount.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(chrtAccount.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                        if (trDetails[0].AccDiscDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الحساب غير مرتبط بعمله *** راجع دليل الحسابات   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "الحساب غير مرتبط بعمله *** راجع دليل الحسابات   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الحساب غير موجود   ";
                                                return false;
                                            }
                                        }
                                    }
                                    post.Add(postOrder);
                                }
                            #endregion

                            SkipCondition = false;
                            if (trDetails[0].AccountTaxIsFixed == 2)
                            {
                                if (AnCode == null && trDetails[0].AnalaticalCodeMust.GetValueOrDefault(false))
                                {
                                    MessageBox = "الكود التحليلي اجبارى ";
                                    return false;
                                }
                                else if (AnCode == null)
                                {
                                    SkipCondition = true;
                                }
                            }
                            if (!SkipCondition)
                                #region Tax Account
                                // manage Tax account in doctype
                                if (trDetails[0].AccountTaxIsFixed.HasValue && !string.IsNullOrEmpty(trDetails[0].ValuAccountTax))
                                {
                                    //if (post.Count == 0)
                                    Cal_PostOrder postOrder = new Cal_PostOrder();
                                    postOrder.IsOpenningTerm = term.IsOpenningTerm;
                                    #region Cost Center
                                    if (trDetails[0].CostCenterIdTax.HasValue || trDetails[0].CostCenterTaxIsFixed == 2)
                                    {
                                        Cal_CostCenters center = null;
                                        if (trDetails[0].CostCenterTaxIsFixed == 1)
                                        {
                                            center = CostCentersService.GetById(trDetails[0].CostCenterIdTax.Value);
                                            postOrder.CostCenterId = trDetails[0].CostCenterIdTax;
                                            postOrder.HelpCostCenterId = null;
                                            postOrder.IsHelpCostCenter = false;
                                            postOrder.HelpCostCenterType = null;
                                        }
                                        else if (trDetails[0].CostCenterTaxIsFixed == 2 && AnCode != null && AnCode.CostCenterId.GetValueOrDefault(0) != 0)
                                        {
                                            center = CostCentersService.GetById(AnCode.CostCenterId.Value);
                                            postOrder.CostCenterId = AnCode.CostCenterId;
                                            postOrder.HelpCostCenterId = null;
                                            postOrder.IsHelpCostCenter = false;
                                            postOrder.HelpCostCenterType = null;
                                        }
                                        else if (trDetails[0].CostCenterTaxIsFixed == 0)
                                        {
                                            if (bsReceiptNote.RectSourceType.GetValueOrDefault(0) == 1 ||
                                (bsReceiptNote.RectSourceType.GetValueOrDefault(0) >= 5 &&
                                bsReceiptNote.RectSourceType.GetValueOrDefault(0) < 15))
                                            {
                                                MS_Customer cust = CustomerService.GetById(lstCusAccs[0].CustomerId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "MS_Customer";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى حساب الضرائب و العميل غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار العميل أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType.GetValueOrDefault(0) == 2 ||
                                        (bsReceiptNote.RectSourceType.GetValueOrDefault(0) >= 15 &&
                                        bsReceiptNote.RectSourceType.GetValueOrDefault(0) < 25))
                                            {
                                                MS_Vendor cust = VendorService.GetById(lstVendAccs[0].VendorId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "MS_Vendor";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى حساب الضرائب و المورد غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار المورد أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType == 4 || bsReceiptNote.RectSourceType == 35 ||
                                                (bsReceiptNote.RectSourceType >= 25 &&
                                                bsReceiptNote.RectSourceType < 34))
                                            {
                                                Hr_Employees cust = EmpService.GetById(lstEmpAccs[0].EmpId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId1.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId1;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId1;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Hr_Employees";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب  و الموظف غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار الموظف أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType == 36 || bsReceiptNote.RectSourceType == 37)
                                            {
                                                Prod_JobOrder cust = JobOrderService.GetById(lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Prod_JobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى حساب الضرائب و أمر الشغل غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر الشغل أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType >= 38 && bsReceiptNote.RectSourceType <= 47)
                                            {
                                                Sr_Vehicles cust = VehiclesService.GetById(lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Sr_Vehicles";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى حساب الضرائب و المركبه غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار المركبه أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType >= 48 && bsReceiptNote.RectSourceType <= 50)
                                            {
                                                Sr_VehicleJobOrder cust = db.Sr_VehicleJobOrder.FirstOrDefault(x => x.VJOrderId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Sr_VehicleJobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى حساب الضرائب و أمر الشغل غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر الشغل أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType >= 51 && bsReceiptNote.RectSourceType <= 60)
                                            {
                                                Ms_LetterOfGuarantee cust = db.Ms_LetterOfGuarantee.FirstOrDefault(x => x.LetOfGrnteeId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId1.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId1;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId1;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Ms_LetterOfGuarantee";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى حساب الضرائب و خطاب الضمان غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار خطاب الضمان أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType >= 61 && bsReceiptNote.RectSourceType <= 63)
                                            {
                                                Sr_JobOrder cust = db.Sr_JobOrder.FirstOrDefault(x => x.JorderId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Sr_JobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى حساب الضرائب و أمر صيانة مركبه غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر صيانة مركبه أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType >= 64 && bsReceiptNote.RectSourceType <= 66)
                                            {
                                                Repair_JobOrder cust = db.Repair_JobOrder.FirstOrDefault(x => x.RepairId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Repair_JobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى حساب الضرائب و أمر صيانة معدات غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر صيانة معدات أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType >= 67 && bsReceiptNote.RectSourceType <= 77)
                                            {
                                                Asset_AssetCard cust = db.Asset_AssetCard.FirstOrDefault(x => x.AssetId == lstAssets[0].AssetId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Asset_AssetCard";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى حساب الضرائب و الأصل الثابت غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار الأصل الثابت أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType >= 78 && bsReceiptNote.RectSourceType <= 88)
                                            {
                                                Proj_Projects cust = db.Proj_Projects.FirstOrDefault(x => x.ProjectId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId1.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId1;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId1;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Proj_Projects";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى حساب الضرائب و الأصل الثابت غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار الأصل الثابت أولا";
                                                    return false;
                                                }
                                            }
                                            //if (bsReceiptNote.RectSourceType == 34)
                                            //{
                                            //    if (chrtAccount.cos.CostCenterId1.HasValue)
                                            //        {
                                            //            center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                            //            postOrder.CostCenterId = cust.CostCenterId1;
                                            //            postOrder.HelpCostCenterId = cust.CostCenterId1;
                                            //            postOrder.IsHelpCostCenter = true;
                                            //            postOrder.HelpCostCenterType = "Hr_Employees";
                                            //        }
                                            //        else
                                            //        {
                                            //            Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب  و المورد غير مرتبط بمركز تكلفه";
                                            //            return false;
                                            //        }                                               
                                            //}
                                        }

                                        if (center != null)
                                        {
                                            if (center.CurrencyId.HasValue)
                                            {
                                                ////postOrder.CurrencyId = chrt.CurrencyId;
                                                postOrder.BalancCrencyBeforDebtCostCentr = center.BalanceDebitCurncy;
                                                postOrder.BalancLocalBeforDebCostCentr = center.BalanceDebitLocal;
                                                postOrder.BalancCrencyBeforCredCostCentr = center.BalanceCreditCurncy;
                                                postOrder.BalancLocalBeforCredCostCentr = center.BalanceCreditLocal;

                                            }
                                            else
                                            {
                                                Message = "عملة مركز التكلفه الحساب الضرائب غير موجود *** كود مركز التكلفه =  " + center.CostCenterCode +
                                                    " اسم مركز التكلفه = " + center.CostCenterNameA;
                                                return false;
                                            }
                                        }

                                    }
                                    #endregion

                                    postOrder.TermId = term.TermId;
                                    postOrder.TableCode = tableNameHeader;
                                    postOrder.TableEntityId = bsReceiptNote.RectId;
                                    postOrder.IsPosted = false;
                                    postOrder.CurrencyId = bsReceiptNote.CurrencyId;
                                    if (trDetails[0].AccountIdTax.HasValue)
                                    {
                                        if (trDetails[0].AccountTaxIsFixed == 1)
                                        {
                                            Cal_AccountChart chrt = Cal_AccountChart.GetById(trDetails[0].AccountIdTax.Value);
                                            if (chrt != null)
                                            {
                                                if (chrt.CurrencyId.HasValue)
                                                {
                                                    //postOrder.CurrencyId = chrt.CurrencyId;
                                                    //postOrder.BalaceCurrencyBefor = chrt.BalanceCurncy;
                                                    postOrder.BalaceCurrencyBeforDebit = chrt.BalanceDebitCurncy;
                                                    postOrder.BalaceLocalBeforDebit = chrt.BalanceDebitLocal;
                                                    postOrder.BalaceCurrencyBeforCredit = chrt.BalanceCreditCurncy;
                                                    postOrder.BalaceLocalBeforCredit = chrt.BalanceCreditLocal;
                                                    MS_Currency cur = CurrencyService.GetById(bsReceiptNote.CurrencyId.Value);
                                                    if (cur != null)
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                }
                                                else
                                                {
                                                    Message = "عملة الحساب  غير موجود *** كود الحساب =  " + chrt.AccountCode +
                                                        " اسم الحساب = " + chrt.AccountNameA;
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                Message = "الحساب  غير موجود . . .";
                                                return false;
                                            }
                                        }
                                        else if (trDetails[0].AccountTaxIsFixed == 2)
                                        {
                                            if (AnCode == null || !AnCode.AccountId.HasValue)
                                            {
                                                Message = "الكود التحليلى أو الحساب المرتبط به غير صحيح . . .";
                                                return false;
                                            }
                                            Cal_AccountChart chrt = Cal_AccountChart.GetById(AnCode.AccountId.Value);
                                            if (chrt != null)
                                            {
                                                if (chrt.CurrencyId.HasValue)
                                                {
                                                    //postOrder.CurrencyId = chrt.CurrencyId;
                                                    postOrder.BalaceCurrencyBeforDebit = chrt.BalanceDebitCurncy;
                                                    postOrder.BalaceLocalBeforDebit = chrt.BalanceDebitLocal;
                                                    postOrder.BalaceCurrencyBeforCredit = chrt.BalanceCreditCurncy;
                                                    postOrder.BalaceLocalBeforCredit = chrt.BalanceCreditLocal;
                                                    MS_Currency cur = CurrencyService.GetById(bsReceiptNote.CurrencyId.Value);
                                                    if (cur != null)
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                }
                                                else
                                                {
                                                    Message = "عملة الحساب  غير موجود *** كود الحساب =  " + chrt.AccountCode +
                                                        " اسم الحساب = " + chrt.AccountNameA;
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                Message = "الحساب  غير موجود . . .";
                                                return false;
                                            }
                                        }
                                    }
                                    //else if (trDetails[0].AccCashDebitOrCredit != true && trDetails[0].AccDiscDebitOrCredit != true && trDetails[0].AccTaxDebitOrCredit!=true)
                                    //{
                                    //    Message = "الحساب  غير موجود بنوع السند  ";
                                    //    return false;
                                    //}
                                    if (trDetails[0].AccountTaxIsFixed == 1)
                                    {
                                        postOrder.AccountId = trDetails[0].AccountIdTax.Value;
                                        if (trDetails[0].AccTaxDebitOrCredit == true)
                                        {
                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsReceiptNote);
                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                        }
                                        else
                                        {
                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsReceiptNote);
                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                        }
                                        postOrder.HelpAccId = null;
                                        postOrder.IsHelpAcc = false;
                                        postOrder.HelpAccType = null;
                                    }
                                    else if (trDetails[0].AccountTaxIsFixed == 2)
                                    {
                                        postOrder.AccountId = AnCode.AccountId.Value;
                                        if (trDetails[0].AccTaxDebitOrCredit == true)
                                        {
                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsReceiptNote);
                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                        }
                                        else
                                        {
                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsReceiptNote);
                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                        }
                                        postOrder.HelpAccId = null;
                                        postOrder.IsHelpAcc = false;
                                        postOrder.HelpAccType = null;
                                    }
                                    else if (trDetails[0].AccountTaxIsFixed == 0)
                                    {
                                        if (bsReceiptNote.RectSourceType.GetValueOrDefault(0) == 1 ||
                                     (bsReceiptNote.RectSourceType.GetValueOrDefault(0) >= 5 &&
                                     bsReceiptNote.RectSourceType.GetValueOrDefault(0) < 15))
                                        {
                                            if (lstCusAccs.Count == 0)
                                            {
                                                MessageBox = "العميل غير مربوط بحساب استاذ *** راجع مستند تعريف العميل   ";
                                                return false;
                                            }
                                            Cal_CustAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstCusAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف العميل *** راجع مستند تعريف العميل   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "العميل غير مربوط بحساب استاذ *** راجع مستند تعريف العميل   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.CustAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "MS_Customer";
                                            MS_Customer cust = CustomerService.GetById(CusAccs.CustomerId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                        if (trDetails[0].AccTaxDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "العميل غير مرتبط بعمله *** راجع كارت العميل   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "العميل غير مرتبط بعمله *** راجع كارت العميل   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "العميل غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType.GetValueOrDefault(0) == 2 ||
                                            (bsReceiptNote.RectSourceType.GetValueOrDefault(0) >= 15 &&
                                            bsReceiptNote.RectSourceType.GetValueOrDefault(0) < 25))
                                        {
                                            if (lstVendAccs.Count == 0)
                                            {
                                                MessageBox = "المورد غير مربوط بحساب استاذ *** راجع مستند تعريف المورد   ";
                                                return false;
                                            }
                                            Cal_VendAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstVendAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف المورد *** راجع مستند تعريف المورد   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "المورد غير مربوط بحساب استاذ *** راجع مستند تعريف المورد   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.VendAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "MS_Vendor";
                                            MS_Vendor cust = VendorService.GetById(CusAccs.VendorId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                        if (trDetails[0].AccTaxDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "المورد غير مرتبط بعمله *** راجع كارت المورد   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "المورد غير مرتبط بعمله *** راجع كارت المورد   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "المورد غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType == 4 || bsReceiptNote.RectSourceType == 35 ||
                                  (bsReceiptNote.RectSourceType >= 25 && bsReceiptNote.RectSourceType < 34))
                                        {
                                            if (lstEmpAccs.Count == 0)
                                            {
                                                MessageBox = "الموظف غير مربوط بحساب استاذ *** راجع مستند تعريف الموظف   ";
                                                return false;
                                            }
                                            Cal_EmpAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstEmpAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الموظف *** راجع مستند تعريف الموظف   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الموظف غير مربوط بحساب استاذ *** راجع مستند تعريف الموظف   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.EmpAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Hr_Employees";
                                            Hr_Employees cust = EmpService.GetById(CusAccs.EmpId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                        if (trDetails[0].AccTaxDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الموظف غير مرتبط بعمله *** راجع كارت الموظف   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "الموظف غير مرتبط بعمله *** راجع كارت الموظف   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الموظف غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType == 36 || bsReceiptNote.RectSourceType == 37)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Prod_JobOrder";
                                            Prod_JobOrder cust = JobOrderService.GetById(CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AccTaxDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AccTaxDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType >= 38 && bsReceiptNote.RectSourceType <= 47)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Sr_Vehicles";
                                            Sr_Vehicles cust = VehiclesService.GetById(CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                //if (cust.CurrencyId.HasValue)
                                                //{
                                                //    MS_Currency cur = CurrencyService.GetById(tran,cust.CurrencyId.Value);
                                                //    if (cur != null)
                                                //    {
                                                //        postOrder.Rate = bsReceiptNote.Rate;
                                                //        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsReceiptNote);
                                                //        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                //    }
                                                //    else
                                                //    {
                                                //        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                //        return false;
                                                //    }
                                                //}
                                                //else
                                                //{
                                                if (LocalCurrency != null)
                                                {
                                                    postOrder.Rate = bsReceiptNote.Rate;

                                                    if (trDetails[0].AccTaxDebitOrCredit == true)
                                                    {
                                                        postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsReceiptNote);
                                                        postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsReceiptNote);
                                                        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "خطأ بالعمله المحليه   ";
                                                    return false;
                                                }
                                                //}
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType >= 48 && bsReceiptNote.RectSourceType <= 50)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Sr_VehicleJobOrder";
                                            Sr_VehicleJobOrder cust = db.Sr_VehicleJobOrder.FirstOrDefault(x => x.VJOrderId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                //if (cust.CurrencyId.HasValue)
                                                //{
                                                //    MS_Currency cur = CurrencyService.GetById(tran,cust.CurrencyId.Value);
                                                //    if (cur != null)
                                                //    {
                                                //        postOrder.Rate = bsReceiptNote.Rate;
                                                //        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsReceiptNote);
                                                //        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                //    }
                                                //    else
                                                //    {
                                                //        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                //        return false;
                                                //    }
                                                //}
                                                //else
                                                //{
                                                if (LocalCurrency != null)
                                                {
                                                    postOrder.Rate = bsReceiptNote.Rate;

                                                    if (trDetails[0].AccTaxDebitOrCredit == true)
                                                    {
                                                        postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsReceiptNote);
                                                        postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsReceiptNote);
                                                        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "خطأ بالعمله المحليه   ";
                                                    return false;
                                                }
                                                //}
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType >= 51 && bsReceiptNote.RectSourceType <= 60)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Ms_LetterOfGuarantee";
                                            Ms_LetterOfGuarantee cust = db.Ms_LetterOfGuarantee.FirstOrDefault(x => x.LetOfGrnteeId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AccTaxDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AccTaxDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType >= 61 && bsReceiptNote.RectSourceType <= 63)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Sr_JobOrder";
                                            Sr_JobOrder cust = db.Sr_JobOrder.FirstOrDefault(x => x.JorderId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AccTaxDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AccTaxDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType >= 64 && bsReceiptNote.RectSourceType <= 66)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Repair_JobOrder";
                                            Repair_JobOrder cust = db.Repair_JobOrder.FirstOrDefault(x => x.RepairId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AccTaxDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AccTaxDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType >= 67 && bsReceiptNote.RectSourceType <= 77)
                                        {
                                            if (lstAssets.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_AssetAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstAssets, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.AssetAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Asset_AssetCard";
                                            Asset_AssetCard cust = db.Asset_AssetCard.FirstOrDefault(x => x.AssetId == CusAccs.AssetId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AccTaxDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AccTaxDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType >= 78 && bsReceiptNote.RectSourceType <= 88)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Proj_Projects";
                                            Proj_Projects cust = db.Proj_Projects.FirstOrDefault(x => x.ProjectId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AccTaxDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AccTaxDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType == 34)
                                        {
                                            //postOrder.HelpAccId = CusAccs.EmpAccountId;
                                            postOrder.AccountId = chrtAccount.AccountId;
                                            postOrder.IsHelpAcc = false;
                                            //postOrder.HelpAccType = "Hr_Employees";
                                            //MS_Vendor cust = VendorService.GetById(CusAccs.EmpId.Value);
                                            if (chrtAccount != null)
                                            {
                                                if (chrtAccount.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(chrtAccount.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                        if (trDetails[0].AccTaxDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الحساب غير مرتبط بعمله *** راجع دليل الحسابات   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "الحساب غير مرتبط بعمله *** راجع دليل الحسابات   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الحساب غير موجود   ";
                                                return false;
                                            }
                                        }
                                    }
                                    post.Add(postOrder);
                                }
                            #endregion

                            SkipCondition = false;
                            if (trDetails[0].AddAccount1IsFixed == 2)
                            {
                                if (AnCode == null && trDetails[0].AnalaticalCodeMust.GetValueOrDefault(false))
                                {
                                    MessageBox = "الكود التحليلي اجبارى ";
                                    return false;
                                }
                                else if (AnCode == null)
                                {
                                    SkipCondition = true;
                                }
                            }
                            if (!SkipCondition)
                                #region AddAccount1 Account
                                // manage Tax account in doctype
                                if (trDetails[0].AddAccount1IsFixed.HasValue && !string.IsNullOrEmpty(trDetails[0].ValuAddAccount1))
                                {
                                    //if (post.Count == 0)
                                    Cal_PostOrder postOrder = new Cal_PostOrder(); postOrder.IsOpenningTerm = term.IsOpenningTerm;
                                    #region Cost Center
                                    if (trDetails[0].AddCostCenterId1.HasValue || trDetails[0].AddCostCenter1IsFixed == 2)
                                    {
                                        Cal_CostCenters center = null;
                                        if (trDetails[0].AddCostCenter1IsFixed == 1)
                                        {
                                            center = CostCentersService.GetById(trDetails[0].AddCostCenterId1.Value);
                                            postOrder.CostCenterId = trDetails[0].AddCostCenterId1;
                                            postOrder.HelpCostCenterId = null;
                                            postOrder.IsHelpCostCenter = false;
                                            postOrder.HelpCostCenterType = null;
                                        }
                                        else if (trDetails[0].AddCostCenter1IsFixed == 2 && AnCode != null && AnCode.CostCenterId.GetValueOrDefault(0) != 0)
                                        {
                                            center = CostCentersService.GetById(AnCode.CostCenterId.Value);
                                            postOrder.CostCenterId = AnCode.CostCenterId;
                                            postOrder.HelpCostCenterId = null;
                                            postOrder.IsHelpCostCenter = false;
                                            postOrder.HelpCostCenterType = null;
                                        }
                                        else if (trDetails[0].AddCostCenter1IsFixed == 0)
                                        {
                                            if (bsReceiptNote.RectSourceType.GetValueOrDefault(0) == 1 ||
                                 (bsReceiptNote.RectSourceType.GetValueOrDefault(0) >= 5 &&
                                 bsReceiptNote.RectSourceType.GetValueOrDefault(0) < 15))
                                            {
                                                MS_Customer cust = CustomerService.GetById(lstCusAccs[0].CustomerId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "MS_Customer";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 1 و العميل غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار العميل أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType.GetValueOrDefault(0) == 2 ||
                                         (bsReceiptNote.RectSourceType.GetValueOrDefault(0) >= 15 &&
                                         bsReceiptNote.RectSourceType.GetValueOrDefault(0) < 25))
                                            {
                                                MS_Vendor cust = VendorService.GetById(lstVendAccs[0].VendorId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "MS_Vendor";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 1 و المورد غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار المورد أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType == 4 || bsReceiptNote.RectSourceType == 35 ||
                                      (bsReceiptNote.RectSourceType >= 25 &&
                                      bsReceiptNote.RectSourceType < 34))
                                            {
                                                Hr_Employees cust = EmpService.GetById(lstEmpAccs[0].EmpId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId1.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId1;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId1;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Hr_Employees";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب  و الموظف غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار الموظف أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType == 36 || bsReceiptNote.RectSourceType == 37)
                                            {
                                                Prod_JobOrder cust = JobOrderService.GetById(lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Prod_JobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 1 و أمر الشغل غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر الشغل أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType >= 38 && bsReceiptNote.RectSourceType <= 47)
                                            {
                                                Sr_Vehicles cust = VehiclesService.GetById(lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Sr_Vehicles";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 1 و المركبه غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار المركبه أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType >= 48 && bsReceiptNote.RectSourceType <= 50)
                                            {
                                                Sr_VehicleJobOrder cust = db.Sr_VehicleJobOrder.FirstOrDefault(x => x.VJOrderId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Sr_VehicleJobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 1 و أمر الشغل غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر الشغل أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType >= 51 && bsReceiptNote.RectSourceType <= 60)
                                            {
                                                Ms_LetterOfGuarantee cust = db.Ms_LetterOfGuarantee.FirstOrDefault(x => x.LetOfGrnteeId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId1.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId1;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId1;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Ms_LetterOfGuarantee";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 1 و خطاب الضمان غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار خطاب الضمان أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType >= 61 && bsReceiptNote.RectSourceType <= 63)
                                            {
                                                Sr_JobOrder cust = db.Sr_JobOrder.FirstOrDefault(x => x.JorderId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Sr_JobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 1 و أمر صيانة مركبه غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر صيانة مركبه أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType >= 64 && bsReceiptNote.RectSourceType <= 66)
                                            {
                                                Repair_JobOrder cust = db.Repair_JobOrder.FirstOrDefault(x => x.RepairId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Repair_JobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 1 و أمر صيانة معدات غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر صيانة معدات أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType >= 67 && bsReceiptNote.RectSourceType <= 77)
                                            {
                                                Asset_AssetCard cust = db.Asset_AssetCard.FirstOrDefault(x => x.AssetId == lstAssets[0].AssetId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Asset_AssetCard";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 1 و الأصل الثابت غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار الأصل الثابت أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType >= 78 && bsReceiptNote.RectSourceType <= 88)
                                            {
                                                Proj_Projects cust = db.Proj_Projects.FirstOrDefault(x => x.ProjectId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId1.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId1;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId1;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Proj_Projects";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 1 و الأصل الثابت غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار الأصل الثابت أولا";
                                                    return false;
                                                }
                                            }
                                            //if (bsReceiptNote.RectSourceType == 34)
                                            //{
                                            //    if (chrtAccount.cos.CostCenterId1.HasValue)
                                            //        {
                                            //            center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                            //            postOrder.CostCenterId = cust.CostCenterId1;
                                            //            postOrder.HelpCostCenterId = cust.CostCenterId1;
                                            //            postOrder.IsHelpCostCenter = true;
                                            //            postOrder.HelpCostCenterType = "Hr_Employees";
                                            //        }
                                            //        else
                                            //        {
                                            //            Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب  و المورد غير مرتبط بمركز تكلفه";
                                            //            return false;
                                            //        }                                               
                                            //}
                                        }

                                        if (center != null)
                                        {
                                            if (center.CurrencyId.HasValue)
                                            {
                                                ////postOrder.CurrencyId = chrt.CurrencyId;
                                                postOrder.BalancCrencyBeforDebtCostCentr = center.BalanceDebitCurncy;
                                                postOrder.BalancLocalBeforDebCostCentr = center.BalanceDebitLocal;
                                                postOrder.BalancCrencyBeforCredCostCentr = center.BalanceCreditCurncy;
                                                postOrder.BalancLocalBeforCredCostCentr = center.BalanceCreditLocal;

                                            }
                                            else
                                            {
                                                Message = "عملة مركز التكلفه الحساب الاضافى 1 غير موجود *** كود مركز التكلفه =  " + center.CostCenterCode +
                                                    " اسم مركز التكلفه = " + center.CostCenterNameA;
                                                return false;
                                            }
                                        }

                                    }
                                    #endregion
                                    postOrder.TermId = term.TermId;
                                    postOrder.TableCode = tableNameHeader;
                                    postOrder.TableEntityId = bsReceiptNote.RectId;
                                    postOrder.IsPosted = false;
                                    postOrder.CurrencyId = bsReceiptNote.CurrencyId;
                                    if (trDetails[0].AddAccountId1.HasValue)
                                    {
                                        if (trDetails[0].AddAccount1IsFixed == 1)
                                        {
                                            Cal_AccountChart chrt = Cal_AccountChart.GetById(trDetails[0].AddAccountId1.Value);
                                            if (chrt != null)
                                            {
                                                if (chrt.CurrencyId.HasValue)
                                                {
                                                    //postOrder.CurrencyId = chrt.CurrencyId;
                                                    //postOrder.BalaceCurrencyBefor = chrt.BalanceCurncy;
                                                    postOrder.BalaceCurrencyBeforDebit = chrt.BalanceDebitCurncy;
                                                    postOrder.BalaceLocalBeforDebit = chrt.BalanceDebitLocal;
                                                    postOrder.BalaceCurrencyBeforCredit = chrt.BalanceCreditCurncy;
                                                    postOrder.BalaceLocalBeforCredit = chrt.BalanceCreditLocal;
                                                    MS_Currency cur = CurrencyService.GetById(bsReceiptNote.CurrencyId.Value);
                                                    if (cur != null)
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                }
                                                else
                                                {
                                                    Message = "عملة الحساب  غير موجود *** كود الحساب =  " + chrt.AccountCode +
                                                        " اسم الحساب = " + chrt.AccountNameA;
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                Message = "الحساب  غير موجود . . .";
                                                return false;
                                            }
                                        }
                                        else if (trDetails[0].AddAccount1IsFixed == 2)
                                        {
                                            if (AnCode == null || !AnCode.AccountId.HasValue)
                                            {
                                                Message = "الكود التحليلى أو الحساب المرتبط به غير صحيح . . .";
                                                return false;
                                            }
                                            Cal_AccountChart chrt = Cal_AccountChart.GetById(AnCode.AccountId.Value);
                                            if (chrt != null)
                                            {
                                                if (chrt.CurrencyId.HasValue)
                                                {
                                                    //postOrder.CurrencyId = chrt.CurrencyId;
                                                    postOrder.BalaceCurrencyBeforDebit = chrt.BalanceDebitCurncy;
                                                    postOrder.BalaceLocalBeforDebit = chrt.BalanceDebitLocal;
                                                    postOrder.BalaceCurrencyBeforCredit = chrt.BalanceCreditCurncy;
                                                    postOrder.BalaceLocalBeforCredit = chrt.BalanceCreditLocal;
                                                    MS_Currency cur = CurrencyService.GetById(bsReceiptNote.CurrencyId.Value);
                                                    if (cur != null)
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                }
                                                else
                                                {
                                                    Message = "عملة الحساب  غير موجود *** كود الحساب =  " + chrt.AccountCode +
                                                        " اسم الحساب = " + chrt.AccountNameA;
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                Message = "الحساب  غير موجود . . .";
                                                return false;
                                            }
                                        }
                                    }
                                    //else if (trDetails[0].AccCashDebitOrCredit != true && trDetails[0].AccDiscDebitOrCredit != true && trDetails[0].AccTaxDebitOrCredit!=true)
                                    //{
                                    //    Message = "الحساب  غير موجود بنوع السند  ";
                                    //    return false;
                                    //}
                                    if (trDetails[0].AddAccount1IsFixed == 1)
                                    {
                                        postOrder.AccountId = trDetails[0].AddAccountId1.Value;
                                        if (trDetails[0].AddAcc1DebitOrCredit == true)
                                        {
                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsReceiptNote);
                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                        }
                                        else
                                        {
                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsReceiptNote);
                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                        }

                                        postOrder.HelpAccId = null;
                                        postOrder.IsHelpAcc = false;
                                        postOrder.HelpAccType = null;
                                    }
                                    else if (trDetails[0].AddAccount1IsFixed == 2)
                                    {
                                        postOrder.AccountId = AnCode.AccountId.Value;
                                        if (trDetails[0].AddAcc1DebitOrCredit == true)
                                        {
                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsReceiptNote);
                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                        }
                                        else
                                        {
                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsReceiptNote);
                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                        }

                                        postOrder.HelpAccId = null;
                                        postOrder.IsHelpAcc = false;
                                        postOrder.HelpAccType = null;
                                    }
                                    else if (trDetails[0].AddAccount1IsFixed == 0)
                                    {
                                        if (bsReceiptNote.RectSourceType.GetValueOrDefault(0) == 1 ||
                                     (bsReceiptNote.RectSourceType.GetValueOrDefault(0) >= 5 &&
                                     bsReceiptNote.RectSourceType.GetValueOrDefault(0) < 15))
                                        {
                                            if (lstCusAccs.Count == 0)
                                            {
                                                MessageBox = "العميل غير مربوط بحساب استاذ *** راجع مستند تعريف العميل   ";
                                                return false;
                                            }
                                            Cal_CustAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstCusAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف العميل *** راجع مستند تعريف العميل   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "العميل غير مربوط بحساب استاذ *** راجع مستند تعريف العميل   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.CustAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "MS_Customer";
                                            MS_Customer cust = CustomerService.GetById(CusAccs.CustomerId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                        if (trDetails[0].AddAcc1DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "العميل غير مرتبط بعمله *** راجع كارت العميل   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "العميل غير مرتبط بعمله *** راجع كارت العميل   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "العميل غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType.GetValueOrDefault(0) == 2 ||
                                           (bsReceiptNote.RectSourceType.GetValueOrDefault(0) >= 15 &&
                                           bsReceiptNote.RectSourceType.GetValueOrDefault(0) < 25))
                                        {
                                            if (lstVendAccs.Count == 0)
                                            {
                                                MessageBox = "المورد غير مربوط بحساب استاذ *** راجع مستند تعريف المورد   ";
                                                return false;
                                            }
                                            Cal_VendAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstVendAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف المورد *** راجع مستند تعريف المورد   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "المورد غير مربوط بحساب استاذ *** راجع مستند تعريف المورد   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.VendAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "MS_Vendor";
                                            MS_Vendor cust = VendorService.GetById(CusAccs.VendorId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                        if (trDetails[0].AddAcc1DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "المورد غير مرتبط بعمله *** راجع كارت المورد   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "المورد غير مرتبط بعمله *** راجع كارت المورد   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "المورد غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType == 4 || bsReceiptNote.RectSourceType == 35 ||
                              (bsReceiptNote.RectSourceType >= 25 && bsReceiptNote.RectSourceType < 34))
                                        {
                                            if (lstEmpAccs.Count == 0)
                                            {
                                                MessageBox = "الموظف غير مربوط بحساب استاذ *** راجع مستند تعريف الموظف   ";
                                                return false;
                                            }
                                            Cal_EmpAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstEmpAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الموظف *** راجع مستند تعريف الموظف   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الموظف غير مربوط بحساب استاذ *** راجع مستند تعريف الموظف   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.EmpAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Hr_Employees";
                                            Hr_Employees cust = EmpService.GetById(CusAccs.EmpId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                        if (trDetails[0].AddAcc1DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الموظف غير مرتبط بعمله *** راجع كارت الموظف   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "الموظف غير مرتبط بعمله *** راجع كارت الموظف   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الموظف غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType == 36 || bsReceiptNote.RectSourceType == 37)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Prod_JobOrder";
                                            Prod_JobOrder cust = JobOrderService.GetById(CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AddAcc1DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AddAcc1DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType >= 38 && bsReceiptNote.RectSourceType <= 47)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Sr_Vehicles";
                                            Sr_Vehicles cust = VehiclesService.GetById(CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                //if (cust.CurrencyId.HasValue)
                                                //{
                                                //    MS_Currency cur = CurrencyService.GetById(tran,cust.CurrencyId.Value);
                                                //    if (cur != null)
                                                //    {
                                                //        postOrder.Rate = bsReceiptNote.Rate;
                                                //        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsReceiptNote);
                                                //        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                //    }
                                                //    else
                                                //    {
                                                //        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                //        return false;
                                                //    }
                                                //}
                                                //else
                                                //{
                                                if (LocalCurrency != null)
                                                {
                                                    postOrder.Rate = bsReceiptNote.Rate;

                                                    if (trDetails[0].AddAcc1DebitOrCredit == true)
                                                    {
                                                        postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsReceiptNote);
                                                        postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsReceiptNote);
                                                        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "خطأ بالعمله المحليه   ";
                                                    return false;
                                                }
                                                //}
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType >= 48 && bsReceiptNote.RectSourceType <= 50)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Sr_VehicleJobOrder";
                                            Sr_VehicleJobOrder cust = db.Sr_VehicleJobOrder.FirstOrDefault(x => x.VJOrderId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                //if (cust.CurrencyId.HasValue)
                                                //{
                                                //    MS_Currency cur = CurrencyService.GetById(tran,cust.CurrencyId.Value);
                                                //    if (cur != null)
                                                //    {
                                                //        postOrder.Rate = bsReceiptNote.Rate;
                                                //        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsReceiptNote);
                                                //        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                //    }
                                                //    else
                                                //    {
                                                //        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                //        return false;
                                                //    }
                                                //}
                                                //else
                                                //{
                                                if (LocalCurrency != null)
                                                {
                                                    postOrder.Rate = bsReceiptNote.Rate;

                                                    if (trDetails[0].AddAcc1DebitOrCredit == true)
                                                    {
                                                        postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsReceiptNote);
                                                        postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsReceiptNote);
                                                        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "خطأ بالعمله المحليه   ";
                                                    return false;
                                                }
                                                //}
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType >= 51 && bsReceiptNote.RectSourceType <= 60)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Ms_LetterOfGuarantee";
                                            Ms_LetterOfGuarantee cust = db.Ms_LetterOfGuarantee.FirstOrDefault(x => x.LetOfGrnteeId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AddAcc1DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AddAcc1DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType >= 61 && bsReceiptNote.RectSourceType <= 63)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Sr_JobOrder";
                                            Sr_JobOrder cust = db.Sr_JobOrder.FirstOrDefault(x => x.JorderId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AddAcc1DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AddAcc1DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType >= 64 && bsReceiptNote.RectSourceType <= 66)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Repair_JobOrder";
                                            Repair_JobOrder cust = db.Repair_JobOrder.FirstOrDefault(x => x.RepairId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AddAcc1DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AddAcc1DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType >= 67 && bsReceiptNote.RectSourceType <= 77)
                                        {
                                            if (lstAssets.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_AssetAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstAssets, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.AssetAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Asset_AssetCard";
                                            Asset_AssetCard cust = db.Asset_AssetCard.FirstOrDefault(x => x.AssetId == CusAccs.AssetId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AddAcc1DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AddAcc1DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType >= 78 && bsReceiptNote.RectSourceType <= 88)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Proj_Projects";
                                            Proj_Projects cust = db.Proj_Projects.FirstOrDefault(x => x.ProjectId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AddAcc1DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AddAcc1DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType == 34)
                                        {
                                            //postOrder.HelpAccId = CusAccs.EmpAccountId;
                                            postOrder.AccountId = chrtAccount.AccountId;
                                            postOrder.IsHelpAcc = false;
                                            //postOrder.HelpAccType = "Hr_Employees";
                                            //MS_Vendor cust = VendorService.GetById(CusAccs.EmpId.Value);
                                            if (chrtAccount != null)
                                            {
                                                if (chrtAccount.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(chrtAccount.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                        if (trDetails[0].AddAcc1DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الحساب غير مرتبط بعمله *** راجع دليل الحسابات   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "الحساب غير مرتبط بعمله *** راجع دليل الحسابات   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الحساب غير موجود   ";
                                                return false;
                                            }
                                        }
                                    }
                                    post.Add(postOrder);
                                }
                            #endregion

                            SkipCondition = false;
                            if (trDetails[0].AddAccountIsFixed2 == 2)
                            {
                                if (AnCode == null && trDetails[0].AnalaticalCodeMust.GetValueOrDefault(false))
                                {
                                    MessageBox = "الكود التحليلي اجبارى ";
                                    return false;
                                }
                                else if (AnCode == null)
                                {
                                    SkipCondition = true;
                                }
                            }
                            if (!SkipCondition)
                                #region AddAccount2 Account
                                // manage Tax account in doctype
                                if (trDetails[0].AddAccountIsFixed2.HasValue && !string.IsNullOrEmpty(trDetails[0].ValuAddAccount2))
                                {
                                    //if (post.Count == 0)
                                    Cal_PostOrder postOrder = new Cal_PostOrder(); postOrder.IsOpenningTerm = term.IsOpenningTerm;
                                    #region Cost center
                                    if (trDetails[0].AddCostCenterId2.HasValue || trDetails[0].AddCostCenterIsFixed2 == 2)
                                    {
                                        Cal_CostCenters center = null;
                                        if (trDetails[0].AddCostCenterIsFixed2 == 1)
                                        {
                                            center = CostCentersService.GetById(trDetails[0].AddCostCenterId2.Value);
                                            postOrder.CostCenterId = trDetails[0].AddCostCenterId2;
                                            postOrder.HelpCostCenterId = null;
                                            postOrder.IsHelpCostCenter = false;
                                            postOrder.HelpCostCenterType = null;
                                        }
                                        else if (trDetails[0].AddCostCenterIsFixed2 == 2 && AnCode != null && AnCode.CostCenterId.GetValueOrDefault(0) != 0)
                                        {
                                            center = CostCentersService.GetById(AnCode.CostCenterId.Value);
                                            postOrder.CostCenterId = AnCode.CostCenterId;
                                            postOrder.HelpCostCenterId = null;
                                            postOrder.IsHelpCostCenter = false;
                                            postOrder.HelpCostCenterType = null;
                                        }
                                        else if (trDetails[0].AddCostCenterIsFixed2 == 0)
                                        {
                                            if (bsReceiptNote.RectSourceType.GetValueOrDefault(0) == 1 ||
                                 (bsReceiptNote.RectSourceType.GetValueOrDefault(0) >= 5 &&
                                 bsReceiptNote.RectSourceType.GetValueOrDefault(0) < 15))
                                            {
                                                MS_Customer cust = CustomerService.GetById(lstCusAccs[0].CustomerId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "MS_Customer";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 2 و العميل غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار العميل أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType.GetValueOrDefault(0) == 2 ||
                                         (bsReceiptNote.RectSourceType.GetValueOrDefault(0) >= 15 &&
                                         bsReceiptNote.RectSourceType.GetValueOrDefault(0) < 25))
                                            {
                                                MS_Vendor cust = VendorService.GetById(lstVendAccs[0].VendorId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "MS_Vendor";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 2 و المورد غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار المورد أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType == 4 || bsReceiptNote.RectSourceType == 35 ||
                         (bsReceiptNote.RectSourceType >= 25 &&
                         bsReceiptNote.RectSourceType < 34))
                                            {
                                                Hr_Employees cust = EmpService.GetById(lstEmpAccs[0].EmpId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId1.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId1;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId1;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Hr_Employees";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب  و الموظف غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار الموظف أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType == 36 || bsReceiptNote.RectSourceType == 37)
                                            {
                                                Prod_JobOrder cust = JobOrderService.GetById(lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Prod_JobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 2 و أمر الشغل غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر الشغل أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType >= 38 && bsReceiptNote.RectSourceType <= 47)
                                            {
                                                Sr_Vehicles cust = VehiclesService.GetById(lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Sr_Vehicles";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 2 و المركبه غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار المركبه أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType >= 48 && bsReceiptNote.RectSourceType <= 50)
                                            {
                                                Sr_VehicleJobOrder cust = db.Sr_VehicleJobOrder.FirstOrDefault(x => x.VJOrderId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Sr_VehicleJobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 2 و أمر الشغل غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر الشغل أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType >= 51 && bsReceiptNote.RectSourceType <= 60)
                                            {
                                                Ms_LetterOfGuarantee cust = db.Ms_LetterOfGuarantee.FirstOrDefault(x => x.LetOfGrnteeId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId1.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId1;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId1;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Ms_LetterOfGuarantee";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 2 و خطاب الضمان غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار خطاب الضمان أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType >= 61 && bsReceiptNote.RectSourceType <= 63)
                                            {
                                                Sr_JobOrder cust = db.Sr_JobOrder.FirstOrDefault(x => x.JorderId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Sr_JobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 2 و أمر صيانة مركبه غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر صيانة مركبه أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType >= 64 && bsReceiptNote.RectSourceType <= 66)
                                            {
                                                Repair_JobOrder cust = db.Repair_JobOrder.FirstOrDefault(x => x.RepairId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Repair_JobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 2 و أمر صيانة معدات غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر صيانة معدات أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType >= 67 && bsReceiptNote.RectSourceType <= 77)
                                            {
                                                Asset_AssetCard cust = db.Asset_AssetCard.FirstOrDefault(x => x.AssetId == lstAssets[0].AssetId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Asset_AssetCard";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 2 و الأصل الثابت غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار الأصل الثابت أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType >= 78 && bsReceiptNote.RectSourceType <= 88)
                                            {
                                                Proj_Projects cust = db.Proj_Projects.FirstOrDefault(x => x.ProjectId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId1.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId1;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId1;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Proj_Projects";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 2 و الأصل الثابت غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار الأصل الثابت أولا";
                                                    return false;
                                                }
                                            }
                                            //if (bsReceiptNote.RectSourceType == 34)
                                            //{
                                            //    if (chrtAccount.cos.CostCenterId1.HasValue)
                                            //        {
                                            //            center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                            //            postOrder.CostCenterId = cust.CostCenterId1;
                                            //            postOrder.HelpCostCenterId = cust.CostCenterId1;
                                            //            postOrder.IsHelpCostCenter = true;
                                            //            postOrder.HelpCostCenterType = "Hr_Employees";
                                            //        }
                                            //        else
                                            //        {
                                            //            Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب  و المورد غير مرتبط بمركز تكلفه";
                                            //            return false;
                                            //        }                                               
                                            //}
                                        }

                                        if (center != null)
                                        {
                                            if (center.CurrencyId.HasValue)
                                            {
                                                ////postOrder.CurrencyId = chrt.CurrencyId;
                                                postOrder.BalancCrencyBeforDebtCostCentr = center.BalanceDebitCurncy;
                                                postOrder.BalancLocalBeforDebCostCentr = center.BalanceDebitLocal;
                                                postOrder.BalancCrencyBeforCredCostCentr = center.BalanceCreditCurncy;
                                                postOrder.BalancLocalBeforCredCostCentr = center.BalanceCreditLocal;

                                            }
                                            else
                                            {
                                                Message = "عملة مركز التكلفه الحساب الاضافى 2 غير موجود *** كود مركز التكلفه =  " + center.CostCenterCode +
                                                    " اسم مركز التكلفه = " + center.CostCenterNameA;
                                                return false;
                                            }
                                        }

                                    }
                                    #endregion
                                    postOrder.TermId = term.TermId;
                                    postOrder.TableCode = tableNameHeader;
                                    postOrder.TableEntityId = bsReceiptNote.RectId;
                                    postOrder.IsPosted = false;
                                    postOrder.CurrencyId = bsReceiptNote.CurrencyId;
                                    if (trDetails[0].AddAccountId2.HasValue)
                                    {
                                        if (trDetails[0].AddAccountIsFixed2 == 1)
                                        {
                                            Cal_AccountChart chrt = Cal_AccountChart.GetById(trDetails[0].AddAccountId2.Value);
                                            if (chrt != null)
                                            {
                                                if (chrt.CurrencyId.HasValue)
                                                {
                                                    //postOrder.CurrencyId = chrt.CurrencyId;
                                                    //postOrder.BalaceCurrencyBefor = chrt.BalanceCurncy;
                                                    postOrder.BalaceCurrencyBeforDebit = chrt.BalanceDebitCurncy;
                                                    postOrder.BalaceLocalBeforDebit = chrt.BalanceDebitLocal;
                                                    postOrder.BalaceCurrencyBeforCredit = chrt.BalanceCreditCurncy;
                                                    postOrder.BalaceLocalBeforCredit = chrt.BalanceCreditLocal;
                                                    MS_Currency cur = CurrencyService.GetById(bsReceiptNote.CurrencyId.Value);
                                                    if (cur != null)
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                }
                                                else
                                                {
                                                    Message = "عملة الحساب  غير موجود *** كود الحساب =  " + chrt.AccountCode +
                                                        " اسم الحساب = " + chrt.AccountNameA;
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                Message = "الحساب  غير موجود . . .";
                                                return false;
                                            }
                                        }
                                        else if (trDetails[0].AddAccountIsFixed2 == 2)
                                        {
                                            if (AnCode == null || !AnCode.AccountId.HasValue)
                                            {
                                                Message = "الكود التحليلى أو الحساب المرتبط به غير صحيح . . .";
                                                return false;
                                            }
                                            Cal_AccountChart chrt = Cal_AccountChart.GetById(AnCode.AccountId.Value);
                                            if (chrt != null)
                                            {
                                                if (chrt.CurrencyId.HasValue)
                                                {
                                                    //postOrder.CurrencyId = chrt.CurrencyId;
                                                    postOrder.BalaceCurrencyBeforDebit = chrt.BalanceDebitCurncy;
                                                    postOrder.BalaceLocalBeforDebit = chrt.BalanceDebitLocal;
                                                    postOrder.BalaceCurrencyBeforCredit = chrt.BalanceCreditCurncy;
                                                    postOrder.BalaceLocalBeforCredit = chrt.BalanceCreditLocal;
                                                    MS_Currency cur = CurrencyService.GetById(bsReceiptNote.CurrencyId.Value);
                                                    if (cur != null)
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                }
                                                else
                                                {
                                                    Message = "عملة الحساب  غير موجود *** كود الحساب =  " + chrt.AccountCode +
                                                        " اسم الحساب = " + chrt.AccountNameA;
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                Message = "الحساب  غير موجود . . .";
                                                return false;
                                            }
                                        }
                                    }
                                    //else if (trDetails[0].AccCashDebitOrCredit != true && trDetails[0].AccDiscDebitOrCredit != true && trDetails[0].AccTaxDebitOrCredit!=true)
                                    //{
                                    //    Message = "الحساب  غير موجود بنوع السند  ";
                                    //    return false;
                                    //}
                                    if (trDetails[0].AddAccountIsFixed2 == 1)
                                    {
                                        postOrder.AccountId = trDetails[0].AddAccountId2.Value;
                                        if (trDetails[0].AddAcc2DebitOrCredit == true)
                                        {
                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsReceiptNote);
                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                        }
                                        else
                                        {
                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsReceiptNote);
                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                        }

                                        postOrder.HelpAccId = null;
                                        postOrder.IsHelpAcc = false;
                                        postOrder.HelpAccType = null;
                                    }
                                    else if (trDetails[0].AddAccountIsFixed2 == 2)
                                    {
                                        postOrder.AccountId = AnCode.AccountId.Value;
                                        if (trDetails[0].AddAcc2DebitOrCredit == true)
                                        {
                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsReceiptNote);
                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                        }
                                        else
                                        {
                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsReceiptNote);
                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                        }

                                        postOrder.HelpAccId = null;
                                        postOrder.IsHelpAcc = false;
                                        postOrder.HelpAccType = null;
                                    }
                                    else if (trDetails[0].AddAccountIsFixed2 == 0)
                                    {
                                        if (bsReceiptNote.RectSourceType.GetValueOrDefault(0) == 1 ||
                                    (bsReceiptNote.RectSourceType.GetValueOrDefault(0) >= 5 &&
                                    bsReceiptNote.RectSourceType.GetValueOrDefault(0) < 15))
                                        {
                                            if (lstCusAccs.Count == 0)
                                            {
                                                MessageBox = "العميل غير مربوط بحساب استاذ *** راجع مستند تعريف العميل   ";
                                                return false;
                                            }
                                            Cal_CustAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstCusAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف العميل *** راجع مستند تعريف العميل   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "العميل غير مربوط بحساب استاذ *** راجع مستند تعريف العميل   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.CustAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "MS_Customer";
                                            MS_Customer cust = CustomerService.GetById(CusAccs.CustomerId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                        if (trDetails[0].AddAcc2DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "العميل غير مرتبط بعمله *** راجع كارت العميل   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "العميل غير مرتبط بعمله *** راجع كارت العميل   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "العميل غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType.GetValueOrDefault(0) == 2 ||
                                            (bsReceiptNote.RectSourceType.GetValueOrDefault(0) >= 15 &&
                                            bsReceiptNote.RectSourceType.GetValueOrDefault(0) < 25))
                                        {
                                            if (lstVendAccs.Count == 0)
                                            {
                                                MessageBox = "المورد غير مربوط بحساب استاذ *** راجع مستند تعريف المورد   ";
                                                return false;
                                            }
                                            Cal_VendAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstVendAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف المورد *** راجع مستند تعريف المورد   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "المورد غير مربوط بحساب استاذ *** راجع مستند تعريف المورد   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.VendAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "MS_Vendor";
                                            MS_Vendor cust = VendorService.GetById(CusAccs.VendorId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                        if (trDetails[0].AddAcc2DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "المورد غير مرتبط بعمله *** راجع كارت المورد   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "المورد غير مرتبط بعمله *** راجع كارت المورد   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "المورد غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType == 4 || bsReceiptNote.RectSourceType == 35 ||
                          (bsReceiptNote.RectSourceType >= 25 && bsReceiptNote.RectSourceType < 34))
                                        {
                                            if (lstEmpAccs.Count == 0)
                                            {
                                                MessageBox = "الموظف غير مربوط بحساب استاذ *** راجع مستند تعريف الموظف   ";
                                                return false;
                                            }
                                            Cal_EmpAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstEmpAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الموظف *** راجع مستند تعريف الموظف   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الموظف غير مربوط بحساب استاذ *** راجع مستند تعريف الموظف   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.EmpAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Hr_Employees";
                                            Hr_Employees cust = EmpService.GetById(CusAccs.EmpId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                        if (trDetails[0].AddAcc2DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الموظف غير مرتبط بعمله *** راجع كارت الموظف   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "الموظف غير مرتبط بعمله *** راجع كارت الموظف   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الموظف غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType == 36 || bsReceiptNote.RectSourceType == 37)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Prod_JobOrder";
                                            Prod_JobOrder cust = JobOrderService.GetById(CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AddAcc2DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AddAcc2DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType >= 38 && bsReceiptNote.RectSourceType <= 47)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Sr_Vehicles";
                                            Sr_Vehicles cust = VehiclesService.GetById(CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                //if (cust.CurrencyId.HasValue)
                                                //{
                                                //    MS_Currency cur = CurrencyService.GetById(tran,cust.CurrencyId.Value);
                                                //    if (cur != null)
                                                //    {
                                                //        postOrder.Rate = bsReceiptNote.Rate;
                                                //        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsReceiptNote);
                                                //        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                //    }
                                                //    else
                                                //    {
                                                //        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                //        return false;
                                                //    }
                                                //}
                                                //else
                                                //{
                                                if (LocalCurrency != null)
                                                {
                                                    postOrder.Rate = bsReceiptNote.Rate;

                                                    if (trDetails[0].AddAcc2DebitOrCredit == true)
                                                    {
                                                        postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsReceiptNote);
                                                        postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsReceiptNote);
                                                        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "خطأ بالعمله المحليه   ";
                                                    return false;
                                                }
                                                //}
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType >= 48 && bsReceiptNote.RectSourceType <= 50)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Sr_VehicleJobOrder";
                                            Sr_VehicleJobOrder cust = db.Sr_VehicleJobOrder.FirstOrDefault(x => x.VJOrderId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                //if (cust.CurrencyId.HasValue)
                                                //{
                                                //    MS_Currency cur = CurrencyService.GetById(tran,cust.CurrencyId.Value);
                                                //    if (cur != null)
                                                //    {
                                                //        postOrder.Rate = bsReceiptNote.Rate;
                                                //        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsReceiptNote);
                                                //        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                //    }
                                                //    else
                                                //    {
                                                //        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                //        return false;
                                                //    }
                                                //}
                                                //else
                                                //{
                                                if (LocalCurrency != null)
                                                {
                                                    postOrder.Rate = bsReceiptNote.Rate;

                                                    if (trDetails[0].AddAcc2DebitOrCredit == true)
                                                    {
                                                        postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsReceiptNote);
                                                        postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsReceiptNote);
                                                        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "خطأ بالعمله المحليه   ";
                                                    return false;
                                                }
                                                //}
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType >= 51 && bsReceiptNote.RectSourceType <= 60)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Ms_LetterOfGuarantee";
                                            Ms_LetterOfGuarantee cust = db.Ms_LetterOfGuarantee.FirstOrDefault(x => x.LetOfGrnteeId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AddAcc2DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AddAcc2DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType >= 61 && bsReceiptNote.RectSourceType <= 63)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Sr_JobOrder";
                                            Sr_JobOrder cust = db.Sr_JobOrder.FirstOrDefault(x => x.JorderId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AddAcc2DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AddAcc2DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType >= 64 && bsReceiptNote.RectSourceType <= 66)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Repair_JobOrder";
                                            Repair_JobOrder cust = db.Repair_JobOrder.FirstOrDefault(x => x.RepairId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AddAcc2DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AddAcc2DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType >= 67 && bsReceiptNote.RectSourceType <= 77)
                                        {
                                            if (lstAssets.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_AssetAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstAssets, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.AssetAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Asset_AssetCard";
                                            Asset_AssetCard cust = db.Asset_AssetCard.FirstOrDefault(x => x.AssetId == CusAccs.AssetId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AddAcc2DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AddAcc2DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType >= 78 && bsReceiptNote.RectSourceType <= 88)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Proj_Projects";
                                            Proj_Projects cust = db.Proj_Projects.FirstOrDefault(x => x.ProjectId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AddAcc2DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AddAcc2DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType == 34)
                                        {
                                            //postOrder.HelpAccId = CusAccs.EmpAccountId;
                                            postOrder.AccountId = chrtAccount.AccountId;
                                            postOrder.IsHelpAcc = false;
                                            //postOrder.HelpAccType = "Hr_Employees";
                                            //MS_Vendor cust = VendorService.GetById(CusAccs.EmpId.Value);
                                            if (chrtAccount != null)
                                            {
                                                if (chrtAccount.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(chrtAccount.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                        if (trDetails[0].AddAcc2DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الحساب غير مرتبط بعمله *** راجع دليل الحسابات   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "الحساب غير مرتبط بعمله *** راجع دليل الحسابات   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الحساب غير موجود   ";
                                                return false;
                                            }
                                        }
                                    }
                                    post.Add(postOrder);
                                }
                            #endregion

                            SkipCondition = false;
                            if (trDetails[0].AddAccountIsFixed3 == 2)
                            {
                                if (AnCode == null && trDetails[0].AnalaticalCodeMust.GetValueOrDefault(false))
                                {
                                    MessageBox = "الكود التحليلي اجبارى ";
                                    return false;
                                }
                                else if (AnCode == null)
                                {
                                    SkipCondition = true;
                                }
                            }
                            if (!SkipCondition)
                                #region AddAccount3 Account
                                // manage Tax account in doctype
                                if (trDetails[0].AddAccountIsFixed3.HasValue && !string.IsNullOrEmpty(trDetails[0].ValuAddAccount3))
                                {
                                    //if (post.Count == 0)
                                    Cal_PostOrder postOrder = new Cal_PostOrder(); postOrder.IsOpenningTerm = term.IsOpenningTerm;

                                    #region Cost center
                                    if (trDetails[0].AddCostCenterId3.HasValue || trDetails[0].AddCostCenterIsFixed3 == 2)
                                    {
                                        Cal_CostCenters center = null;
                                        if (trDetails[0].AddCostCenterIsFixed3 == 1)
                                        {
                                            center = CostCentersService.GetById(trDetails[0].AddCostCenterId3.Value);
                                            postOrder.CostCenterId = trDetails[0].AddCostCenterId3;
                                            postOrder.HelpCostCenterId = null;
                                            postOrder.IsHelpCostCenter = false;
                                            postOrder.HelpCostCenterType = null;
                                        }
                                        else if (trDetails[0].AddCostCenterIsFixed3 == 2 && AnCode != null && AnCode.CostCenterId.GetValueOrDefault(0) != 0)
                                        {
                                            center = CostCentersService.GetById(AnCode.CostCenterId.Value);
                                            postOrder.CostCenterId = AnCode.CostCenterId;
                                            postOrder.HelpCostCenterId = null;
                                            postOrder.IsHelpCostCenter = false;
                                            postOrder.HelpCostCenterType = null;
                                        }
                                        else if (trDetails[0].AddCostCenterIsFixed3 == 0)
                                        {
                                            if (bsReceiptNote.RectSourceType.GetValueOrDefault(0) == 1 ||
                                 (bsReceiptNote.RectSourceType.GetValueOrDefault(0) >= 5 &&
                                 bsReceiptNote.RectSourceType.GetValueOrDefault(0) < 15))
                                            {
                                                MS_Customer cust = CustomerService.GetById(lstCusAccs[0].CustomerId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "MS_Customer";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 3 و العميل غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار العميل أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType.GetValueOrDefault(0) == 2 ||
                                         (bsReceiptNote.RectSourceType.GetValueOrDefault(0) >= 15 &&
                                         bsReceiptNote.RectSourceType.GetValueOrDefault(0) < 25))
                                            {
                                                MS_Vendor cust = VendorService.GetById(lstVendAccs[0].VendorId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "MS_Vendor";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 3 و المورد غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار المورد أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType == 4 || bsReceiptNote.RectSourceType == 35 ||
                                                (bsReceiptNote.RectSourceType >= 25 &&
                                                bsReceiptNote.RectSourceType < 34))
                                            {
                                                Hr_Employees cust = EmpService.GetById(lstEmpAccs[0].EmpId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId1.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId1;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId1;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Hr_Employees";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب  و الموظف غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار الموظف أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType == 36 || bsReceiptNote.RectSourceType == 37)
                                            {
                                                Prod_JobOrder cust = JobOrderService.GetById(lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Prod_JobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 3 و أمر الشغل غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر الشغل أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType >= 38 && bsReceiptNote.RectSourceType <= 47)
                                            {
                                                Sr_Vehicles cust = VehiclesService.GetById(lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Sr_Vehicles";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 3 و المركبه غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار المركبه أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType >= 48 && bsReceiptNote.RectSourceType <= 50)
                                            {
                                                Sr_VehicleJobOrder cust = db.Sr_VehicleJobOrder.FirstOrDefault(x => x.VJOrderId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Sr_VehicleJobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 3 و أمر الشغل غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر الشغل أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType >= 51 && bsReceiptNote.RectSourceType <= 60)
                                            {
                                                Ms_LetterOfGuarantee cust = db.Ms_LetterOfGuarantee.FirstOrDefault(x => x.LetOfGrnteeId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId1.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId1;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId1;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Ms_LetterOfGuarantee";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 3 و خطاب الضمان غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار خطاب الضمان أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType >= 61 && bsReceiptNote.RectSourceType <= 63)
                                            {
                                                Sr_JobOrder cust = db.Sr_JobOrder.FirstOrDefault(x => x.JorderId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Sr_JobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 3 و أمر صيانة مركبه غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر صيانة مركبه أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType >= 64 && bsReceiptNote.RectSourceType <= 66)
                                            {
                                                Repair_JobOrder cust = db.Repair_JobOrder.FirstOrDefault(x => x.RepairId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Repair_JobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 3 و أمر صيانة معدات غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر صيانة معدات أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType >= 67 && bsReceiptNote.RectSourceType <= 77)
                                            {
                                                Asset_AssetCard cust = db.Asset_AssetCard.FirstOrDefault(x => x.AssetId == lstAssets[0].AssetId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Asset_AssetCard";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 3 و الأصل الثابت غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار الأصل الثابت أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType >= 78 && bsReceiptNote.RectSourceType <= 88)
                                            {
                                                Proj_Projects cust = db.Proj_Projects.FirstOrDefault(x => x.ProjectId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId1.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId1;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId1;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Proj_Projects";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 3 و الأصل الثابت غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار الأصل الثابت أولا";
                                                    return false;
                                                }
                                            }
                                            //if (bsReceiptNote.RectSourceType == 34)
                                            //{
                                            //    if (chrtAccount.cos.CostCenterId1.HasValue)
                                            //        {
                                            //            center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                            //            postOrder.CostCenterId = cust.CostCenterId1;
                                            //            postOrder.HelpCostCenterId = cust.CostCenterId1;
                                            //            postOrder.IsHelpCostCenter = true;
                                            //            postOrder.HelpCostCenterType = "Hr_Employees";
                                            //        }
                                            //        else
                                            //        {
                                            //            Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب  و المورد غير مرتبط بمركز تكلفه";
                                            //            return false;
                                            //        }                                               
                                            //}
                                        }

                                        if (center != null)
                                        {
                                            if (center.CurrencyId.HasValue)
                                            {
                                                ////postOrder.CurrencyId = chrt.CurrencyId;
                                                postOrder.BalancCrencyBeforDebtCostCentr = center.BalanceDebitCurncy;
                                                postOrder.BalancLocalBeforDebCostCentr = center.BalanceDebitLocal;
                                                postOrder.BalancCrencyBeforCredCostCentr = center.BalanceCreditCurncy;
                                                postOrder.BalancLocalBeforCredCostCentr = center.BalanceCreditLocal;

                                            }
                                            else
                                            {
                                                Message = "عملة مركز التكلفه الحساب الاضافى 3 غير موجود *** كود مركز التكلفه =  " + center.CostCenterCode +
                                                    " اسم مركز التكلفه = " + center.CostCenterNameA;
                                                return false;
                                            }
                                        }

                                    }
                                    #endregion

                                    postOrder.TermId = term.TermId;
                                    postOrder.TableCode = tableNameHeader;
                                    postOrder.TableEntityId = bsReceiptNote.RectId;
                                    postOrder.IsPosted = false;
                                    postOrder.CurrencyId = bsReceiptNote.CurrencyId;
                                    if (trDetails[0].AddAccountId3.HasValue)
                                    {
                                        if (trDetails[0].AddAccountIsFixed3 == 1)
                                        {
                                            Cal_AccountChart chrt = Cal_AccountChart.GetById(trDetails[0].AddAccountId3.Value);
                                            if (chrt != null)
                                            {
                                                if (chrt.CurrencyId.HasValue)
                                                {
                                                    //postOrder.CurrencyId = chrt.CurrencyId;
                                                    //postOrder.BalaceCurrencyBefor = chrt.BalanceCurncy;
                                                    postOrder.BalaceCurrencyBeforDebit = chrt.BalanceDebitCurncy;
                                                    postOrder.BalaceLocalBeforDebit = chrt.BalanceDebitLocal;
                                                    postOrder.BalaceCurrencyBeforCredit = chrt.BalanceCreditCurncy;
                                                    postOrder.BalaceLocalBeforCredit = chrt.BalanceCreditLocal;
                                                    MS_Currency cur = CurrencyService.GetById(bsReceiptNote.CurrencyId.Value);
                                                    if (cur != null)
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                }
                                                else
                                                {
                                                    Message = "عملة الحساب  غير موجود *** كود الحساب =  " + chrt.AccountCode +
                                                        " اسم الحساب = " + chrt.AccountNameA;
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                Message = "الحساب  غير موجود . . .";
                                                return false;
                                            }
                                        }
                                        else if (trDetails[0].AddAccountIsFixed3 == 2)
                                        {
                                            if (AnCode == null || !AnCode.AccountId.HasValue)
                                            {
                                                Message = "الكود التحليلى أو الحساب المرتبط به غير صحيح . . .";
                                                return false;
                                            }
                                            Cal_AccountChart chrt = Cal_AccountChart.GetById(AnCode.AccountId.Value);
                                            if (chrt != null)
                                            {
                                                if (chrt.CurrencyId.HasValue)
                                                {
                                                    //postOrder.CurrencyId = chrt.CurrencyId;
                                                    postOrder.BalaceCurrencyBeforDebit = chrt.BalanceDebitCurncy;
                                                    postOrder.BalaceLocalBeforDebit = chrt.BalanceDebitLocal;
                                                    postOrder.BalaceCurrencyBeforCredit = chrt.BalanceCreditCurncy;
                                                    postOrder.BalaceLocalBeforCredit = chrt.BalanceCreditLocal;
                                                    MS_Currency cur = CurrencyService.GetById(bsReceiptNote.CurrencyId.Value);
                                                    if (cur != null)
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                }
                                                else
                                                {
                                                    Message = "عملة الحساب  غير موجود *** كود الحساب =  " + chrt.AccountCode +
                                                        " اسم الحساب = " + chrt.AccountNameA;
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                Message = "الحساب  غير موجود . . .";
                                                return false;
                                            }
                                        }
                                    }
                                    //else if (trDetails[0].AccCashDebitOrCredit != true && trDetails[0].AccDiscDebitOrCredit != true && trDetails[0].AccTaxDebitOrCredit!=true)
                                    //{
                                    //    Message = "الحساب  غير موجود بنوع السند  ";
                                    //    return false;
                                    //}
                                    if (trDetails[0].AddAccountIsFixed3 == 1)
                                    {
                                        postOrder.AccountId = trDetails[0].AddAccountId3.Value;
                                        if (trDetails[0].AddAcc3DebitOrCredit == true)
                                        {
                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsReceiptNote);
                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                        }
                                        else
                                        {
                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsReceiptNote);
                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                        }

                                        postOrder.HelpAccId = null;
                                        postOrder.IsHelpAcc = false;
                                        postOrder.HelpAccType = null;
                                    }
                                    else if (trDetails[0].AddAccountIsFixed3 == 2)
                                    {
                                        postOrder.AccountId = AnCode.AccountId.Value;
                                        if (trDetails[0].AddAcc3DebitOrCredit == true)
                                        {
                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsReceiptNote);
                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                        }
                                        else
                                        {
                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsReceiptNote);
                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                        }

                                        postOrder.HelpAccId = null;
                                        postOrder.IsHelpAcc = false;
                                        postOrder.HelpAccType = null;
                                    }
                                    else if (trDetails[0].AddAccountIsFixed3 == 0)
                                    {
                                        if (bsReceiptNote.RectSourceType.GetValueOrDefault(0) == 1 ||
                                    (bsReceiptNote.RectSourceType.GetValueOrDefault(0) >= 5 &&
                                    bsReceiptNote.RectSourceType.GetValueOrDefault(0) < 15))
                                        {
                                            if (lstCusAccs.Count == 0)
                                            {
                                                MessageBox = "العميل غير مربوط بحساب استاذ *** راجع مستند تعريف العميل   ";
                                                return false;
                                            }
                                            Cal_CustAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstCusAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف العميل *** راجع مستند تعريف العميل   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "العميل غير مربوط بحساب استاذ *** راجع مستند تعريف العميل   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.CustAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "MS_Customer";
                                            MS_Customer cust = CustomerService.GetById(CusAccs.CustomerId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                        if (trDetails[0].AddAcc3DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "العميل غير مرتبط بعمله *** راجع كارت العميل   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "العميل غير مرتبط بعمله *** راجع كارت العميل   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "العميل غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType.GetValueOrDefault(0) == 2 ||
                                            (bsReceiptNote.RectSourceType.GetValueOrDefault(0) >= 15 &&
                                            bsReceiptNote.RectSourceType.GetValueOrDefault(0) < 25))
                                        {
                                            if (lstVendAccs.Count == 0)
                                            {
                                                MessageBox = "المورد غير مربوط بحساب استاذ *** راجع مستند تعريف المورد   ";
                                                return false;
                                            }
                                            Cal_VendAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstVendAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف المورد *** راجع مستند تعريف المورد   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "المورد غير مربوط بحساب استاذ *** راجع مستند تعريف المورد   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.VendAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "MS_Vendor";
                                            MS_Vendor cust = VendorService.GetById(CusAccs.VendorId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                        if (trDetails[0].AddAcc3DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "المورد غير مرتبط بعمله *** راجع كارت المورد   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "المورد غير مرتبط بعمله *** راجع كارت المورد   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "المورد غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType == 4 || bsReceiptNote.RectSourceType == 35 ||
                                            (bsReceiptNote.RectSourceType >= 25 && bsReceiptNote.RectSourceType < 34))
                                        {
                                            if (lstEmpAccs.Count == 0)
                                            {
                                                MessageBox = "الموظف غير مربوط بحساب استاذ *** راجع مستند تعريف الموظف   ";
                                                return false;
                                            }
                                            Cal_EmpAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstEmpAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الموظف *** راجع مستند تعريف الموظف   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الموظف غير مربوط بحساب استاذ *** راجع مستند تعريف الموظف   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.EmpAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Hr_Employees";
                                            Hr_Employees cust = EmpService.GetById(CusAccs.EmpId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                        if (trDetails[0].AddAcc3DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الموظف غير مرتبط بعمله *** راجع كارت الموظف   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "الموظف غير مرتبط بعمله *** راجع كارت الموظف   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الموظف غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType == 36 || bsReceiptNote.RectSourceType == 37)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Prod_JobOrder";
                                            Prod_JobOrder cust = JobOrderService.GetById(CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AddAcc3DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AddAcc3DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType >= 38 && bsReceiptNote.RectSourceType <= 47)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Sr_Vehicles";
                                            Sr_Vehicles cust = VehiclesService.GetById(CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                //if (cust.CurrencyId.HasValue)
                                                //{
                                                //    MS_Currency cur = CurrencyService.GetById(tran,cust.CurrencyId.Value);
                                                //    if (cur != null)
                                                //    {
                                                //        postOrder.Rate = bsReceiptNote.Rate;
                                                //        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsReceiptNote);
                                                //        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                //    }
                                                //    else
                                                //    {
                                                //        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                //        return false;
                                                //    }
                                                //}
                                                //else
                                                //{
                                                if (LocalCurrency != null)
                                                {
                                                    postOrder.Rate = bsReceiptNote.Rate;

                                                    if (trDetails[0].AddAcc3DebitOrCredit == true)
                                                    {
                                                        postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsReceiptNote);
                                                        postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsReceiptNote);
                                                        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "خطأ بالعمله المحليه   ";
                                                    return false;
                                                }
                                                //}
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType >= 48 && bsReceiptNote.RectSourceType <= 50)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Sr_VehicleJobOrder";
                                            Sr_VehicleJobOrder cust = db.Sr_VehicleJobOrder.FirstOrDefault(x => x.VJOrderId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                //if (cust.CurrencyId.HasValue)
                                                //{
                                                //    MS_Currency cur = CurrencyService.GetById(tran,cust.CurrencyId.Value);
                                                //    if (cur != null)
                                                //    {
                                                //        postOrder.Rate = bsReceiptNote.Rate;
                                                //        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsReceiptNote);
                                                //        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                //    }
                                                //    else
                                                //    {
                                                //        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                //        return false;
                                                //    }
                                                //}
                                                //else
                                                //{
                                                if (LocalCurrency != null)
                                                {
                                                    postOrder.Rate = bsReceiptNote.Rate;

                                                    if (trDetails[0].AddAcc3DebitOrCredit == true)
                                                    {
                                                        postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsReceiptNote);
                                                        postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsReceiptNote);
                                                        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "خطأ بالعمله المحليه   ";
                                                    return false;
                                                }
                                                //}
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType >= 51 && bsReceiptNote.RectSourceType <= 60)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Ms_LetterOfGuarantee";
                                            Ms_LetterOfGuarantee cust = db.Ms_LetterOfGuarantee.FirstOrDefault(x => x.LetOfGrnteeId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AddAcc3DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AddAcc3DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType >= 61 && bsReceiptNote.RectSourceType <= 63)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Sr_JobOrder";
                                            Sr_JobOrder cust = db.Sr_JobOrder.FirstOrDefault(x => x.JorderId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AddAcc3DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AddAcc3DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType >= 64 && bsReceiptNote.RectSourceType <= 66)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Repair_JobOrder";
                                            Repair_JobOrder cust = db.Repair_JobOrder.FirstOrDefault(x => x.RepairId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AddAcc3DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AddAcc3DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType >= 67 && bsReceiptNote.RectSourceType <= 77)
                                        {
                                            if (lstAssets.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_AssetAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstAssets, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.AssetAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Asset_AssetCard";
                                            Asset_AssetCard cust = db.Asset_AssetCard.FirstOrDefault(x => x.AssetId == CusAccs.AssetId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AddAcc3DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AddAcc3DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType >= 78 && bsReceiptNote.RectSourceType <= 88)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Proj_Projects";
                                            Proj_Projects cust = db.Proj_Projects.FirstOrDefault(x => x.ProjectId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AddAcc3DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AddAcc3DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType == 34)
                                        {
                                            //postOrder.HelpAccId = CusAccs.EmpAccountId;
                                            postOrder.AccountId = chrtAccount.AccountId;
                                            postOrder.IsHelpAcc = false;
                                            //postOrder.HelpAccType = "Hr_Employees";
                                            //MS_Vendor cust = VendorService.GetById(CusAccs.EmpId.Value);
                                            if (chrtAccount != null)
                                            {
                                                if (chrtAccount.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(chrtAccount.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                        if (trDetails[0].AddAcc3DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الحساب غير مرتبط بعمله *** راجع دليل الحسابات   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "الحساب غير مرتبط بعمله *** راجع دليل الحسابات   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الحساب غير موجود   ";
                                                return false;
                                            }
                                        }
                                    }
                                    post.Add(postOrder);
                                }
                            #endregion

                            SkipCondition = false;
                            if (trDetails[0].AddAccountIsFixed4 == 2)
                            {
                                if (AnCode == null && trDetails[0].AnalaticalCodeMust.GetValueOrDefault(false))
                                {
                                    MessageBox = "الكود التحليلي اجبارى ";
                                    return false;
                                }
                                else if (AnCode == null)
                                {
                                    SkipCondition = true;
                                }
                            }
                            if (!SkipCondition)
                                #region AddAccount4 Account
                                // manage Tax account in doctype
                                if (trDetails[0].AddAccountIsFixed4.HasValue && !string.IsNullOrEmpty(trDetails[0].ValuAddAccount4))
                                {
                                    //if (post.Count == 0)
                                    Cal_PostOrder postOrder = new Cal_PostOrder(); postOrder.IsOpenningTerm = term.IsOpenningTerm;
                                    #region Cost Center
                                    if (trDetails[0].AddCostCenterId4.HasValue || trDetails[0].AddCostCenterIsFixed4 == 2)
                                    {
                                        Cal_CostCenters center = null;
                                        if (trDetails[0].AddCostCenterIsFixed4 == 1)
                                        {
                                            center = CostCentersService.GetById(trDetails[0].AddCostCenterId4.Value);
                                            postOrder.CostCenterId = trDetails[0].AddCostCenterId4;
                                            postOrder.HelpCostCenterId = null;
                                            postOrder.IsHelpCostCenter = false;
                                            postOrder.HelpCostCenterType = null;
                                        }
                                        else if (trDetails[0].AddCostCenterIsFixed4 == 2 && AnCode != null && AnCode.CostCenterId.GetValueOrDefault(0) != 0)
                                        {
                                            center = CostCentersService.GetById(AnCode.CostCenterId.Value);
                                            postOrder.CostCenterId = AnCode.CostCenterId;
                                            postOrder.HelpCostCenterId = null;
                                            postOrder.IsHelpCostCenter = false;
                                            postOrder.HelpCostCenterType = null;
                                        }
                                        else if (trDetails[0].AddCostCenterIsFixed4 == 0)
                                        {
                                            if (bsReceiptNote.RectSourceType.GetValueOrDefault(0) == 1 ||
                                 (bsReceiptNote.RectSourceType.GetValueOrDefault(0) >= 5 &&
                                 bsReceiptNote.RectSourceType.GetValueOrDefault(0) < 15))
                                            {
                                                MS_Customer cust = CustomerService.GetById(lstCusAccs[0].CustomerId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "MS_Customer";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 4 و العميل غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار العميل أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType.GetValueOrDefault(0) == 2 ||
                                          (bsReceiptNote.RectSourceType.GetValueOrDefault(0) >= 15 &&
                                          bsReceiptNote.RectSourceType.GetValueOrDefault(0) < 25))
                                            {
                                                MS_Vendor cust = VendorService.GetById(lstVendAccs[0].VendorId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "MS_Vendor";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 4 و المورد غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار المورد أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType == 4 || bsReceiptNote.RectSourceType == 35 ||
                                            (bsReceiptNote.RectSourceType >= 25 &&
                                            bsReceiptNote.RectSourceType < 34))
                                            {
                                                Hr_Employees cust = EmpService.GetById(lstEmpAccs[0].EmpId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId1.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId1;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId1;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Hr_Employees";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب  و الموظف غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار الموظف أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType == 36 || bsReceiptNote.RectSourceType == 37)
                                            {
                                                Prod_JobOrder cust = JobOrderService.GetById(lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Prod_JobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 4 و أمر الشغل غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر الشغل أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType >= 38 && bsReceiptNote.RectSourceType <= 47)
                                            {
                                                Sr_Vehicles cust = VehiclesService.GetById(lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Sr_Vehicles";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 4 و المركبه غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار المركبه أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType >= 48 && bsReceiptNote.RectSourceType <= 50)
                                            {
                                                Sr_VehicleJobOrder cust = db.Sr_VehicleJobOrder.FirstOrDefault(x => x.VJOrderId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Sr_VehicleJobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 4 و أمر الشغل غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر الشغل أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType >= 51 && bsReceiptNote.RectSourceType <= 60)
                                            {
                                                Ms_LetterOfGuarantee cust = db.Ms_LetterOfGuarantee.FirstOrDefault(x => x.LetOfGrnteeId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId1.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId1;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId1;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Ms_LetterOfGuarantee";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 4 و خطاب الضمان غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار خطاب الضمان أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType >= 61 && bsReceiptNote.RectSourceType <= 63)
                                            {
                                                Sr_JobOrder cust = db.Sr_JobOrder.FirstOrDefault(x => x.JorderId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Sr_JobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 4 و أمر صيانة مركبه غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر صيانة مركبه أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType >= 64 && bsReceiptNote.RectSourceType <= 66)
                                            {
                                                Repair_JobOrder cust = db.Repair_JobOrder.FirstOrDefault(x => x.RepairId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Repair_JobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 4 و أمر صيانة معدات غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر صيانة معدات أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType >= 67 && bsReceiptNote.RectSourceType <= 77)
                                            {
                                                Asset_AssetCard cust = db.Asset_AssetCard.FirstOrDefault(x => x.AssetId == lstAssets[0].AssetId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Asset_AssetCard";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 4 و الأصل الثابت غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار الأصل الثابت أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType >= 78 && bsReceiptNote.RectSourceType <= 88)
                                            {
                                                Proj_Projects cust = db.Proj_Projects.FirstOrDefault(x => x.ProjectId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId1.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId1;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId1;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Proj_Projects";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 4 و الأصل الثابت غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار الأصل الثابت أولا";
                                                    return false;
                                                }
                                            }
                                            //if (bsReceiptNote.RectSourceType == 34)
                                            //{
                                            //    if (chrtAccount.cos.CostCenterId1.HasValue)
                                            //        {
                                            //            center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                            //            postOrder.CostCenterId = cust.CostCenterId1;
                                            //            postOrder.HelpCostCenterId = cust.CostCenterId1;
                                            //            postOrder.IsHelpCostCenter = true;
                                            //            postOrder.HelpCostCenterType = "Hr_Employees";
                                            //        }
                                            //        else
                                            //        {
                                            //            Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب  و المورد غير مرتبط بمركز تكلفه";
                                            //            return false;
                                            //        }                                               
                                            //}
                                        }

                                        if (center != null)
                                        {
                                            if (center.CurrencyId.HasValue)
                                            {
                                                ////postOrder.CurrencyId = chrt.CurrencyId;
                                                postOrder.BalancCrencyBeforDebtCostCentr = center.BalanceDebitCurncy;
                                                postOrder.BalancLocalBeforDebCostCentr = center.BalanceDebitLocal;
                                                postOrder.BalancCrencyBeforCredCostCentr = center.BalanceCreditCurncy;
                                                postOrder.BalancLocalBeforCredCostCentr = center.BalanceCreditLocal;

                                            }
                                            else
                                            {
                                                Message = "عملة مركز التكلفه الحساب الاضافى 4 غير موجود *** كود مركز التكلفه =  " + center.CostCenterCode +
                                                    " اسم مركز التكلفه = " + center.CostCenterNameA;
                                                return false;
                                            }
                                        }

                                    }
                                    #endregion
                                    postOrder.TermId = term.TermId;
                                    postOrder.TableCode = tableNameHeader;
                                    postOrder.TableEntityId = bsReceiptNote.RectId;
                                    postOrder.IsPosted = false;
                                    postOrder.CurrencyId = bsReceiptNote.CurrencyId;
                                    if (trDetails[0].AddAccountId4.HasValue)
                                    {
                                        if (trDetails[0].AddAccountIsFixed4 == 1)
                                        {
                                            Cal_AccountChart chrt = Cal_AccountChart.GetById(trDetails[0].AddAccountId4.Value);
                                            if (chrt != null)
                                            {
                                                if (chrt.CurrencyId.HasValue)
                                                {
                                                    //postOrder.CurrencyId = chrt.CurrencyId;
                                                    //postOrder.BalaceCurrencyBefor = chrt.BalanceCurncy;
                                                    postOrder.BalaceCurrencyBeforDebit = chrt.BalanceDebitCurncy;
                                                    postOrder.BalaceLocalBeforDebit = chrt.BalanceDebitLocal;
                                                    postOrder.BalaceCurrencyBeforCredit = chrt.BalanceCreditCurncy;
                                                    postOrder.BalaceLocalBeforCredit = chrt.BalanceCreditLocal;
                                                    MS_Currency cur = CurrencyService.GetById(bsReceiptNote.CurrencyId.Value);
                                                    if (cur != null)
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                }
                                                else
                                                {
                                                    Message = "عملة الحساب  غير موجود *** كود الحساب =  " + chrt.AccountCode +
                                                        " اسم الحساب = " + chrt.AccountNameA;
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                Message = "الحساب  غير موجود . . .";
                                                return false;
                                            }
                                        }
                                        else if (trDetails[0].AddAccountIsFixed4 == 2)
                                        {
                                            if (AnCode == null || !AnCode.AccountId.HasValue)
                                            {
                                                Message = "الكود التحليلى أو الحساب المرتبط به غير صحيح . . .";
                                                return false;
                                            }
                                            Cal_AccountChart chrt = Cal_AccountChart.GetById(AnCode.AccountId.Value);
                                            if (chrt != null)
                                            {
                                                if (chrt.CurrencyId.HasValue)
                                                {
                                                    //postOrder.CurrencyId = chrt.CurrencyId;
                                                    postOrder.BalaceCurrencyBeforDebit = chrt.BalanceDebitCurncy;
                                                    postOrder.BalaceLocalBeforDebit = chrt.BalanceDebitLocal;
                                                    postOrder.BalaceCurrencyBeforCredit = chrt.BalanceCreditCurncy;
                                                    postOrder.BalaceLocalBeforCredit = chrt.BalanceCreditLocal;
                                                    MS_Currency cur = CurrencyService.GetById(bsReceiptNote.CurrencyId.Value);
                                                    if (cur != null)
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                }
                                                else
                                                {
                                                    Message = "عملة الحساب  غير موجود *** كود الحساب =  " + chrt.AccountCode +
                                                        " اسم الحساب = " + chrt.AccountNameA;
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                Message = "الحساب  غير موجود . . .";
                                                return false;
                                            }
                                        }
                                    }
                                    //else if (trDetails[0].AccCashDebitOrCredit != true && trDetails[0].AccDiscDebitOrCredit != true && trDetails[0].AccTaxDebitOrCredit!=true)
                                    //{
                                    //    Message = "الحساب  غير موجود بنوع السند  ";
                                    //    return false;
                                    //}
                                    if (trDetails[0].AddAccountIsFixed4 == 1)
                                    {
                                        postOrder.AccountId = trDetails[0].AddAccountId4.Value;
                                        if (trDetails[0].AddAcc4DebitOrCredit == true)
                                        {
                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsReceiptNote);
                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                        }
                                        else
                                        {
                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsReceiptNote);
                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                        }

                                        postOrder.HelpAccId = null;
                                        postOrder.IsHelpAcc = false;
                                        postOrder.HelpAccType = null;
                                    }
                                    else if (trDetails[0].AddAccountIsFixed4 == 2)
                                    {
                                        postOrder.AccountId = AnCode.AccountId.Value;
                                        if (trDetails[0].AddAcc4DebitOrCredit == true)
                                        {
                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsReceiptNote);
                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                        }
                                        else
                                        {
                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsReceiptNote);
                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                        }

                                        postOrder.HelpAccId = null;
                                        postOrder.IsHelpAcc = false;
                                        postOrder.HelpAccType = null;
                                    }
                                    else if (trDetails[0].AddAccountIsFixed4 == 0)
                                    {
                                        if (bsReceiptNote.RectSourceType.GetValueOrDefault(0) == 1 ||
                                    (bsReceiptNote.RectSourceType.GetValueOrDefault(0) >= 5 &&
                                    bsReceiptNote.RectSourceType.GetValueOrDefault(0) < 15))
                                        {
                                            if (lstCusAccs.Count == 0)
                                            {
                                                MessageBox = "العميل غير مربوط بحساب استاذ *** راجع مستند تعريف العميل   ";
                                                return false;
                                            }
                                            Cal_CustAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstCusAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف العميل *** راجع مستند تعريف العميل   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "العميل غير مربوط بحساب استاذ *** راجع مستند تعريف العميل   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.CustAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "MS_Customer";
                                            MS_Customer cust = CustomerService.GetById(CusAccs.CustomerId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                        if (trDetails[0].AddAcc4DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "العميل غير مرتبط بعمله *** راجع كارت العميل   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "العميل غير مرتبط بعمله *** راجع كارت العميل   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "العميل غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType.GetValueOrDefault(0) == 2 ||
                                            (bsReceiptNote.RectSourceType.GetValueOrDefault(0) >= 15 &&
                                            bsReceiptNote.RectSourceType.GetValueOrDefault(0) < 25))
                                        {
                                            if (lstVendAccs.Count == 0)
                                            {
                                                MessageBox = "المورد غير مربوط بحساب استاذ *** راجع مستند تعريف المورد   ";
                                                return false;
                                            }
                                            Cal_VendAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstVendAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف المورد *** راجع مستند تعريف المورد   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "المورد غير مربوط بحساب استاذ *** راجع مستند تعريف المورد   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.VendAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "MS_Vendor";
                                            MS_Vendor cust = VendorService.GetById(CusAccs.VendorId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                        if (trDetails[0].AddAcc4DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "المورد غير مرتبط بعمله *** راجع كارت المورد   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "المورد غير مرتبط بعمله *** راجع كارت المورد   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "المورد غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType == 4 || bsReceiptNote.RectSourceType == 35 ||
                                        (bsReceiptNote.RectSourceType >= 25 && bsReceiptNote.RectSourceType < 34))
                                        {
                                            if (lstEmpAccs.Count == 0)
                                            {
                                                MessageBox = "الموظف غير مربوط بحساب استاذ *** راجع مستند تعريف الموظف   ";
                                                return false;
                                            }
                                            Cal_EmpAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstEmpAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الموظف *** راجع مستند تعريف الموظف   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الموظف غير مربوط بحساب استاذ *** راجع مستند تعريف الموظف   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.EmpAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Hr_Employees";
                                            Hr_Employees cust = EmpService.GetById(CusAccs.EmpId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                        if (trDetails[0].AddAcc4DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الموظف غير مرتبط بعمله *** راجع كارت الموظف   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "الموظف غير مرتبط بعمله *** راجع كارت الموظف   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الموظف غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType == 36 || bsReceiptNote.RectSourceType == 37)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Prod_JobOrder";
                                            Prod_JobOrder cust = JobOrderService.GetById(CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AddAcc4DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AddAcc4DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType >= 38 && bsReceiptNote.RectSourceType <= 47)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Sr_Vehicles";
                                            Sr_Vehicles cust = VehiclesService.GetById(CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                //if (cust.CurrencyId.HasValue)
                                                //{
                                                //    MS_Currency cur = CurrencyService.GetById(tran,cust.CurrencyId.Value);
                                                //    if (cur != null)
                                                //    {
                                                //        postOrder.Rate = bsReceiptNote.Rate;
                                                //        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsReceiptNote);
                                                //        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                //    }
                                                //    else
                                                //    {
                                                //        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                //        return false;
                                                //    }
                                                //}
                                                //else
                                                //{
                                                if (LocalCurrency != null)
                                                {
                                                    postOrder.Rate = bsReceiptNote.Rate;

                                                    if (trDetails[0].AddAcc4DebitOrCredit == true)
                                                    {
                                                        postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsReceiptNote);
                                                        postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsReceiptNote);
                                                        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "خطأ بالعمله المحليه   ";
                                                    return false;
                                                }
                                                //}
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType >= 48 && bsReceiptNote.RectSourceType <= 50)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Sr_VehicleJobOrder";
                                            Sr_VehicleJobOrder cust = db.Sr_VehicleJobOrder.FirstOrDefault(x => x.VJOrderId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                //if (cust.CurrencyId.HasValue)
                                                //{
                                                //    MS_Currency cur = CurrencyService.GetById(tran,cust.CurrencyId.Value);
                                                //    if (cur != null)
                                                //    {
                                                //        postOrder.Rate = bsReceiptNote.Rate;
                                                //        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsReceiptNote);
                                                //        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                //    }
                                                //    else
                                                //    {
                                                //        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                //        return false;
                                                //    }
                                                //}
                                                //else
                                                //{
                                                if (LocalCurrency != null)
                                                {
                                                    postOrder.Rate = bsReceiptNote.Rate;

                                                    if (trDetails[0].AddAcc4DebitOrCredit == true)
                                                    {
                                                        postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsReceiptNote);
                                                        postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsReceiptNote);
                                                        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "خطأ بالعمله المحليه   ";
                                                    return false;
                                                }
                                                //}
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType >= 51 && bsReceiptNote.RectSourceType <= 60)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Ms_LetterOfGuarantee";
                                            Ms_LetterOfGuarantee cust = db.Ms_LetterOfGuarantee.FirstOrDefault(x => x.LetOfGrnteeId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AddAcc4DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AddAcc4DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType >= 61 && bsReceiptNote.RectSourceType <= 63)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Sr_JobOrder";
                                            Sr_JobOrder cust = db.Sr_JobOrder.FirstOrDefault(x => x.JorderId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AddAcc4DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AddAcc4DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType >= 64 && bsReceiptNote.RectSourceType <= 66)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Repair_JobOrder";
                                            Repair_JobOrder cust = db.Repair_JobOrder.FirstOrDefault(x => x.RepairId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AddAcc4DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AddAcc4DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType >= 67 && bsReceiptNote.RectSourceType <= 77)
                                        {
                                            if (lstAssets.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_AssetAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstAssets, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.AssetAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Asset_AssetCard";
                                            Asset_AssetCard cust = db.Asset_AssetCard.FirstOrDefault(x => x.AssetId == CusAccs.AssetId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AddAcc4DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AddAcc4DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType >= 78 && bsReceiptNote.RectSourceType <= 88)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Proj_Projects";
                                            Proj_Projects cust = db.Proj_Projects.FirstOrDefault(x => x.ProjectId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AddAcc4DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AddAcc4DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType == 34)
                                        {
                                            //postOrder.HelpAccId = CusAccs.EmpAccountId;
                                            postOrder.AccountId = chrtAccount.AccountId;
                                            postOrder.IsHelpAcc = false;
                                            //postOrder.HelpAccType = "Hr_Employees";
                                            //MS_Vendor cust = VendorService.GetById(CusAccs.EmpId.Value);
                                            if (chrtAccount != null)
                                            {
                                                if (chrtAccount.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(chrtAccount.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                        if (trDetails[0].AddAcc4DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الحساب غير مرتبط بعمله *** راجع دليل الحسابات   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "الحساب غير مرتبط بعمله *** راجع دليل الحسابات   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الحساب غير موجود   ";
                                                return false;
                                            }
                                        }
                                    }
                                    post.Add(postOrder);
                                }
                            #endregion

                            SkipCondition = false;
                            if (trDetails[0].AddAccountIsFixed5 == 2)
                            {
                                if (AnCode == null && trDetails[0].AnalaticalCodeMust.GetValueOrDefault(false))
                                {
                                    MessageBox = "الكود التحليلي اجبارى ";
                                    return false;
                                }
                                else if (AnCode == null)
                                {
                                    SkipCondition = true;
                                }
                            }
                            if (!SkipCondition)
                                #region AddAccount5 Account
                                // manage Tax account in doctype
                                if (trDetails[0].AddAccountIsFixed5.HasValue && !string.IsNullOrEmpty(trDetails[0].ValuAddAccount5))
                                {
                                    //if (post.Count == 0)
                                    Cal_PostOrder postOrder = new Cal_PostOrder(); postOrder.IsOpenningTerm = term.IsOpenningTerm;
                                    #region Cost Center
                                    if (trDetails[0].AddCostCenterId5.HasValue || trDetails[0].AddCostCenterIsFixed5 == 2)
                                    {
                                        Cal_CostCenters center = null;
                                        if (trDetails[0].AddCostCenterIsFixed5 == 1)
                                        {
                                            center = CostCentersService.GetById(trDetails[0].AddCostCenterId5.Value);
                                            postOrder.CostCenterId = trDetails[0].AddCostCenterId5;
                                            postOrder.HelpCostCenterId = null;
                                            postOrder.IsHelpCostCenter = false;
                                            postOrder.HelpCostCenterType = null;
                                        }
                                        else if (trDetails[0].AddCostCenterIsFixed5 == 2 && AnCode != null && AnCode.CostCenterId.GetValueOrDefault(0) != 0)
                                        {
                                            center = CostCentersService.GetById(AnCode.CostCenterId.Value);
                                            postOrder.CostCenterId = AnCode.CostCenterId;
                                            postOrder.HelpCostCenterId = null;
                                            postOrder.IsHelpCostCenter = false;
                                            postOrder.HelpCostCenterType = null;
                                        }
                                        else if (trDetails[0].AddCostCenterIsFixed5 == 0)
                                        {
                                            if (bsReceiptNote.RectSourceType.GetValueOrDefault(0) == 1 ||
                                  (bsReceiptNote.RectSourceType.GetValueOrDefault(0) >= 5 &&
                                  bsReceiptNote.RectSourceType.GetValueOrDefault(0) < 15))
                                            {
                                                MS_Customer cust = CustomerService.GetById(lstCusAccs[0].CustomerId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "MS_Customer";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 5 و العميل غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار العميل أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType.GetValueOrDefault(0) == 2 ||
                                        (bsReceiptNote.RectSourceType.GetValueOrDefault(0) >= 15 &&
                                        bsReceiptNote.RectSourceType.GetValueOrDefault(0) < 25))
                                            {
                                                MS_Vendor cust = VendorService.GetById(lstVendAccs[0].VendorId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "MS_Vendor";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 5 و المورد غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار المورد أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType == 4 || bsReceiptNote.RectSourceType == 35 ||
                                   (bsReceiptNote.RectSourceType >= 25 &&
                                   bsReceiptNote.RectSourceType < 34))
                                            {
                                                Hr_Employees cust = EmpService.GetById(lstEmpAccs[0].EmpId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId1.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId1;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId1;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Hr_Employees";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب  و الموظف غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار الموظف أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType == 36 || bsReceiptNote.RectSourceType == 37)
                                            {
                                                Prod_JobOrder cust = JobOrderService.GetById(lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Prod_JobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 5 و أمر الشغل غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر الشغل أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType >= 38 && bsReceiptNote.RectSourceType <= 47)
                                            {
                                                Sr_Vehicles cust = VehiclesService.GetById(lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Sr_Vehicles";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 5 و المركبه غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار المركبه أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType >= 48 && bsReceiptNote.RectSourceType <= 50)
                                            {
                                                Sr_VehicleJobOrder cust = db.Sr_VehicleJobOrder.FirstOrDefault(x => x.VJOrderId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Sr_VehicleJobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 5 و أمر الشغل غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر الشغل أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType >= 51 && bsReceiptNote.RectSourceType <= 60)
                                            {
                                                Ms_LetterOfGuarantee cust = db.Ms_LetterOfGuarantee.FirstOrDefault(x => x.LetOfGrnteeId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId1.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId1;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId1;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Ms_LetterOfGuarantee";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 5 و خطاب الضمان غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار خطاب الضمان أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType >= 61 && bsReceiptNote.RectSourceType <= 63)
                                            {
                                                Sr_JobOrder cust = db.Sr_JobOrder.FirstOrDefault(x => x.JorderId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Sr_JobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 5 و أمر صيانة مركبه غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر صيانة مركبه أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType >= 64 && bsReceiptNote.RectSourceType <= 66)
                                            {
                                                Repair_JobOrder cust = db.Repair_JobOrder.FirstOrDefault(x => x.RepairId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Repair_JobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 5 و أمر صيانة معدات غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر صيانة معدات أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType >= 67 && bsReceiptNote.RectSourceType <= 77)
                                            {
                                                Asset_AssetCard cust = db.Asset_AssetCard.FirstOrDefault(x => x.AssetId == lstAssets[0].AssetId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Asset_AssetCard";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 5 و الأصل الثابت غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار الأصل الثابت أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsReceiptNote.RectSourceType >= 78 && bsReceiptNote.RectSourceType <= 88)
                                            {
                                                Proj_Projects cust = db.Proj_Projects.FirstOrDefault(x => x.ProjectId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId1.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId1;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId1;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Proj_Projects";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 5 و الأصل الثابت غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار الأصل الثابت أولا";
                                                    return false;
                                                }
                                            }
                                            //if (bsReceiptNote.RectSourceType == 34)
                                            //{
                                            //    if (chrtAccount.cos.CostCenterId1.HasValue)
                                            //        {
                                            //            center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                            //            postOrder.CostCenterId = cust.CostCenterId1;
                                            //            postOrder.HelpCostCenterId = cust.CostCenterId1;
                                            //            postOrder.IsHelpCostCenter = true;
                                            //            postOrder.HelpCostCenterType = "Hr_Employees";
                                            //        }
                                            //        else
                                            //        {
                                            //            Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب  و المورد غير مرتبط بمركز تكلفه";
                                            //            return false;
                                            //        }                                               
                                            //}
                                        }

                                        if (center != null)
                                        {
                                            if (center.CurrencyId.HasValue)
                                            {
                                                ////postOrder.CurrencyId = chrt.CurrencyId;
                                                postOrder.BalancCrencyBeforDebtCostCentr = center.BalanceDebitCurncy;
                                                postOrder.BalancLocalBeforDebCostCentr = center.BalanceDebitLocal;
                                                postOrder.BalancCrencyBeforCredCostCentr = center.BalanceCreditCurncy;
                                                postOrder.BalancLocalBeforCredCostCentr = center.BalanceCreditLocal;

                                            }
                                            else
                                            {
                                                Message = "عملة مركز التكلفه الحساب الاضافى 5 غير موجود *** كود مركز التكلفه =  " + center.CostCenterCode +
                                                    " اسم مركز التكلفه = " + center.CostCenterNameA;
                                                return false;
                                            }
                                        }

                                    }
                                    #endregion

                                    postOrder.TermId = term.TermId;
                                    postOrder.TableCode = tableNameHeader;
                                    postOrder.TableEntityId = bsReceiptNote.RectId;
                                    postOrder.IsPosted = false;
                                    postOrder.CurrencyId = bsReceiptNote.CurrencyId;
                                    if (trDetails[0].AddAccountId5.HasValue)
                                    {
                                        if (trDetails[0].AddAccountIsFixed5 == 1)
                                        {
                                            Cal_AccountChart chrt = Cal_AccountChart.GetById(trDetails[0].AddAccountId5.Value);
                                            if (chrt != null)
                                            {
                                                if (chrt.CurrencyId.HasValue)
                                                {
                                                    //postOrder.CurrencyId = chrt.CurrencyId;
                                                    //postOrder.BalaceCurrencyBefor = chrt.BalanceCurncy;
                                                    postOrder.BalaceCurrencyBeforDebit = chrt.BalanceDebitCurncy;
                                                    postOrder.BalaceLocalBeforDebit = chrt.BalanceDebitLocal;
                                                    postOrder.BalaceCurrencyBeforCredit = chrt.BalanceCreditCurncy;
                                                    postOrder.BalaceLocalBeforCredit = chrt.BalanceCreditLocal;
                                                    MS_Currency cur = CurrencyService.GetById(bsReceiptNote.CurrencyId.Value);
                                                    if (cur != null)
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                }
                                                else
                                                {
                                                    Message = "عملة الحساب  غير موجود *** كود الحساب =  " + chrt.AccountCode +
                                                        " اسم الحساب = " + chrt.AccountNameA;
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                Message = "الحساب  غير موجود . . .";
                                                return false;
                                            }
                                        }
                                        else if (trDetails[0].AddAccountIsFixed5 == 2)
                                        {
                                            if (AnCode == null || !AnCode.AccountId.HasValue)
                                            {
                                                Message = "الكود التحليلى أو الحساب المرتبط به غير صحيح . . .";
                                                return false;
                                            }
                                            Cal_AccountChart chrt = Cal_AccountChart.GetById(AnCode.AccountId.Value);
                                            if (chrt != null)
                                            {
                                                if (chrt.CurrencyId.HasValue)
                                                {
                                                    //postOrder.CurrencyId = chrt.CurrencyId;
                                                    postOrder.BalaceCurrencyBeforDebit = chrt.BalanceDebitCurncy;
                                                    postOrder.BalaceLocalBeforDebit = chrt.BalanceDebitLocal;
                                                    postOrder.BalaceCurrencyBeforCredit = chrt.BalanceCreditCurncy;
                                                    postOrder.BalaceLocalBeforCredit = chrt.BalanceCreditLocal;
                                                    MS_Currency cur = CurrencyService.GetById(bsReceiptNote.CurrencyId.Value);
                                                    if (cur != null)
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                }
                                                else
                                                {
                                                    Message = "عملة الحساب  غير موجود *** كود الحساب =  " + chrt.AccountCode +
                                                        " اسم الحساب = " + chrt.AccountNameA;
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                Message = "الحساب  غير موجود . . .";
                                                return false;
                                            }
                                        }
                                    }
                                    //else if (trDetails[0].AccCashDebitOrCredit != true && trDetails[0].AccDiscDebitOrCredit != true && trDetails[0].AccTaxDebitOrCredit!=true)
                                    //{
                                    //    Message = "الحساب  غير موجود بنوع السند  ";
                                    //    return false;
                                    //}
                                    if (trDetails[0].AddAccountIsFixed5 == 1)
                                    {
                                        postOrder.AccountId = trDetails[0].AddAccountId5.Value;
                                        if (trDetails[0].AddAcc5DebitOrCredit == true)
                                        {
                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsReceiptNote);
                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                        }
                                        else
                                        {
                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsReceiptNote);
                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                        }

                                        postOrder.HelpAccId = null;
                                        postOrder.IsHelpAcc = false;
                                        postOrder.HelpAccType = null;
                                    }
                                    else if (trDetails[0].AddAccountIsFixed5 == 2)
                                    {
                                        postOrder.AccountId = AnCode.AccountId.Value;
                                        if (trDetails[0].AddAcc5DebitOrCredit == true)
                                        {
                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsReceiptNote);
                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                        }
                                        else
                                        {
                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsReceiptNote);
                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                        }

                                        postOrder.HelpAccId = null;
                                        postOrder.IsHelpAcc = false;
                                        postOrder.HelpAccType = null;
                                    }
                                    else if (trDetails[0].AddAccountIsFixed5 == 0)
                                    {
                                        if (bsReceiptNote.RectSourceType.GetValueOrDefault(0) == 1 ||
                                   (bsReceiptNote.RectSourceType.GetValueOrDefault(0) >= 5 &&
                                   bsReceiptNote.RectSourceType.GetValueOrDefault(0) < 15))
                                        {
                                            if (lstCusAccs.Count == 0)
                                            {
                                                MessageBox = "العميل غير مربوط بحساب استاذ *** راجع مستند تعريف العميل   ";
                                                return false;
                                            }
                                            Cal_CustAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstCusAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف العميل *** راجع مستند تعريف العميل   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "العميل غير مربوط بحساب استاذ *** راجع مستند تعريف العميل   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.CustAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "MS_Customer";
                                            MS_Customer cust = CustomerService.GetById(CusAccs.CustomerId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                        if (trDetails[0].AddAcc5DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "العميل غير مرتبط بعمله *** راجع كارت العميل   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "العميل غير مرتبط بعمله *** راجع كارت العميل   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "العميل غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType.GetValueOrDefault(0) == 2 ||
                                           (bsReceiptNote.RectSourceType.GetValueOrDefault(0) >= 15 &&
                                           bsReceiptNote.RectSourceType.GetValueOrDefault(0) < 25))
                                        {
                                            if (lstVendAccs.Count == 0)
                                            {
                                                MessageBox = "المورد غير مربوط بحساب استاذ *** راجع مستند تعريف المورد   ";
                                                return false;
                                            }
                                            Cal_VendAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstVendAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف المورد *** راجع مستند تعريف المورد   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "المورد غير مربوط بحساب استاذ *** راجع مستند تعريف المورد   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.VendAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "MS_Vendor";
                                            MS_Vendor cust = VendorService.GetById(CusAccs.VendorId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                        if (trDetails[0].AddAcc5DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "المورد غير مرتبط بعمله *** راجع كارت المورد   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "المورد غير مرتبط بعمله *** راجع كارت المورد   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "المورد غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType == 4 || bsReceiptNote.RectSourceType == 35 ||
                                          (bsReceiptNote.RectSourceType >= 25 && bsReceiptNote.RectSourceType < 34))
                                        {
                                            if (lstEmpAccs.Count == 0)
                                            {
                                                MessageBox = "الموظف غير مربوط بحساب استاذ *** راجع مستند تعريف الموظف   ";
                                                return false;
                                            }
                                            Cal_EmpAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstEmpAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الموظف *** راجع مستند تعريف الموظف   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الموظف غير مربوط بحساب استاذ *** راجع مستند تعريف الموظف   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.EmpAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Hr_Employees";
                                            Hr_Employees cust = EmpService.GetById(CusAccs.EmpId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                        if (trDetails[0].AddAcc5DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الموظف غير مرتبط بعمله *** راجع كارت الموظف   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "الموظف غير مرتبط بعمله *** راجع كارت الموظف   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الموظف غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType == 36 || bsReceiptNote.RectSourceType == 37)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Prod_JobOrder";
                                            Prod_JobOrder cust = JobOrderService.GetById(CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AddAcc5DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AddAcc5DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType >= 38 && bsReceiptNote.RectSourceType <= 47)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Sr_Vehicles";
                                            Sr_Vehicles cust = VehiclesService.GetById(CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                //if (cust.CurrencyId.HasValue)
                                                //{
                                                //    MS_Currency cur = CurrencyService.GetById(tran,cust.CurrencyId.Value);
                                                //    if (cur != null)
                                                //    {
                                                //        postOrder.Rate = bsReceiptNote.Rate;
                                                //        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsReceiptNote);
                                                //        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                //    }
                                                //    else
                                                //    {
                                                //        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                //        return false;
                                                //    }
                                                //}
                                                //else
                                                //{
                                                if (LocalCurrency != null)
                                                {
                                                    postOrder.Rate = bsReceiptNote.Rate;

                                                    if (trDetails[0].AddAcc5DebitOrCredit == true)
                                                    {
                                                        postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsReceiptNote);
                                                        postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsReceiptNote);
                                                        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "خطأ بالعمله المحليه   ";
                                                    return false;
                                                }
                                                //}
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType >= 48 && bsReceiptNote.RectSourceType <= 50)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Sr_VehicleJobOrder";
                                            Sr_VehicleJobOrder cust = db.Sr_VehicleJobOrder.FirstOrDefault(x => x.VJOrderId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                //if (cust.CurrencyId.HasValue)
                                                //{
                                                //    MS_Currency cur = CurrencyService.GetById(tran,cust.CurrencyId.Value);
                                                //    if (cur != null)
                                                //    {
                                                //        postOrder.Rate = bsReceiptNote.Rate;
                                                //        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsReceiptNote);
                                                //        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                //    }
                                                //    else
                                                //    {
                                                //        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                //        return false;
                                                //    }
                                                //}
                                                //else
                                                //{
                                                if (LocalCurrency != null)
                                                {
                                                    postOrder.Rate = bsReceiptNote.Rate;

                                                    if (trDetails[0].AddAcc5DebitOrCredit == true)
                                                    {
                                                        postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsReceiptNote);
                                                        postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsReceiptNote);
                                                        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "خطأ بالعمله المحليه   ";
                                                    return false;
                                                }
                                                //}
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType >= 51 && bsReceiptNote.RectSourceType <= 60)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Ms_LetterOfGuarantee";
                                            Ms_LetterOfGuarantee cust = db.Ms_LetterOfGuarantee.FirstOrDefault(x => x.LetOfGrnteeId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AddAcc5DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AddAcc5DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType >= 61 && bsReceiptNote.RectSourceType <= 63)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Sr_JobOrder";
                                            Sr_JobOrder cust = db.Sr_JobOrder.FirstOrDefault(x => x.JorderId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AddAcc5DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AddAcc5DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType >= 64 && bsReceiptNote.RectSourceType <= 66)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Repair_JobOrder";
                                            Repair_JobOrder cust = db.Repair_JobOrder.FirstOrDefault(x => x.RepairId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AddAcc5DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AddAcc5DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType >= 67 && bsReceiptNote.RectSourceType <= 77)
                                        {
                                            if (lstAssets.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_AssetAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstAssets, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.AssetAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Asset_AssetCard";
                                            Asset_AssetCard cust = db.Asset_AssetCard.FirstOrDefault(x => x.AssetId == CusAccs.AssetId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AddAcc5DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AddAcc5DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType >= 78 && bsReceiptNote.RectSourceType <= 88)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsReceiptNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsReceiptNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Proj_Projects";
                                            Proj_Projects cust = db.Proj_Projects.FirstOrDefault(x => x.ProjectId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AddAcc5DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;

                                                        if (trDetails[0].AddAcc5DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsReceiptNote.RectSourceType == 34)
                                        {
                                            //postOrder.HelpAccId = CusAccs.EmpAccountId;
                                            postOrder.AccountId = chrtAccount.AccountId;
                                            postOrder.IsHelpAcc = false;
                                            //postOrder.HelpAccType = "Hr_Employees";
                                            //MS_Vendor cust = VendorService.GetById(CusAccs.EmpId.Value);
                                            if (chrtAccount != null)
                                            {
                                                if (chrtAccount.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(chrtAccount.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsReceiptNote.Rate;
                                                        if (trDetails[0].AddAcc5DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsReceiptNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsReceiptNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الحساب غير مرتبط بعمله *** راجع دليل الحسابات   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "الحساب غير مرتبط بعمله *** راجع دليل الحسابات   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الحساب غير موجود   ";
                                                return false;
                                            }
                                        }
                                    }
                                    post.Add(postOrder);
                                }
                            #endregion
                        }
                    }
                }
            }

            //}
            if (post.Count > 0)
            {
                decimal totaldebit = 0;
                decimal totalredit = 0;
                for (int i = 0; i < post.Count; i++)
                {
                    totaldebit += post[i].DebitLocal.GetValueOrDefault(0);
                    totalredit += post[i].CreditLocal.GetValueOrDefault(0);
                    if (!post[i].CurrencyId.HasValue)
                        if (bsReceiptNote.CurrencyId.HasValue)
                            post[i].CurrencyId = bsReceiptNote.CurrencyId;
                        else post[i].CurrencyId = LocalCurrency.CurrencyId;
                }
                //if (totaldebit != 0 && totalredit != 0)
                //{
                //    if (Math.Floor(totalredit) == Math.Floor(totaldebit))
                //        valid = true;
                //    else
                //    {
                //        Message = "الجانب المدين و الدائن غير متساويان*** راجع نوع المستند";
                //        //MessageBox = "حساب المورد غير موجود   ";
                //        return false;
                //    }
                //}

                for (int i = 0; i < post.Count; i++)
                {
                    if (post[i].CostCenterId.HasValue && post[i].CostCenterId != 0)
                    {
                        if (post[i].DebitLocal.GetValueOrDefault(0) > 0)
                        {
                            bsReceiptNote.TermCostCenterId = post[i].CostCenterId;
                            bsReceiptNote.TermCostCenterValue = post[i].DebitLocal;

                            //////// Edit By Abdulrahman
                            //DataRepository.MsReceiptNoteProvider.Save(bsReceiptNote as Ms_ReceiptNote);
                            break;
                        }
                        if (post[i].CreditLocal.GetValueOrDefault(0) > 0)
                        {
                            bsReceiptNote.TermCostCenterId = post[i].CostCenterId;
                            bsReceiptNote.TermCostCenterValue = post[i].CreditLocal;

                            //////// Edit By Abdulrahman
                            //DataRepository.MsReceiptNoteProvider.Save(bsReceiptNote as Ms_ReceiptNote);
                            break;
                        }
                    }
                }
                if (totaldebit != 0 && totalredit != 0)
                {
                    //decimal num1 = Math.Floor(totalredit);
                    //decimal num2 = Math.Floor(totaldebit);
                    //if (Math.Floor(totalredit) == Math.Floor(totaldebit))
                    //    valid = true;
                    if (totalredit == totaldebit)
                        valid = true;
                    else
                    {
                        decimal diff = 0;
                        //bool ValidEquality = false;
                        if (totaldebit > totalredit)
                        {
                            diff = totaldebit - totalredit;
                            decimal converted = Convert.ToDecimal(0.5);
                            if (diff > converted)
                            {
                                Message = "الجانب المدين و الدائن غير متساويان*** راجع نوع المستند" + "\n\n" + " اجمالى مدين = " + decimal.Round(totaldebit, (int)Setting.AccountsDecimals).ToString() +
                                                   "\n\n" + "اجمالى دائن = " + decimal.Round(totalredit, (int)Setting.AccountsDecimals).ToString();
                                return false;
                                //ValidEquality = false;
                            }
                            else
                            {
                                for (int i = 0; i < post.Count; i++)
                                {
                                    if (post[i].CreditLocal.GetValueOrDefault(0) > 0)
                                    {
                                        post[i].CreditLocal += diff;
                                        Message = "قام البرنامج بعمل تسويه بقيمة " + decimal.Round(diff, (int)Setting.AccountsDecimals).ToString() + "  من العمله المحليه فى الجانب الدائن";
                                        valid = true;
                                        break;
                                    }
                                }
                            }
                        }
                        else if (totalredit > totaldebit)
                        {
                            diff = totalredit - totaldebit;
                            decimal converted = Convert.ToDecimal(0.5);
                            if (diff > converted)
                            {
                                Message = "الجانب المدين و الدائن غير متساويان*** راجع نوع المستند" + "\n\n" + " اجمالى مدين = " + decimal.Round(totaldebit, (int)Setting.AccountsDecimals).ToString() +
                                                   "\n\n" + "اجمالى دائن = " + decimal.Round(totalredit, (int)Setting.AccountsDecimals).ToString();
                                return false;
                                //ValidEquality = false;
                            }
                            else
                            {
                                for (int i = 0; i < post.Count; i++)
                                {
                                    if (post[i].DebitLocal.GetValueOrDefault(0) > 0)
                                    {
                                        post[i].DebitLocal += diff;
                                        Message = "قام البرنامج بعمل تسويه بقيمة " + decimal.Round(diff, (int)Setting.AccountsDecimals).ToString() + "  من العمله المحليه فى الجانب المدين";
                                        valid = true;
                                        break;
                                    }
                                }
                            }
                        }
                        //else ValidEquality = true;                      
                    }
                }
                else
                {
                    Message = "الجانب المدين و الدائن = 0";
                    //MessageBox = "حساب المورد غير موجود   ";
                    return false;
                }
            }
            //if (SaveAccounts(post) == null)
            //    valid = false;

            //Edit By Abdulrahman
            //post = AccountingEngine.SaveAccounts(post, bsReceiptNote.CurrencyId.HasValue ? bsReceiptNote.CurrencyId : LocalCurrency.CurrencyId);
            //End Edit By Abdulrahman

            if (post == null) return false;
            if (post.Count == 0) return false;
            for (int Ipost = 0; Ipost < post.Count; Ipost++)
            {
                post[Ipost].FinancialIntervalsId = FinancialIntervalsId;
                if (post[Ipost].CreditLocal.GetValueOrDefault(0) == 0 && post[Ipost].DebitLocal.GetValueOrDefault(0) == 0)
                {
                    post.Remove(post[Ipost]);
                    Ipost--;
                }
            }
            //foreach (Cal_PostOrder cal in post)
            //{
            //    if (cal.CreditLocal.GetValueOrDefault(0) == 0 && cal.DebitLocal.GetValueOrDefault(0) == 0)
            //        post.Remove(cal);
            //}

            PostOrderService.InsertList(post);
            return valid;
        }

        private Cal_AssetAccounts GetCustHelpEntity(int ResourcType, List<Cal_AssetAccounts> lstAssetAcc, Ms_ReceiptNote bsReceiptNote)
        {
            Cal_AssetAccounts NewCustAccount = null;
            switch (ResourcType)
            {
                case 67:
                    NewCustAccount = lstAssetAcc.Find(MatchEntityCalAsset("BasicAccCode"));
                    break;
                case 68:
                    NewCustAccount = lstAssetAcc.Find(MatchEntityCalAsset("AddAccountCode1"));
                    break;
                case 69:
                    NewCustAccount = lstAssetAcc.Find(MatchEntityCalAsset("AddAccountCode2"));
                    break;
                case 70:
                    NewCustAccount = lstAssetAcc.Find(MatchEntityCalAsset("AddAccountCode3"));
                    break;
                case 71:
                    NewCustAccount = lstAssetAcc.Find(MatchEntityCalAsset("AddAccountCode4"));
                    break;
                case 72:
                    NewCustAccount = lstAssetAcc.Find(MatchEntityCalAsset("AddAccountCode5"));
                    break;
                case 73:
                    NewCustAccount = lstAssetAcc.Find(MatchEntityCalAsset("AddAccountCode6"));
                    break;
                case 74:
                    NewCustAccount = lstAssetAcc.Find(MatchEntityCalAsset("AddAccountCode7"));
                    break;
                case 75:
                    NewCustAccount = lstAssetAcc.Find(MatchEntityCalAsset("AddAccountCode8"));
                    break;
                case 76:
                    NewCustAccount = lstAssetAcc.Find(MatchEntityCalAsset("AddAccountCode9"));
                    break;
                case 77:
                    NewCustAccount = lstAssetAcc.Find(MatchEntityCalAsset("AddAccountCode10"));
                    break;
            }
            if (NewCustAccount != null && bsReceiptNote != null)
            {
                bsReceiptNote.DBTableName = "Cal_AssetAccounts";
                bsReceiptNote.DBTableId = NewCustAccount.AssetAccountId;
            }
            return NewCustAccount;
        }

        private Cal_BusinessPartnerAccounts GetCustHelpEntity(int ResourcType, List<Cal_BusinessPartnerAccounts> lstBusinessPartner, Ms_ReceiptNote bsReceiptNote)
        {
            Cal_BusinessPartnerAccounts NewCustAccount = null;
            switch (ResourcType)
            {
                case 36:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("BasicAccCode"));
                    break;
                case 37:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("AddAccountCode1"));
                    break;
                case 38:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("BasicAccCode"));
                    break;
                case 39:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("AddAccountCode1"));
                    break;
                case 40:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("AddAccountCode2"));
                    break;
                case 41:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("AddAccountCode3"));
                    break;
                case 42:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("AddAccountCode4"));
                    break;
                case 43:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("AddAccountCode5"));
                    break;
                case 44:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("AddAccountCode6"));
                    break;
                case 45:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("AddAccountCode7"));
                    break;
                case 46:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("AddAccountCode8"));
                    break;
                case 47:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("AddAccountCode9"));
                    break;
                case 48:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("BasicAccCode"));
                    break;
                case 49:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("AddAccountCode1"));
                    break;
                case 50:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("AddAccountCode2"));
                    break;
                case 51:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("BasicAccCode"));
                    break;
                case 52:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("AddAccountCode1"));
                    break;
                case 53:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("AddAccountCode2"));
                    break;
                case 54:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("AddAccountCode3"));
                    break;
                case 55:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("AddAccountCode4"));
                    break;
                case 56:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("AddAccountCode5"));
                    break;
                case 57:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("AddAccountCode6"));
                    break;
                case 58:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("AddAccountCode7"));
                    break;
                case 59:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("AddAccountCode8"));
                    break;
                case 60:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("AddAccountCode9"));
                    break;
                case 61:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("BasicAccCode"));
                    break;
                case 62:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("AddAccountCode1"));
                    break;
                case 63:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("AddAccountCode2"));
                    break;
                case 64:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("BasicAccCode"));
                    break;
                case 65:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("AddAccountCode1"));
                    break;
                case 66:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("AddAccountCode2"));
                    break;
                case 78:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("BasicAccCode"));
                    break;
                case 79:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("AddAccountCode1"));
                    break;
                case 80:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("AddAccountCode2"));
                    break;
                case 81:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("AddAccountCode3"));
                    break;
                case 82:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("AddAccountCode4"));
                    break;
                case 83:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("AddAccountCode5"));
                    break;
                case 84:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("AddAccountCode6"));
                    break;
                case 85:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("AddAccountCode7"));
                    break;
                case 86:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("AddAccountCode8"));
                    break;
                case 87:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("AddAccountCode9"));
                    break;
                case 88:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("AddAccountCode10"));
                    break;
            }
            if (NewCustAccount != null && bsReceiptNote != null)
            {
                bsReceiptNote.DBTableName = "Cal_BusinessPartnerAccounts";
                bsReceiptNote.DBTableId = NewCustAccount.BusinessPartnerAccId;
            }
            return NewCustAccount;
        }

        private Cal_CustAccounts GetCustHelpEntity(int ResourcType, List<Cal_CustAccounts> lstCalCust, Ms_ReceiptNote bsReceiptNote)
        {
            Cal_CustAccounts NewCustAccount = null;
            switch (ResourcType)
            {
                case 1:
                    NewCustAccount = lstCalCust.Find(MatchEntityCalCust("BasicAccCode"));
                    break;
                case 5:
                    NewCustAccount = lstCalCust.Find(MatchEntityCalCust("AddAccountCode1"));
                    break;
                case 6:
                    NewCustAccount = lstCalCust.Find(MatchEntityCalCust("AddAccountCode2"));
                    break;
                case 7:
                    NewCustAccount = lstCalCust.Find(MatchEntityCalCust("AddAccountCode3"));
                    break;
                case 8:
                    NewCustAccount = lstCalCust.Find(MatchEntityCalCust("AddAccountCode4"));
                    break;
                case 9:
                    NewCustAccount = lstCalCust.Find(MatchEntityCalCust("AddAccountCode5"));
                    break;
                case 10:
                    NewCustAccount = lstCalCust.Find(MatchEntityCalCust("AddAccountCode6"));
                    break;
                case 11:
                    NewCustAccount = lstCalCust.Find(MatchEntityCalCust("AddAccountCode7"));
                    break;
                case 12:
                    NewCustAccount = lstCalCust.Find(MatchEntityCalCust("AddAccountCode8"));
                    break;
                case 13:
                    NewCustAccount = lstCalCust.Find(MatchEntityCalCust("AddAccountCode9"));
                    break;
                case 14:
                    NewCustAccount = lstCalCust.Find(MatchEntityCalCust("AddAccountCode10"));
                    break;
            }
            if (NewCustAccount != null && bsReceiptNote != null)
            {
                bsReceiptNote.DBTableName = "Cal_CustAccounts";
                bsReceiptNote.DBTableId = NewCustAccount.CustAccountId;
            }
            return NewCustAccount;
        }

        private Cal_VendAccounts GetCustHelpEntity(int ResourcType, List<Cal_VendAccounts> lstCalVend, Ms_ReceiptNote bsReceiptNote)
        {
            Cal_VendAccounts NewCustAccount = null;
            switch (ResourcType)
            {
                case 2:
                    NewCustAccount = lstCalVend.Find(MatchEntityCalVend("BasicAccCode"));
                    break;
                case 15:
                    NewCustAccount = lstCalVend.Find(MatchEntityCalVend("AddAccountCode1"));
                    break;
                case 16:
                    NewCustAccount = lstCalVend.Find(MatchEntityCalVend("AddAccountCode2"));
                    break;
                case 17:
                    NewCustAccount = lstCalVend.Find(MatchEntityCalVend("AddAccountCode3"));
                    break;
                case 18:
                    NewCustAccount = lstCalVend.Find(MatchEntityCalVend("AddAccountCode4"));
                    break;
                case 19:
                    NewCustAccount = lstCalVend.Find(MatchEntityCalVend("AddAccountCode5"));
                    break;
                case 20:
                    NewCustAccount = lstCalVend.Find(MatchEntityCalVend("AddAccountCode6"));
                    break;
                case 21:
                    NewCustAccount = lstCalVend.Find(MatchEntityCalVend("AddAccountCode7"));
                    break;
                case 22:
                    NewCustAccount = lstCalVend.Find(MatchEntityCalVend("AddAccountCode8"));
                    break;
                case 23:
                    NewCustAccount = lstCalVend.Find(MatchEntityCalVend("AddAccountCode9"));
                    break;
                case 24:
                    NewCustAccount = lstCalVend.Find(MatchEntityCalVend("AddAccountCode10"));
                    break;
            }
            if (NewCustAccount != null && bsReceiptNote != null)
            {
                bsReceiptNote.DBTableName = "Cal_VendAccounts";
                bsReceiptNote.DBTableId = NewCustAccount.VendAccountId;
            }
            return NewCustAccount;
        }

        private Cal_EmpAccounts GetCustHelpEntity(int ResourcType, List<Cal_EmpAccounts> lstCalEmp, Ms_ReceiptNote bsReceiptNote)
        {
            Cal_EmpAccounts NewCustAccount = null;
            switch (ResourcType)
            {
                case 4:
                    NewCustAccount = lstCalEmp.Find(MatchEntityCalEmp("BasicAccCode"));

                    break;
                case 25:
                    NewCustAccount = lstCalEmp.Find(MatchEntityCalEmp("AddAccountCode1"));
                    break;
                case 26:
                    NewCustAccount = lstCalEmp.Find(MatchEntityCalEmp("AddAccountCode2"));
                    break;
                case 27:
                    NewCustAccount = lstCalEmp.Find(MatchEntityCalEmp("AddAccountCode3"));
                    break;
                case 28:
                    NewCustAccount = lstCalEmp.Find(MatchEntityCalEmp("AddAccountCode4"));
                    break;
                case 29:
                    NewCustAccount = lstCalEmp.Find(MatchEntityCalEmp("AddAccountCode5"));
                    break;
                case 30:
                    NewCustAccount = lstCalEmp.Find(MatchEntityCalEmp("AddAccountCode6"));
                    break;
                case 31:
                    NewCustAccount = lstCalEmp.Find(MatchEntityCalEmp("AddAccountCode7"));
                    break;
                case 32:
                    NewCustAccount = lstCalEmp.Find(MatchEntityCalEmp("AddAccountCode8"));
                    break;
                case 33:
                    NewCustAccount = lstCalEmp.Find(MatchEntityCalEmp("AddAccountCode9"));
                    break;
                case 35:
                    NewCustAccount = lstCalEmp.Find(MatchEntityCalEmp("AddAccountCode10"));
                    break;
            }
            if (NewCustAccount != null && bsReceiptNote != null)
            {
                bsReceiptNote.DBTableName = "Cal_EmpAccounts";
                bsReceiptNote.DBTableId = NewCustAccount.EmpAccountId;
            }
            return NewCustAccount;
        }

        private decimal GetValuNameValu(string ValuName, Ms_ReceiptNote bsReceiptNote)
        {
            decimal valu = 0;
            switch (ValuName)
            {
                case "PaidPrice":
                    valu = bsReceiptNote.ValueBeforeRate.GetValueOrDefault(0);
                    break;
                case "Commision":
                    valu = bsReceiptNote.Commision.GetValueOrDefault(0);
                    break;
                case "PriceAfterCommision":
                    //Edit By Abdulrahman
                    valu = GetPriceAfterCommision(bsReceiptNote);
                    break;
                case "Value1BeforeRate":
                    valu = bsReceiptNote.Value1BeforeRate.GetValueOrDefault(0);
                    break;
                case "Value2BeforeRate":
                    valu = bsReceiptNote.Value2BeforeRate.GetValueOrDefault(0);
                    break;
                case "Value3BeforeRate":
                    valu = bsReceiptNote.Value3BeforeRate.GetValueOrDefault(0);
                    break;
                case "Value4BeforeRate":
                    valu = bsReceiptNote.Value4BeforeRate.GetValueOrDefault(0);
                    break;
                case "Value5BeforeRate":
                    valu = bsReceiptNote.Value5BeforeRate.GetValueOrDefault(0);
                    break;
                case "Value6BeforeRate":
                    valu = bsReceiptNote.Value6BeforeRate.GetValueOrDefault(0);
                    break;
                case "Value7BeforeRate":
                    valu = bsReceiptNote.Value7BeforeRate.GetValueOrDefault(0);
                    break;
                case "Value8BeforeRate":
                    valu = bsReceiptNote.Value8BeforeRate.GetValueOrDefault(0);
                    break;
                case "Value9BeforeRate":
                    valu = bsReceiptNote.Value9BeforeRate.GetValueOrDefault(0);
                    break;
                case "Value10BeforeRate":
                    valu = bsReceiptNote.Value10BeforeRate.GetValueOrDefault(0);
                    break;
                case "TotalValue":
                    //Edit By Abdulrahman
                    valu = GetTotalValue(bsReceiptNote);
                    break;
                    //case "Value1":
                    //    valu = bsReceiptNote.Value1.GetValueOrDefault(0);
                    //    break;
                    //case "Value2":
                    //    valu = bsReceiptNote.Value2.GetValueOrDefault(0);
                    //    break;
                    //case "Value3":
                    //    valu = bsReceiptNote.Value3.GetValueOrDefault(0);
                    //    break;
                    //case "Value4":
                    //    valu = bsReceiptNote.Value4.GetValueOrDefault(0);
                    //    break;
                    //case "Value5":
                    //    valu = bsReceiptNote.Value5.GetValueOrDefault(0);
                    //    break;
                    //case "Value6":
                    //    valu = bsReceiptNote.Value6.GetValueOrDefault(0);
                    //    break;
            }
            return valu;
        }
        #endregion

        #region Save From PaymentNote To Cal_PostOrder
        public bool AccountingSave(int? FinancialIntervalsId, MS_PaymentNote bsPaymentNote, FormMode formMode)
        {
            MS_Settings Setting = redis.GetOrSetSettings();
            MS_Currency LocalCurrency = redis.GetOrSetLocalCurrency();

            bool valid = false, SkipCondition = false; /*int GlobalAccOut;*/
            List<Cal_PostOrder> post = new List<Cal_PostOrder>();
            if (!bsPaymentNote.CurrencyId.HasValue)
            {
                Message = "لابد من اختيار عملة المستند اولا  ";
                return false;
            }
            if (formMode == FormMode.Edit)
            {
                #region Remove Old Post
                if (bsPaymentNote != null)
                {
                    if (bsPaymentNote.PayId != 0)
                    {
                        MS_PaymentNote slInv = db.MS_PaymentNote.FirstOrDefault(x => x.PayId == bsPaymentNote.PayId);
                        if (slInv != null)
                        {
                            List<Cal_PostOrder> OldPost = PostOrderService.GetAll(x => x.TableCode == tableNameHeader && x.TableEntityId == bsPaymentNote.PayId);
                            int cont = OldPost.Count();
                            if (OldPost.Count > 0)
                            {
                                int deletedCount = PostOrderService.DeleteList(OldPost);
                                if (deletedCount <= 0)
                                {
                                    Message = "لم ينجح تحديث الأرصده السابقه *** حاول مره اخرى   ";
                                    return false;
                                }
                            }
                        }
                        else return false;
                    }
                    else return false;
                }
                else return false;
                #endregion
            }
            //if (formMode == FormMode.Add)
            //{
            if (bsPaymentNote != null)
            {
                //List<Cal_PostOrder> post = new List<Cal_PostOrder>();
                if (bsPaymentNote.TermId.HasValue)
                {
                    Ms_Terms term = TermsService.GetById(bsPaymentNote.TermId.Value);
                    if (term != null)
                    {
                        List<Ms_TermsDetails> trDetails = TermsService.FindTermsDetailsById(x => x.TermId == term.TermId);

                        List<Cal_CustAccounts> lstCusAccs = new List<Cal_CustAccounts>();
                        List<Cal_VendAccounts> lstVendAccs = new List<Cal_VendAccounts>();
                        List<Cal_EmpAccounts> lstEmpAccs = new List<Cal_EmpAccounts>();
                        List<Cal_AssetAccounts> lstAssets = new List<Cal_AssetAccounts>();
                        List<Cal_BusinessPartnerAccounts> lstBusPartnerAccs = new List<Cal_BusinessPartnerAccounts>();
                        Cal_AccountChart chrtAccount = new Cal_AccountChart();

                        #region Definition
                        if (bsPaymentNote.RectSourceType.GetValueOrDefault(0) == 1 || (bsPaymentNote.RectSourceType.GetValueOrDefault(0) >= 5 && bsPaymentNote.RectSourceType.GetValueOrDefault(0) < 15))
                        {
                            if (bsPaymentNote.VendorId.HasValue)
                                lstCusAccs = CustomerService.GetCustAccounts(x => x.CustomerId == bsPaymentNote.VendorId && x.IsInUse == true);
                            else
                            {
                                Message = "العميل الفرعى غير موجود  ";
                                return false;
                            }
                        }
                        else if (bsPaymentNote.RectSourceType.GetValueOrDefault(0) == 2 ||
                                        (bsPaymentNote.RectSourceType.GetValueOrDefault(0) >= 15 && bsPaymentNote.RectSourceType.GetValueOrDefault(0) < 25))
                        {
                            if (bsPaymentNote.VendorId.HasValue)
                                lstVendAccs = VendorService.GetVendAccounts(x => x.VendorId == bsPaymentNote.VendorId && x.IsInUse == true);
                            else
                            {
                                Message = "المورد الفرعى غير موجود  ";
                                return false;
                            }
                        }
                        else if (bsPaymentNote.RectSourceType == 4 || bsPaymentNote.RectSourceType == 35 ||
                                        (bsPaymentNote.RectSourceType >= 25 && bsPaymentNote.RectSourceType < 34))
                        {
                            if (bsPaymentNote.EmpId.HasValue)
                                lstEmpAccs = EmpService.GetEmpAccounts(x => x.EmpId == bsPaymentNote.EmpId && x.IsInUse == true);
                            else
                            {
                                Message = "الموظف الفرعى غير موجود  ";
                                return false;
                            }
                        }
                        else if (bsPaymentNote.RectSourceType == 36 || bsPaymentNote.RectSourceType == 37)
                        {
                            if (bsPaymentNote.VendorId.HasValue)
                                lstBusPartnerAccs = BusinessService.GetAll(x => x.TableEntityId == bsPaymentNote.VendorId && x.TableCode == "Prod_JobOrder" && x.IsInUse == true);
                            else
                            {
                                Message = "أمر الشغل غير موجود  ";
                                return false;
                            }
                        }
                        else if (bsPaymentNote.RectSourceType >= 38 && bsPaymentNote.RectSourceType <= 47)
                        {
                            if (bsPaymentNote.VendorId.HasValue)
                                lstBusPartnerAccs = BusinessService.GetAll(x => x.TableEntityId == bsPaymentNote.VendorId && x.TableCode == "Sr_Vehicles" && x.IsInUse == true);
                            else
                            {
                                Message = "المركبه غير موجوده  ";
                                return false;
                            }
                        }
                        else if (bsPaymentNote.RectSourceType >= 48 && bsPaymentNote.RectSourceType <= 50)
                        {
                            if (bsPaymentNote.VendorId.HasValue)
                                lstBusPartnerAccs = BusinessService.GetAll(x => x.TableEntityId == bsPaymentNote.VendorId && x.TableCode == "Sr_VehicleJobOrder" && x.IsInUse == true);
                            else
                            {
                                Message = "أمر شغل المركبه غير موجود  ";
                                return false;
                            }
                        }
                        else if (bsPaymentNote.RectSourceType >= 51 && bsPaymentNote.RectSourceType <= 60)
                        {
                            if (bsPaymentNote.VendorId.HasValue)
                                lstBusPartnerAccs = BusinessService.GetAll(x => x.TableEntityId == bsPaymentNote.VendorId && x.TableCode == "Ms_LetterOfGuarantee" && x.IsInUse == true);
                            else
                            {
                                Message = "خطاب الضمان غير موجود  ";
                                return false;
                            }
                        }
                        else if (bsPaymentNote.RectSourceType >= 61 && bsPaymentNote.RectSourceType <= 63)
                        {
                            if (bsPaymentNote.VendorId.HasValue)
                                lstBusPartnerAccs = BusinessService.GetAll(x => x.TableEntityId == bsPaymentNote.VendorId && x.TableCode == "Sr_JobOrder" && x.IsInUse == true);
                            else
                            {
                                Message = "أمر صيانة المركبه غير موجود  ";
                                return false;
                            }
                        }
                        else if (bsPaymentNote.RectSourceType >= 64 && bsPaymentNote.RectSourceType <= 66)
                        {
                            if (bsPaymentNote.VendorId.HasValue)
                                lstBusPartnerAccs = BusinessService.GetAll(x => x.TableEntityId == bsPaymentNote.VendorId && x.TableCode == "Repair_JobOrder" && x.IsInUse == true);
                            else
                            {
                                Message = "أمر صيانة المعدات غير موجود  ";
                                return false;
                            }
                        }
                        else if (bsPaymentNote.RectSourceType >= 67 && bsPaymentNote.RectSourceType <= 77)
                        {
                            if (bsPaymentNote.VendorId.HasValue)
                                lstAssets = db.Cal_AssetAccounts.Where(x => x.AssetId == bsPaymentNote.VendorId && x.IsInUse == true).ToList();
                            else
                            {
                                Message = "الأصل الثابت غير موجود  ";
                                return false;
                            }
                        }
                        else if (bsPaymentNote.RectSourceType >= 78 && bsPaymentNote.RectSourceType <= 88)
                        {
                            if (bsPaymentNote.VendorId.HasValue)
                                lstBusPartnerAccs = BusinessService.GetAll(x => x.TableEntityId == bsPaymentNote.VendorId && x.TableCode == "Proj_Projects" && x.IsInUse == true);
                            else
                            {
                                Message = "المشروع غير موجود  ";
                                return false;
                            }
                        }
                        else if (bsPaymentNote.RectSourceType == 34)
                        {
                            if (bsPaymentNote.AccountId.HasValue)
                                chrtAccount = Cal_AccountChart.GetById(bsPaymentNote.AccountId.Value);
                            else
                            {
                                Message = "الحساب الفرعى غير موجود  ";
                                return false;
                            }
                        }
                        else if (bsPaymentNote.RectSourceType == 3) { }
                        else
                        {
                            Message = "لابد من اختيار الجهه  ";
                            return false;
                        }
                        #endregion

                        if (trDetails.Count > 0)
                        {
                            if (trDetails[0].AnalaticalCodeMust == true && !bsPaymentNote.AId.HasValue)
                            {
                                Message = "الكود التحليلى إجبارى ";
                                return false;
                            }
                            Sys_AnalyticalCodes AnCode = null;
                            try
                            {
                                //if (!bsPaymentNote.AId.HasValue && !string.IsNullOrEmpty(txtAnalyticalCode.Text.TrimEnd(' ').TrimStart(' ')))
                                if (!bsPaymentNote.AId.HasValue)
                                {
                                    AnCode = GetAnalyticalCode(bsPaymentNote.AId.Value);
                                    List<Sys_AnalyticalCodes> AnCodeList = AnalyticalCodesService.GetAll(x => x.Code == AnCode.Code);
                                    if (AnCodeList != null && AnCodeList.Count > 0)
                                    {
                                        bsPaymentNote.AId = AnCodeList[0].AId;
                                        AnCode = AnCodeList[0];
                                    }
                                }
                            }
                            catch
                            {
                            }

                            if (AnCode == null && bsPaymentNote.AId.HasValue)
                            {
                                AnCode = AnalyticalCodesService.GetById(bsPaymentNote.AId.Value);
                            }
                            if (!trDetails[0].AccountIdDebit.HasValue && trDetails[0].AccCashDebitOrCredit != true && trDetails[0].AccDiscDebitOrCredit != true &&
                                trDetails[0].AccTaxDebitOrCredit != true && trDetails[0].AddAcc1DebitOrCredit != true && trDetails[0].AddAcc2DebitOrCredit != true
                                && trDetails[0].AddAcc3DebitOrCredit != true && trDetails[0].AddAcc4DebitOrCredit != true && trDetails[0].AddAcc5DebitOrCredit != true
                                 && trDetails[0].AccountDebitFixed != 0 && trDetails[0].AccountDebitFixed != 2)
                            {
                                Message = "لا يوجد حساب مدين بنوع السند  ";
                                return false;
                            }
                            if (!trDetails[0].AccountIdCredit.HasValue && trDetails[0].AccCashDebitOrCredit != false && trDetails[0].AccDiscDebitOrCredit != false &&
                               trDetails[0].AccTaxDebitOrCredit != false && trDetails[0].AddAcc1DebitOrCredit != false && trDetails[0].AddAcc2DebitOrCredit != false
                               && trDetails[0].AddAcc3DebitOrCredit != false && trDetails[0].AddAcc4DebitOrCredit != false && trDetails[0].AddAcc5DebitOrCredit != false
                                && trDetails[0].AccountCreditFixed != 0 && trDetails[0].AccountCreditFixed != 2)
                            {
                                Message = "لا يوجد حساب دائن بنوع السند  ";
                                return false;
                            }
                            if (trDetails[0].AccountDebitFixed == 2)
                            {
                                if (AnCode == null && trDetails[0].AnalaticalCodeMust.GetValueOrDefault(false))
                                {
                                    MessageBox = "الكود التحليلي اجبارى ";
                                    return false;
                                }
                                else if (AnCode == null)
                                {
                                    SkipCondition = true;
                                }
                            }
                            if (!SkipCondition)
                                #region Debit Account
                                // manage first debit account in doctype
                                if (trDetails[0].AccountDebitFixed.HasValue && !string.IsNullOrEmpty(trDetails[0].ValuAccountDebit))
                                {
                                    //if (post.Count == 0)
                                    Cal_PostOrder postOrder = new Cal_PostOrder();
                                    postOrder.IsOpenningTerm = term.IsOpenningTerm;

                                    #region Cost Center
                                    if (trDetails[0].CostCenterIdDebit.HasValue || trDetails[0].CostCenterDebitFixed == 2)
                                    {
                                        Cal_CostCenters center = null;
                                        if (trDetails[0].CostCenterDebitFixed == 1)
                                        {
                                            //center = CostCentersService.GetByCostCenterId(trDetails[0].CostCenterIdDebit.Value);
                                            center = CostCentersService.GetById(trDetails[0].CostCenterIdDebit.Value);
                                            postOrder.CostCenterId = trDetails[0].CostCenterIdDebit;
                                            postOrder.HelpCostCenterId = null;
                                            postOrder.IsHelpCostCenter = false;
                                            postOrder.HelpCostCenterType = null;
                                        }
                                        else if (trDetails[0].CostCenterDebitFixed == 2 && AnCode != null && AnCode.CostCenterId.GetValueOrDefault(0) != 0)
                                        {
                                            //center = CostCentersService.GetById(AnCode.CostCenterId.Value);
                                            center = CostCentersService.GetById(AnCode.CostCenterId.Value);
                                            postOrder.CostCenterId = AnCode.CostCenterId;
                                            postOrder.HelpCostCenterId = null;
                                            postOrder.IsHelpCostCenter = false;
                                            postOrder.HelpCostCenterType = null;
                                        }
                                        else if (trDetails[0].CostCenterDebitFixed == 0)
                                        {
                                            if (bsPaymentNote.RectSourceType.GetValueOrDefault(0) == 1 ||
                                                (bsPaymentNote.RectSourceType.GetValueOrDefault(0) >= 5 && bsPaymentNote.RectSourceType.GetValueOrDefault(0) < 15))
                                            {
                                                MS_Customer cust = CustomerService.GetById(lstCusAccs[0].CustomerId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "MS_Customer";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب المدين و العميل غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار العميل أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType.GetValueOrDefault(0) == 2 ||
                                         (bsPaymentNote.RectSourceType.GetValueOrDefault(0) >= 15 && bsPaymentNote.RectSourceType.GetValueOrDefault(0) < 25))
                                            {
                                                MS_Vendor cust = VendorService.GetById(lstVendAccs[0].VendorId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "MS_Vendor";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب المدين و المورد غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار المورد أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType == 4 || bsPaymentNote.RectSourceType == 35 ||
                                                (bsPaymentNote.RectSourceType >= 25 &&
                                                bsPaymentNote.RectSourceType < 34))
                                            {
                                                Hr_Employees cust = EmpService.GetById(lstEmpAccs[0].EmpId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId1.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId1;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId1;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Hr_Employees";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب المدين و الموظف غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار الموظف أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType == 36 || bsPaymentNote.RectSourceType == 37)
                                            {
                                                Prod_JobOrder cust = JobOrderService.GetById(lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Prod_JobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب المدين و أمر الشغل غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر الشغل أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType >= 38 && bsPaymentNote.RectSourceType <= 47)
                                            {
                                                Sr_Vehicles cust = VehiclesService.GetById(lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Sr_Vehicles";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب المدين و المركبه غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار المركبه أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType >= 48 && bsPaymentNote.RectSourceType <= 50)
                                            {
                                                Sr_VehicleJobOrder cust = db.Sr_VehicleJobOrder.FirstOrDefault(x => x.VJOrderId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Sr_VehicleJobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب المدين و أمر الشغل غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر الشغل أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType >= 51 && bsPaymentNote.RectSourceType <= 60)
                                            {
                                                Ms_LetterOfGuarantee cust = db.Ms_LetterOfGuarantee.FirstOrDefault(x => x.LetOfGrnteeId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId1.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId1;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId1;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Ms_LetterOfGuarantee";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب المدين و خطاب الضمان غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار خطاب الضمان أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType >= 61 && bsPaymentNote.RectSourceType <= 63)
                                            {
                                                Sr_JobOrder cust = db.Sr_JobOrder.FirstOrDefault(x => x.JorderId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Sr_JobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب المدين و أمر صيانة مركبه غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر صيانة مركبه أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType >= 64 && bsPaymentNote.RectSourceType <= 66)
                                            {
                                                Repair_JobOrder cust = db.Repair_JobOrder.FirstOrDefault(x => x.RepairId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Repair_JobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب المدين و أمر صيانة معدات غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر صيانة معدات أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType >= 67 && bsPaymentNote.RectSourceType <= 77)
                                            {
                                                Asset_AssetCard cust = db.Asset_AssetCard.FirstOrDefault(x => x.AssetId == lstAssets[0].AssetId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Asset_AssetCard";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب المدين و الأصل الثابت غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار الأصل الثابت أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType >= 78 && bsPaymentNote.RectSourceType <= 88)
                                            {
                                                Proj_Projects cust = db.Proj_Projects.FirstOrDefault(x => x.ProjectId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId1.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId1;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId1;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Proj_Projects";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب المدين و الأصل الثابت غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار الأصل الثابت أولا";
                                                    return false;
                                                }
                                            }
                                            //if (bsPaymentNote.RectSourceType == 34)
                                            //{
                                            //    if (chrtAccount.cos.CostCenterId1.HasValue)
                                            //        {
                                            //            center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                            //            postOrder.CostCenterId = cust.CostCenterId1;
                                            //            postOrder.HelpCostCenterId = cust.CostCenterId1;
                                            //            postOrder.IsHelpCostCenter = true;
                                            //            postOrder.HelpCostCenterType = "Hr_Employees";
                                            //        }
                                            //        else
                                            //        {
                                            //            Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب المدين و المورد غير مرتبط بمركز تكلفه";
                                            //            return false;
                                            //        }                                               
                                            //}
                                        }

                                        if (center != null)
                                        {
                                            if (center.CurrencyId.HasValue)
                                            {
                                                ////postOrder.CurrencyId = chrt.CurrencyId;
                                                postOrder.BalancCrencyBeforDebtCostCentr = center.BalanceDebitCurncy;
                                                postOrder.BalancLocalBeforDebCostCentr = center.BalanceDebitLocal;
                                                postOrder.BalancCrencyBeforCredCostCentr = center.BalanceCreditCurncy;
                                                postOrder.BalancLocalBeforCredCostCentr = center.BalanceCreditLocal;
                                            }
                                            else
                                            {
                                                Message = "عملة مركز التكلفه المدين غير موجود *** كود مركز التكلفه =  " + center.CostCenterCode +
                                                    " اسم مركز التكلفه = " + center.CostCenterNameA;
                                                return false;
                                            }
                                        }

                                    }
                                    #endregion

                                    postOrder.TermId = term.TermId;
                                    postOrder.TableCode = tableNameHeader;
                                    postOrder.TableEntityId = bsPaymentNote.PayId;
                                    postOrder.IsPosted = false;
                                    postOrder.CurrencyId = bsPaymentNote.CurrencyId;
                                    if (trDetails[0].AccountIdDebit.HasValue)
                                    {
                                        if (trDetails[0].AccountDebitFixed == 1)
                                        {
                                            Cal_AccountChart chrt = Cal_AccountChart.GetById(trDetails[0].AccountIdDebit.Value);
                                            if (chrt != null)
                                            {
                                                if (chrt.CurrencyId.HasValue)
                                                {
                                                    //postOrder.CurrencyId = chrt.CurrencyId;
                                                    postOrder.BalaceCurrencyBeforDebit = chrt.BalanceDebitCurncy;
                                                    postOrder.BalaceLocalBeforDebit = chrt.BalanceDebitLocal;
                                                    postOrder.BalaceCurrencyBeforCredit = chrt.BalanceCreditCurncy;
                                                    postOrder.BalaceLocalBeforCredit = chrt.BalanceCreditLocal;
                                                    MS_Currency cur = CurrencyService.GetById(bsPaymentNote.CurrencyId.Value);
                                                    if (cur != null)
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                }
                                                else
                                                {
                                                    Message = "عملة الحساب المدين غير موجود *** كود الحساب =  " + chrt.AccountCode +
                                                        " اسم الحساب = " + chrt.AccountNameA;
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                Message = "الحساب المدين غير موجود . . .";
                                                return false;
                                            }
                                        }
                                        else if (trDetails[0].AccountDebitFixed == 2)
                                        {
                                            if (AnCode == null || !AnCode.AccountId.HasValue)
                                            {
                                                Message = "الكود التحليلى أو الحساب المرتبط به غير صحيح . . .";
                                                return false;
                                            }
                                            Cal_AccountChart chrt = Cal_AccountChart.GetById(AnCode.AccountId.Value);
                                            if (chrt != null)
                                            {
                                                if (chrt.CurrencyId.HasValue)
                                                {
                                                    //postOrder.CurrencyId = chrt.CurrencyId;
                                                    postOrder.BalaceCurrencyBeforDebit = chrt.BalanceDebitCurncy;
                                                    postOrder.BalaceLocalBeforDebit = chrt.BalanceDebitLocal;
                                                    postOrder.BalaceCurrencyBeforCredit = chrt.BalanceCreditCurncy;
                                                    postOrder.BalaceLocalBeforCredit = chrt.BalanceCreditLocal;
                                                    MS_Currency cur = CurrencyService.GetById(bsPaymentNote.CurrencyId.Value);
                                                    if (cur != null)
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                }
                                                else
                                                {
                                                    Message = "عملة الحساب المدين غير موجود *** كود الحساب =  " + chrt.AccountCode +
                                                        " اسم الحساب = " + chrt.AccountNameA;
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                Message = "الحساب المدين غير موجود . . .";
                                                return false;
                                            }
                                        }
                                    }
                                    //else if (trDetails[0].AccCashDebitOrCredit != true && trDetails[0].AccDiscDebitOrCredit != true && trDetails[0].AccTaxDebitOrCredit!=true)
                                    //{
                                    //    Message = "الحساب المدين غير موجود بنوع السند  ";
                                    //    return false;
                                    //}
                                    if (trDetails[0].AccountDebitFixed == 1)
                                    {
                                        postOrder.AccountId = trDetails[0].AccountIdDebit.Value;
                                        postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDebit, bsPaymentNote);
                                        postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                        postOrder.HelpAccId = null;
                                        postOrder.IsHelpAcc = false;
                                        postOrder.HelpAccType = null;
                                    }
                                    else if (trDetails[0].AccountDebitFixed == 2)
                                    {
                                        postOrder.AccountId = AnCode.AccountId.Value;
                                        postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDebit, bsPaymentNote);
                                        postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                        postOrder.HelpAccId = null;
                                        postOrder.IsHelpAcc = false;
                                        postOrder.HelpAccType = null;
                                    }
                                    else if (trDetails[0].AccountDebitFixed == 0)
                                    {

                                        if (bsPaymentNote.RectSourceType.GetValueOrDefault(0) == 1 ||
                                    (bsPaymentNote.RectSourceType.GetValueOrDefault(0) >= 5 && bsPaymentNote.RectSourceType.GetValueOrDefault(0) < 15))
                                        {
                                            if (lstCusAccs.Count == 0)
                                            {
                                                MessageBox = "العميل غير مربوط بحساب استاذ *** راجع مستند تعريف العميل   ";
                                                return false;
                                            }
                                            Cal_CustAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstCusAccs, bsPaymentNote);
                                            //Cal_CustAccounts CusAccs = GetCustHelpEntity((bsPaymentNote.Current as MS_PaymentNote).RectSourceType.GetValueOrDefault(0), lstCusAccs);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف العميل *** راجع مستند تعريف العميل   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "العميل غير مربوط بحساب استاذ *** راجع مستند تعريف العميل   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.CustAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "MS_Customer";
                                            MS_Customer cust = CustomerService.GetById(CusAccs.CustomerId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                        postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDebit, bsPaymentNote);
                                                        postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "العميل غير مرتبط بعمله *** راجع كارت العميل   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "العميل غير مرتبط بعمله *** راجع كارت العميل   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "العميل غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType.GetValueOrDefault(0) == 2 ||
                                            (bsPaymentNote.RectSourceType.GetValueOrDefault(0) >= 15 && bsPaymentNote.RectSourceType.GetValueOrDefault(0) < 25))
                                        {
                                            if (lstVendAccs.Count == 0)
                                            {
                                                MessageBox = "المورد غير مربوط بحساب استاذ *** راجع مستند تعريف المورد   ";
                                                return false;
                                            }
                                            Cal_VendAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstVendAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف المورد *** راجع مستند تعريف المورد   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "المورد غير مربوط بحساب استاذ *** راجع مستند تعريف المورد   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.VendAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "MS_Vendor";
                                            MS_Vendor cust = VendorService.GetById(CusAccs.VendorId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                        postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDebit, bsPaymentNote);
                                                        postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "المورد غير مرتبط بعمله *** راجع كارت المورد   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "المورد غير مرتبط بعمله *** راجع كارت المورد   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "المورد غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType == 4 || bsPaymentNote.RectSourceType == 35 ||
                                            (bsPaymentNote.RectSourceType >= 25 &&
                                            bsPaymentNote.RectSourceType < 34))
                                        {
                                            if (lstEmpAccs.Count == 0)
                                            {
                                                MessageBox = "الموظف غير مربوط بحساب استاذ *** راجع مستند تعريف الموظف   ";
                                                return false;
                                            }
                                            Cal_EmpAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstEmpAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الموظف *** راجع مستند تعريف الموظف   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الموظف غير مربوط بحساب استاذ *** راجع مستند تعريف الموظف   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.EmpAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Hr_Employees";
                                            Hr_Employees cust = EmpService.GetById(CusAccs.EmpId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                        postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDebit, bsPaymentNote);
                                                        postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الموظف غير مرتبط بعمله *** راجع كارت الموظف   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "الموظف غير مرتبط بعمله *** راجع كارت الموظف   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الموظف غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType == 36 || bsPaymentNote.RectSourceType == 37)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Prod_JobOrder";
                                            Prod_JobOrder cust = JobOrderService.GetById(CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                        postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDebit, bsPaymentNote);
                                                        postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                        postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDebit, bsPaymentNote);
                                                        postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType >= 38 && bsPaymentNote.RectSourceType <= 47)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Sr_Vehicles";
                                            Sr_Vehicles cust = VehiclesService.GetById(CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                //if (cust.CurrencyId.HasValue)
                                                //{
                                                //    MS_Currency cur = CurrencyService.GetById(tran,cust.CurrencyId.Value);
                                                //    if (cur != null)
                                                //    {
                                                //        postOrder.Rate = bsPaymentNote.Rate;
                                                //        postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDebit, bsPaymentNote);
                                                //        postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                //    }
                                                //    else
                                                //    {
                                                //        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                //        return false;
                                                //    }
                                                //}
                                                //else
                                                //{
                                                if (LocalCurrency != null)
                                                {
                                                    postOrder.Rate = bsPaymentNote.Rate;
                                                    postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDebit, bsPaymentNote);
                                                    postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                }
                                                else
                                                {
                                                    MessageBox = "خطأ بالعمله المحليه   ";
                                                    return false;
                                                }
                                                //}
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType >= 48 && bsPaymentNote.RectSourceType <= 50)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Sr_VehicleJobOrder";
                                            Sr_VehicleJobOrder cust = db.Sr_VehicleJobOrder.FirstOrDefault(x => x.VJOrderId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                //if (cust.CurrencyId.HasValue)
                                                //{
                                                //    MS_Currency cur = CurrencyService.GetById(tran,cust.CurrencyId.Value);
                                                //    if (cur != null)
                                                //    {
                                                //        postOrder.Rate = bsPaymentNote.Rate;
                                                //        postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDebit, bsPaymentNote);
                                                //        postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                //    }
                                                //    else
                                                //    {
                                                //        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                //        return false;
                                                //    }
                                                //}
                                                //else
                                                //{
                                                if (LocalCurrency != null)
                                                {
                                                    postOrder.Rate = bsPaymentNote.Rate;
                                                    postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDebit, bsPaymentNote);
                                                    postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                }
                                                else
                                                {
                                                    MessageBox = "خطأ بالعمله المحليه   ";
                                                    return false;
                                                }
                                                //}
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType >= 51 && bsPaymentNote.RectSourceType <= 60)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Ms_LetterOfGuarantee";
                                            Ms_LetterOfGuarantee cust = db.Ms_LetterOfGuarantee.FirstOrDefault(x => x.LetOfGrnteeId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                        postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDebit, bsPaymentNote);
                                                        postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                        postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDebit, bsPaymentNote);
                                                        postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType >= 61 && bsPaymentNote.RectSourceType <= 63)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Sr_JobOrder";
                                            Sr_JobOrder cust = db.Sr_JobOrder.FirstOrDefault(x => x.JorderId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                        postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDebit, bsPaymentNote);
                                                        postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                        postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDebit, bsPaymentNote);
                                                        postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType >= 64 && bsPaymentNote.RectSourceType <= 66)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Repair_JobOrder";
                                            Repair_JobOrder cust = db.Repair_JobOrder.FirstOrDefault(x => x.RepairId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                        postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDebit, bsPaymentNote);
                                                        postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                        postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDebit, bsPaymentNote);
                                                        postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType >= 67 && bsPaymentNote.RectSourceType <= 77)
                                        {
                                            if (lstAssets.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_AssetAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstAssets, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.AssetAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Asset_AssetCard";
                                            Asset_AssetCard cust = db.Asset_AssetCard.FirstOrDefault(x => x.AssetId == CusAccs.AssetId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                        postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDebit, bsPaymentNote);
                                                        postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                        postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDebit, bsPaymentNote);
                                                        postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType >= 78 && bsPaymentNote.RectSourceType <= 88)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Proj_Projects";
                                            Proj_Projects cust = db.Proj_Projects.FirstOrDefault(x => x.ProjectId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                        postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDebit, bsPaymentNote);
                                                        postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                        postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDebit, bsPaymentNote);
                                                        postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType == 34)
                                        {
                                            //postOrder.HelpAccId = CusAccs.EmpAccountId;
                                            postOrder.AccountId = chrtAccount.AccountId;
                                            postOrder.IsHelpAcc = false;
                                            //postOrder.HelpAccType = "Hr_Employees";
                                            //MS_Vendor cust = VendorService.GetById(CusAccs.EmpId.Value);
                                            if (chrtAccount != null)
                                            {
                                                if (chrtAccount.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(chrtAccount.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                        postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDebit, bsPaymentNote);
                                                        postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الحساب غير مرتبط بعمله *** راجع دليل الحسابات   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "الحساب غير مرتبط بعمله *** راجع دليل الحسابات   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الحساب غير موجود   ";
                                                return false;
                                            }
                                        }
                                    }
                                    post.Add(postOrder);
                                }
                            #endregion

                            SkipCondition = false;
                            if (trDetails[0].AccountCreditFixed == 2)
                            {
                                if (AnCode == null && trDetails[0].AnalaticalCodeMust.GetValueOrDefault(false))
                                {
                                    MessageBox = "الكود التحليلي اجبارى ";
                                    return false;
                                }
                                else if (AnCode == null)
                                {
                                    SkipCondition = true;
                                }
                            }
                            if (!SkipCondition)
                                #region Credit Account
                                // manage first credit account in doctype
                                if (trDetails[0].AccountCreditFixed.HasValue && !string.IsNullOrEmpty(trDetails[0].ValuAccountCredit))
                                {
                                    //if (post.Count == 0)
                                    Cal_PostOrder postOrder = new Cal_PostOrder();
                                    postOrder.IsOpenningTerm = term.IsOpenningTerm;

                                    #region Cost Center
                                    if (trDetails[0].CostCenterIdCredit.HasValue || trDetails[0].CostCenterCreditFixed == 2)
                                    {
                                        Cal_CostCenters center = null;
                                        if (trDetails[0].CostCenterCreditFixed == 1)
                                        {
                                            center = CostCentersService.GetById(trDetails[0].CostCenterIdCredit.Value);
                                            postOrder.CostCenterId = trDetails[0].CostCenterIdCredit;
                                            postOrder.HelpCostCenterId = null;
                                            postOrder.IsHelpCostCenter = false;
                                            postOrder.HelpCostCenterType = null;
                                        }
                                        else if (trDetails[0].CostCenterCreditFixed == 2 && AnCode != null && AnCode.CostCenterId.GetValueOrDefault(0) != 0)
                                        {
                                            center = CostCentersService.GetById(AnCode.CostCenterId.Value);
                                            postOrder.CostCenterId = AnCode.CostCenterId;
                                            postOrder.HelpCostCenterId = null;
                                            postOrder.IsHelpCostCenter = false;
                                            postOrder.HelpCostCenterType = null;
                                        }
                                        else if (trDetails[0].CostCenterCreditFixed == 0)
                                        {
                                            if (bsPaymentNote.RectSourceType.GetValueOrDefault(0) == 1 ||
                                      (bsPaymentNote.RectSourceType.GetValueOrDefault(0) >= 5 && bsPaymentNote.RectSourceType.GetValueOrDefault(0) < 15))
                                            {
                                                MS_Customer cust = CustomerService.GetById(lstCusAccs[0].CustomerId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "MS_Customer";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب الدائن و العميل غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار العميل أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType.GetValueOrDefault(0) == 2 ||
                                             (bsPaymentNote.RectSourceType.GetValueOrDefault(0) >= 15 && bsPaymentNote.RectSourceType.GetValueOrDefault(0) < 25))
                                            {
                                                MS_Vendor cust = VendorService.GetById(lstVendAccs[0].VendorId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "MS_Vendor";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب الدائن و المورد غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار المورد أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType == 4 || bsPaymentNote.RectSourceType == 35 ||
                                                (bsPaymentNote.RectSourceType >= 25 &&
                                                bsPaymentNote.RectSourceType < 34))
                                            {
                                                Hr_Employees cust = EmpService.GetById(lstEmpAccs[0].EmpId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId1.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId1;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId1;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Hr_Employees";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب  و الموظف غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار الموظف أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType == 36 || bsPaymentNote.RectSourceType == 37)
                                            {
                                                Prod_JobOrder cust = JobOrderService.GetById(lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Prod_JobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب الدائن و أمر الشغل غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر الشغل أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType >= 38 && bsPaymentNote.RectSourceType <= 47)
                                            {
                                                Sr_Vehicles cust = VehiclesService.GetById(lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Sr_Vehicles";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب الدائن و المركبه غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار المركبه أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType >= 48 && bsPaymentNote.RectSourceType <= 50)
                                            {
                                                Sr_VehicleJobOrder cust = db.Sr_VehicleJobOrder.FirstOrDefault(x => x.VJOrderId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Sr_VehicleJobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب الدائن و أمر الشغل غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر الشغل أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType >= 51 && bsPaymentNote.RectSourceType <= 60)
                                            {
                                                Ms_LetterOfGuarantee cust = db.Ms_LetterOfGuarantee.FirstOrDefault(x => x.LetOfGrnteeId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId1.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId1;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId1;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Ms_LetterOfGuarantee";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب الدائن و خطاب الضمان غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار خطاب الضمان أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType >= 61 && bsPaymentNote.RectSourceType <= 63)
                                            {
                                                Sr_JobOrder cust = db.Sr_JobOrder.FirstOrDefault(x => x.JorderId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Sr_JobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب الدائن و أمر صيانة مركبه غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر صيانة مركبه أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType >= 64 && bsPaymentNote.RectSourceType <= 66)
                                            {
                                                Repair_JobOrder cust = db.Repair_JobOrder.FirstOrDefault(x => x.RepairId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Repair_JobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب الدائن و أمر صيانة معدات غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر صيانة معدات أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType >= 67 && bsPaymentNote.RectSourceType <= 77)
                                            {
                                                Asset_AssetCard cust = db.Asset_AssetCard.FirstOrDefault(x => x.AssetId == lstAssets[0].AssetId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Asset_AssetCard";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب الدائن و الأصل الثابت غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار الأصل الثابت أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType >= 78 && bsPaymentNote.RectSourceType <= 88)
                                            {
                                                Proj_Projects cust = db.Proj_Projects.FirstOrDefault(x => x.ProjectId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId1.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId1;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId1;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Proj_Projects";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب الدائن و الأصل الثابت غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار الأصل الثابت أولا";
                                                    return false;
                                                }
                                            }
                                            //if (bsPaymentNote.RectSourceType == 34)
                                            //{
                                            //    if (chrtAccount.cos.CostCenterId1.HasValue)
                                            //        {
                                            //            center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                            //            postOrder.CostCenterId = cust.CostCenterId1;
                                            //            postOrder.HelpCostCenterId = cust.CostCenterId1;
                                            //            postOrder.IsHelpCostCenter = true;
                                            //            postOrder.HelpCostCenterType = "Hr_Employees";
                                            //        }
                                            //        else
                                            //        {
                                            //            Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب  و المورد غير مرتبط بمركز تكلفه";
                                            //            return false;
                                            //        }                                               
                                            //}
                                        }

                                        if (center != null)
                                        {
                                            if (center.CurrencyId.HasValue)
                                            {
                                                ////postOrder.CurrencyId = chrt.CurrencyId;
                                                postOrder.BalancCrencyBeforDebtCostCentr = center.BalanceDebitCurncy;
                                                postOrder.BalancLocalBeforDebCostCentr = center.BalanceDebitLocal;
                                                postOrder.BalancCrencyBeforCredCostCentr = center.BalanceCreditCurncy;
                                                postOrder.BalancLocalBeforCredCostCentr = center.BalanceCreditLocal;

                                            }
                                            else
                                            {
                                                Message = "عملة مركز التكلفه الدائن غير موجود *** كود مركز التكلفه =  " + center.CostCenterCode +
                                                    " اسم مركز التكلفه = " + center.CostCenterNameA;
                                                return false;
                                            }
                                        }

                                    }
                                    #endregion

                                    postOrder.TermId = term.TermId;
                                    postOrder.TableCode = tableNameHeader;
                                    postOrder.TableEntityId = bsPaymentNote.PayId;
                                    postOrder.IsPosted = false;
                                    postOrder.CurrencyId = bsPaymentNote.CurrencyId;
                                    if (trDetails[0].AccountIdCredit.HasValue)
                                    {
                                        if (trDetails[0].AccountCreditFixed == 1)
                                        {
                                            Cal_AccountChart chrt = Cal_AccountChart.GetById(trDetails[0].AccountIdCredit.Value);
                                            if (chrt != null)
                                            {
                                                if (chrt.CurrencyId.HasValue)
                                                {
                                                    //postOrder.CurrencyId = chrt.CurrencyId;
                                                    //postOrder.BalaceCurrencyBefor = chrt.BalanceCurncy;
                                                    postOrder.BalaceCurrencyBeforDebit = chrt.BalanceDebitCurncy;
                                                    postOrder.BalaceLocalBeforDebit = chrt.BalanceDebitLocal;
                                                    postOrder.BalaceCurrencyBeforCredit = chrt.BalanceCreditCurncy;
                                                    postOrder.BalaceLocalBeforCredit = chrt.BalanceCreditLocal;
                                                    MS_Currency cur = CurrencyService.GetById(bsPaymentNote.CurrencyId.Value);
                                                    if (cur != null)
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                }
                                                else
                                                {
                                                    Message = "عملة الحساب الدائن غير موجود *** كود الحساب =  " + chrt.AccountCode +
                                                        " اسم الحساب = " + chrt.AccountNameA;
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                Message = "الحساب  غير موجود . . .";
                                                return false;
                                            }
                                        }
                                        else if (trDetails[0].AccountCreditFixed == 2)
                                        {
                                            if (AnCode == null || !AnCode.AccountId.HasValue)
                                            {
                                                Message = "الكود التحليلى أو الحساب المرتبط به غير صحيح . . .";
                                                return false;
                                            }
                                            Cal_AccountChart chrt = Cal_AccountChart.GetById(AnCode.AccountId.Value);
                                            if (chrt != null)
                                            {
                                                if (chrt.CurrencyId.HasValue)
                                                {
                                                    //postOrder.CurrencyId = chrt.CurrencyId;
                                                    postOrder.BalaceCurrencyBeforDebit = chrt.BalanceDebitCurncy;
                                                    postOrder.BalaceLocalBeforDebit = chrt.BalanceDebitLocal;
                                                    postOrder.BalaceCurrencyBeforCredit = chrt.BalanceCreditCurncy;
                                                    postOrder.BalaceLocalBeforCredit = chrt.BalanceCreditLocal;
                                                    MS_Currency cur = CurrencyService.GetById(bsPaymentNote.CurrencyId.Value);
                                                    if (cur != null)
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                }
                                                else
                                                {
                                                    Message = "عملة الحساب  غير موجود *** كود الحساب =  " + chrt.AccountCode +
                                                        " اسم الحساب = " + chrt.AccountNameA;
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                Message = "الحساب  غير موجود . . .";
                                                return false;
                                            }
                                        }
                                    }
                                    //else if (trDetails[0].AccCashDebitOrCredit != false && trDetails[0].AccDiscDebitOrCredit != false && trDetails[0].AccTaxDebitOrCredit != false)
                                    //{
                                    //    Message = "الحساب  غير موجود بنوع السند  ";
                                    //    return false;
                                    //}
                                    if (trDetails[0].AccountCreditFixed == 1)
                                    {
                                        postOrder.AccountId = trDetails[0].AccountIdCredit.Value;
                                        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsPaymentNote);
                                        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                        postOrder.HelpAccId = null;
                                        postOrder.IsHelpAcc = false;
                                        postOrder.HelpAccType = null;
                                    }
                                    else if (trDetails[0].AccountCreditFixed == 2)
                                    {
                                        postOrder.AccountId = AnCode.AccountId.Value;
                                        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsPaymentNote);
                                        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                        postOrder.HelpAccId = null;
                                        postOrder.IsHelpAcc = false;
                                        postOrder.HelpAccType = null;
                                    }
                                    else if (trDetails[0].AccountCreditFixed == 0)
                                    {
                                        if (bsPaymentNote.RectSourceType.GetValueOrDefault(0) == 1 ||
                                   (bsPaymentNote.RectSourceType.GetValueOrDefault(0) >= 5 && bsPaymentNote.RectSourceType.GetValueOrDefault(0) < 15))
                                        {
                                            if (lstCusAccs.Count == 0)
                                            {
                                                Message = "العميل غير مربوط بحساب استاذ *** راجع مستند تعريف العميل    ";
                                                //MessageBox = "العميل غير مربوط بحساب استاذ *** راجع مستند تعريف العميل   ";
                                                return false;
                                            }
                                            Cal_CustAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstCusAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف العميل *** راجع مستند تعريف العميل   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                Message = "العميل غير مربوط بحساب استاذ *** راجع مستند تعريف العميل    ";
                                                //MessageBox = "العميل غير مربوط بحساب استاذ *** راجع مستند تعريف العميل   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.CustAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "MS_Customer";
                                            MS_Customer cust = CustomerService.GetById(CusAccs.CustomerId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsPaymentNote);
                                                        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        Message = "العميل غير مرتبط بعمله *** راجع كارت العميل    ";
                                                        //MessageBox = "العميل غير مرتبط بعمله *** راجع كارت العميل   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "العميل غير مرتبط بعمله *** راجع كارت العميل    ";
                                                    //MessageBox = "العميل غير مرتبط بعمله *** راجع كارت العميل   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                Message = "العميل غير موجود    ";
                                                //MessageBox = "العميل غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType.GetValueOrDefault(0) == 2 ||
                                            (bsPaymentNote.RectSourceType.GetValueOrDefault(0) >= 15 && bsPaymentNote.RectSourceType.GetValueOrDefault(0) < 25))
                                        {
                                            if (lstVendAccs.Count == 0)
                                            {
                                                Message = "المورد غير مربوط بحساب استاذ *** راجع مستند تعريف المورد    ";
                                                //MessageBox = "المورد غير مربوط بحساب استاذ *** راجع مستند تعريف المورد   ";
                                                return false;
                                            }
                                            Cal_VendAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstVendAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف المورد *** راجع مستند تعريف المورد   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                Message = "المورد غير مربوط بحساب استاذ *** راجع مستند تعريف المورد    ";
                                                //MessageBox = "المورد غير مربوط بحساب استاذ *** راجع مستند تعريف المورد   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.VendAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "MS_Vendor";
                                            MS_Vendor cust = VendorService.GetById(CusAccs.VendorId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsPaymentNote);
                                                        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        Message = "المورد غير مرتبط بعمله *** راجع كارت المورد    ";
                                                        //MessageBox = "المورد غير مرتبط بعمله *** راجع كارت المورد   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "المورد غير مرتبط بعمله *** راجع كارت المورد    ";
                                                    //MessageBox = "المورد غير مرتبط بعمله *** راجع كارت المورد   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                Message = "المورد غير موجود    ";
                                                //MessageBox = "المورد غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType == 4 || bsPaymentNote.RectSourceType == 35 ||
                                            (bsPaymentNote.RectSourceType >= 25 &&
                                         bsPaymentNote.RectSourceType < 34))
                                        {
                                            if (lstEmpAccs.Count == 0)
                                            {
                                                MessageBox = "الموظف غير مربوط بحساب استاذ *** راجع مستند تعريف الموظف   ";
                                                return false;
                                            }
                                            Cal_EmpAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstEmpAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الموظف *** راجع مستند تعريف الموظف   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الموظف غير مربوط بحساب استاذ *** راجع مستند تعريف الموظف   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.EmpAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Hr_Employees";
                                            Hr_Employees cust = EmpService.GetById(CusAccs.EmpId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsPaymentNote);
                                                        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الموظف غير مرتبط بعمله *** راجع كارت الموظف   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "الموظف غير مرتبط بعمله *** راجع كارت الموظف   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الموظف غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType == 36 || bsPaymentNote.RectSourceType == 37)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Prod_JobOrder";
                                            Prod_JobOrder cust = JobOrderService.GetById(CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsPaymentNote);
                                                        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsPaymentNote);
                                                        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType >= 38 && bsPaymentNote.RectSourceType <= 47)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Sr_Vehicles";
                                            Sr_Vehicles cust = VehiclesService.GetById(CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                //if (cust.CurrencyId.HasValue)
                                                //{
                                                //    MS_Currency cur = CurrencyService.GetById(tran,cust.CurrencyId.Value);
                                                //    if (cur != null)
                                                //    {
                                                //        postOrder.Rate = bsPaymentNote.Rate;
                                                //        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsPaymentNote);
                                                //        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                //    }
                                                //    else
                                                //    {
                                                //        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                //        return false;
                                                //    }
                                                //}
                                                //else
                                                //{
                                                if (LocalCurrency != null)
                                                {
                                                    postOrder.Rate = bsPaymentNote.Rate;
                                                    postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsPaymentNote);
                                                    postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                }
                                                else
                                                {
                                                    MessageBox = "خطأ بالعمله المحليه   ";
                                                    return false;
                                                }
                                                //}
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType >= 48 && bsPaymentNote.RectSourceType <= 50)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Sr_VehicleJobOrder";
                                            Sr_VehicleJobOrder cust = db.Sr_VehicleJobOrder.FirstOrDefault(x => x.VJOrderId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                //if (cust.CurrencyId.HasValue)
                                                //{
                                                //    MS_Currency cur = CurrencyService.GetById(tran,cust.CurrencyId.Value);
                                                //    if (cur != null)
                                                //    {
                                                //        postOrder.Rate = bsPaymentNote.Rate;
                                                //        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsPaymentNote);
                                                //        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                //    }
                                                //    else
                                                //    {
                                                //        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                //        return false;
                                                //    }
                                                //}
                                                //else
                                                //{
                                                if (LocalCurrency != null)
                                                {
                                                    postOrder.Rate = bsPaymentNote.Rate;
                                                    postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsPaymentNote);
                                                    postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                }
                                                else
                                                {
                                                    MessageBox = "خطأ بالعمله المحليه   ";
                                                    return false;
                                                }
                                                //}
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType >= 51 && bsPaymentNote.RectSourceType <= 60)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Ms_LetterOfGuarantee";
                                            Ms_LetterOfGuarantee cust = db.Ms_LetterOfGuarantee.FirstOrDefault(x => x.LetOfGrnteeId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsPaymentNote);
                                                        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsPaymentNote);
                                                        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType >= 61 && bsPaymentNote.RectSourceType <= 63)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Sr_JobOrder";
                                            Sr_JobOrder cust = db.Sr_JobOrder.FirstOrDefault(x => x.JorderId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsPaymentNote);
                                                        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsPaymentNote);
                                                        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType >= 64 && bsPaymentNote.RectSourceType <= 66)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Repair_JobOrder";
                                            Repair_JobOrder cust = db.Repair_JobOrder.FirstOrDefault(x => x.RepairId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsPaymentNote);
                                                        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsPaymentNote);
                                                        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType >= 67 && bsPaymentNote.RectSourceType <= 77)
                                        {
                                            if (lstAssets.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_AssetAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstAssets, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.AssetAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Asset_AssetCard";
                                            Asset_AssetCard cust = db.Asset_AssetCard.FirstOrDefault(x => x.AssetId == CusAccs.AssetId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsPaymentNote);
                                                        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsPaymentNote);
                                                        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType >= 78 && bsPaymentNote.RectSourceType <= 88)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Proj_Projects";
                                            Proj_Projects cust = db.Proj_Projects.FirstOrDefault(x => x.ProjectId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsPaymentNote);
                                                        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsPaymentNote);
                                                        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType == 34)
                                        {
                                            //postOrder.HelpAccId = CusAccs.EmpAccountId;
                                            postOrder.AccountId = chrtAccount.AccountId;
                                            postOrder.IsHelpAcc = false;
                                            //postOrder.HelpAccType = "Hr_Employees";
                                            //MS_Vendor cust = VendorService.GetById(CusAccs.EmpId.Value);
                                            if (chrtAccount != null)
                                            {
                                                if (chrtAccount.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(chrtAccount.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsPaymentNote);
                                                        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الحساب غير مرتبط بعمله *** راجع دليل الحسابات   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "الحساب غير مرتبط بعمله *** راجع دليل الحسابات   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الحساب غير موجود   ";
                                                return false;
                                            }
                                        }
                                    }
                                    post.Add(postOrder);
                                }
                            #endregion

                            SkipCondition = false;
                            if (trDetails[0].AccountCashIsFixed == 2)
                            {
                                if (AnCode == null && trDetails[0].AnalaticalCodeMust.GetValueOrDefault(false))
                                {
                                    MessageBox = "الكود التحليلي اجبارى ";
                                    return false;
                                }
                                else if (AnCode == null)
                                {
                                    SkipCondition = true;
                                }
                            }
                            if (!SkipCondition)
                                #region Cash Account
                                // manage first Cash account in doctype
                                if (trDetails[0].AccountCashIsFixed.HasValue && !string.IsNullOrEmpty(trDetails[0].ValuAccountCash))
                                {
                                    //if (post.Count == 0)
                                    Cal_PostOrder postOrder = new Cal_PostOrder();
                                    postOrder.IsOpenningTerm = term.IsOpenningTerm;
                                    #region Cost Center
                                    if (trDetails[0].CostCenterIdCash.HasValue || trDetails[0].CostCenterCashIsFixed == 2)
                                    {
                                        Cal_CostCenters center = null;
                                        if (trDetails[0].CostCenterCashIsFixed == 1)
                                        {
                                            center = CostCentersService.GetById(trDetails[0].CostCenterIdCash.Value);
                                            postOrder.CostCenterId = trDetails[0].CostCenterIdCash;
                                            postOrder.HelpCostCenterId = null;
                                            postOrder.IsHelpCostCenter = false;
                                            postOrder.HelpCostCenterType = null;
                                        }
                                        else if (trDetails[0].CostCenterCashIsFixed == 2 && AnCode != null && AnCode.CostCenterId.GetValueOrDefault(0) != 0)
                                        {
                                            center = CostCentersService.GetById(AnCode.CostCenterId.Value);
                                            postOrder.CostCenterId = AnCode.CostCenterId;
                                            postOrder.HelpCostCenterId = null;
                                            postOrder.IsHelpCostCenter = false;
                                            postOrder.HelpCostCenterType = null;
                                        }
                                        else if (trDetails[0].CostCenterCashIsFixed == 0)
                                        {
                                            if (bsPaymentNote.RectSourceType.GetValueOrDefault(0) == 1 ||
                                 (bsPaymentNote.RectSourceType.GetValueOrDefault(0) >= 5 &&
                                 bsPaymentNote.RectSourceType.GetValueOrDefault(0) < 15))
                                            {
                                                MS_Customer cust = CustomerService.GetById(lstCusAccs[0].CustomerId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "MS_Customer";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى حساب النقدى و العميل غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار العميل أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType.GetValueOrDefault(0) == 2 ||
                                        (bsPaymentNote.RectSourceType.GetValueOrDefault(0) >= 15 &&
                                        bsPaymentNote.RectSourceType.GetValueOrDefault(0) < 25))
                                            {
                                                MS_Vendor cust = VendorService.GetById(lstVendAccs[0].VendorId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "MS_Vendor";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى حساب النقدى و المورد غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار المورد أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType == 4 || bsPaymentNote.RectSourceType == 35 ||
                                                (bsPaymentNote.RectSourceType >= 25 &&
                                       bsPaymentNote.RectSourceType < 34))
                                            {
                                                Hr_Employees cust = EmpService.GetById(lstEmpAccs[0].EmpId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId1.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId1;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId1;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Hr_Employees";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى حساب النقدى و الموظف غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار الموظف أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType == 36 || bsPaymentNote.RectSourceType == 37)
                                            {
                                                Prod_JobOrder cust = JobOrderService.GetById(lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Prod_JobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى حساب النقدى و أمر الشغل غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر الشغل أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType >= 38 && bsPaymentNote.RectSourceType <= 47)
                                            {
                                                Sr_Vehicles cust = VehiclesService.GetById(lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Sr_Vehicles";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى حساب النقدى و المركبه غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار المركبه أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType >= 48 && bsPaymentNote.RectSourceType <= 50)
                                            {
                                                Sr_VehicleJobOrder cust = db.Sr_VehicleJobOrder.FirstOrDefault(x => x.VJOrderId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Sr_VehicleJobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى حساب النقدى و أمر الشغل غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر الشغل أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType >= 51 && bsPaymentNote.RectSourceType <= 60)
                                            {
                                                Ms_LetterOfGuarantee cust = db.Ms_LetterOfGuarantee.FirstOrDefault(x => x.LetOfGrnteeId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId1.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId1;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId1;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Ms_LetterOfGuarantee";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى حساب النقدى و خطاب الضمان غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار خطاب الضمان أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType >= 61 && bsPaymentNote.RectSourceType <= 63)
                                            {
                                                Sr_JobOrder cust = db.Sr_JobOrder.FirstOrDefault(x => x.JorderId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Sr_JobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى حساب النقدى و أمر صيانة مركبه غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر صيانة مركبه أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType >= 64 && bsPaymentNote.RectSourceType <= 66)
                                            {
                                                Repair_JobOrder cust = db.Repair_JobOrder.FirstOrDefault(x => x.RepairId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Repair_JobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى حساب النقدى و أمر صيانة معدات غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر صيانة معدات أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType >= 67 && bsPaymentNote.RectSourceType <= 77)
                                            {
                                                Asset_AssetCard cust = db.Asset_AssetCard.FirstOrDefault(x => x.AssetId == lstAssets[0].AssetId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Asset_AssetCard";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى حساب النقدى و الأصل الثابت غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار الأصل الثابت أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType >= 78 && bsPaymentNote.RectSourceType <= 88)
                                            {
                                                Proj_Projects cust = db.Proj_Projects.FirstOrDefault(x => x.ProjectId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId1.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId1;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId1;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Proj_Projects";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى حساب النقدى و الأصل الثابت غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار الأصل الثابت أولا";
                                                    return false;
                                                }
                                            }
                                            //if (bsPaymentNote.RectSourceType == 34)
                                            //{
                                            //    if (chrtAccount.cos.CostCenterId1.HasValue)
                                            //        {
                                            //            center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                            //            postOrder.CostCenterId = cust.CostCenterId1;
                                            //            postOrder.HelpCostCenterId = cust.CostCenterId1;
                                            //            postOrder.IsHelpCostCenter = true;
                                            //            postOrder.HelpCostCenterType = "Hr_Employees";
                                            //        }
                                            //        else
                                            //        {
                                            //            Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب  و المورد غير مرتبط بمركز تكلفه";
                                            //            return false;
                                            //        }                                               
                                            //}
                                        }

                                        if (center != null)
                                        {
                                            if (center.CurrencyId.HasValue)
                                            {
                                                ////postOrder.CurrencyId = chrt.CurrencyId;
                                                postOrder.BalancCrencyBeforDebtCostCentr = center.BalanceDebitCurncy;
                                                postOrder.BalancLocalBeforDebCostCentr = center.BalanceDebitLocal;
                                                postOrder.BalancCrencyBeforCredCostCentr = center.BalanceCreditCurncy;
                                                postOrder.BalancLocalBeforCredCostCentr = center.BalanceCreditLocal;

                                            }
                                            else
                                            {
                                                Message = "عملة مركز التكلفه الحساب النقدى غير موجود *** كود مركز التكلفه =  " + center.CostCenterCode +
                                                    " اسم مركز التكلفه = " + center.CostCenterNameA;
                                                return false;
                                            }
                                        }

                                    }
                                    #endregion

                                    postOrder.TermId = term.TermId;
                                    postOrder.TableCode = tableNameHeader;
                                    postOrder.TableEntityId = bsPaymentNote.PayId;
                                    postOrder.IsPosted = false;
                                    postOrder.CurrencyId = bsPaymentNote.CurrencyId;
                                    if (trDetails[0].AccountIdCash.HasValue)
                                    {
                                        if (trDetails[0].AccountCashIsFixed == 1)
                                        {
                                            Cal_AccountChart chrt = Cal_AccountChart.GetById(trDetails[0].AccountIdCash.Value);
                                            if (chrt != null)
                                            {
                                                if (chrt.CurrencyId.HasValue)
                                                {
                                                    //postOrder.CurrencyId = chrt.CurrencyId;
                                                    //postOrder.BalaceCurrencyBefor = chrt.BalanceCurncy;
                                                    postOrder.BalaceCurrencyBeforDebit = chrt.BalanceDebitCurncy;
                                                    postOrder.BalaceLocalBeforDebit = chrt.BalanceDebitLocal;
                                                    postOrder.BalaceCurrencyBeforCredit = chrt.BalanceCreditCurncy;
                                                    postOrder.BalaceLocalBeforCredit = chrt.BalanceCreditLocal;
                                                    MS_Currency cur = CurrencyService.GetById(bsPaymentNote.CurrencyId.Value);
                                                    if (cur != null)
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                }
                                                else
                                                {
                                                    Message = "عملة الحساب  غير موجود *** كود الحساب =  " + chrt.AccountCode +
                                                        " اسم الحساب = " + chrt.AccountNameA;
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                Message = "الحساب  غير موجود . . .";
                                                return false;
                                            }
                                        }
                                        else if (trDetails[0].AccountCashIsFixed == 2)
                                        {
                                            if (AnCode == null || !AnCode.AccountId.HasValue)
                                            {
                                                Message = "الكود التحليلى أو الحساب المرتبط به غير صحيح . . .";
                                                return false;
                                            }
                                            Cal_AccountChart chrt = Cal_AccountChart.GetById(AnCode.AccountId.Value);
                                            if (chrt != null)
                                            {
                                                if (chrt.CurrencyId.HasValue)
                                                {
                                                    //postOrder.CurrencyId = chrt.CurrencyId;
                                                    postOrder.BalaceCurrencyBeforDebit = chrt.BalanceDebitCurncy;
                                                    postOrder.BalaceLocalBeforDebit = chrt.BalanceDebitLocal;
                                                    postOrder.BalaceCurrencyBeforCredit = chrt.BalanceCreditCurncy;
                                                    postOrder.BalaceLocalBeforCredit = chrt.BalanceCreditLocal;
                                                    MS_Currency cur = CurrencyService.GetById(bsPaymentNote.CurrencyId.Value);
                                                    if (cur != null)
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                }
                                                else
                                                {
                                                    Message = "عملة الحساب  غير موجود *** كود الحساب =  " + chrt.AccountCode +
                                                        " اسم الحساب = " + chrt.AccountNameA;
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                Message = "الحساب  غير موجود . . .";
                                                return false;
                                            }
                                        }
                                    }
                                    //else if (trDetails[0].AccCashDebitOrCredit != true && trDetails[0].AccDiscDebitOrCredit != true && trDetails[0].AccTaxDebitOrCredit!=true)
                                    //{
                                    //    Message = "الحساب  غير موجود بنوع السند  ";
                                    //    return false;
                                    //}
                                    if (trDetails[0].AccountCashIsFixed == 1)
                                    {
                                        postOrder.AccountId = trDetails[0].AccountIdCash.Value;
                                        if (trDetails[0].AccCashDebitOrCredit == true)
                                        {
                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsPaymentNote);
                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                        }
                                        else
                                        {
                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsPaymentNote);
                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                        }
                                        postOrder.HelpAccId = null;
                                        postOrder.IsHelpAcc = false;
                                        postOrder.HelpAccType = null;
                                    }
                                    else if (trDetails[0].AccountCashIsFixed == 2)
                                    {
                                        postOrder.AccountId = AnCode.AccountId.Value;
                                        if (trDetails[0].AccCashDebitOrCredit == true)
                                        {
                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsPaymentNote);
                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                        }
                                        else
                                        {
                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsPaymentNote);
                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                        }
                                        postOrder.HelpAccId = null;
                                        postOrder.IsHelpAcc = false;
                                        postOrder.HelpAccType = null;
                                    }
                                    else if (trDetails[0].AccountCashIsFixed == 0)
                                    {
                                        if (bsPaymentNote.RectSourceType.GetValueOrDefault(0) == 1 ||
                                    (bsPaymentNote.RectSourceType.GetValueOrDefault(0) >= 5 &&
                                    bsPaymentNote.RectSourceType.GetValueOrDefault(0) < 15))
                                        {
                                            if (lstCusAccs.Count == 0)
                                            {
                                                MessageBox = "العميل غير مربوط بحساب استاذ *** راجع مستند تعريف العميل   ";
                                                return false;
                                            }
                                            Cal_CustAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstCusAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف العميل *** راجع مستند تعريف العميل   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "العميل غير مربوط بحساب استاذ *** راجع مستند تعريف العميل   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.CustAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "MS_Customer";
                                            MS_Customer cust = CustomerService.GetById(CusAccs.CustomerId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AccCashDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "العميل غير مرتبط بعمله *** راجع كارت العميل   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "العميل غير مرتبط بعمله *** راجع كارت العميل   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "العميل غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType.GetValueOrDefault(0) == 2 ||
                                            (bsPaymentNote.RectSourceType.GetValueOrDefault(0) >= 15 &&
                                            bsPaymentNote.RectSourceType.GetValueOrDefault(0) < 25))
                                        {
                                            if (lstVendAccs.Count == 0)
                                            {
                                                MessageBox = "المورد غير مربوط بحساب استاذ *** راجع مستند تعريف المورد   ";
                                                return false;
                                            }
                                            Cal_VendAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstVendAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف المورد *** راجع مستند تعريف المورد   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "المورد غير مربوط بحساب استاذ *** راجع مستند تعريف المورد   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.VendAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "MS_Vendor";
                                            MS_Vendor cust = VendorService.GetById(CusAccs.VendorId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AccCashDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "المورد غير مرتبط بعمله *** راجع كارت المورد   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "المورد غير مرتبط بعمله *** راجع كارت المورد   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "المورد غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType == 4 || bsPaymentNote.RectSourceType == 35 ||
                                            (bsPaymentNote.RectSourceType >= 25 &&
                                      bsPaymentNote.RectSourceType < 34))
                                        {
                                            if (lstEmpAccs.Count == 0)
                                            {
                                                MessageBox = "الموظف غير مربوط بحساب استاذ *** راجع مستند تعريف الموظف   ";
                                                return false;
                                            }
                                            Cal_EmpAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstEmpAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الموظف *** راجع مستند تعريف الموظف   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الموظف غير مربوط بحساب استاذ *** راجع مستند تعريف الموظف   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.EmpAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Hr_Employees";
                                            Hr_Employees cust = EmpService.GetById(CusAccs.EmpId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AccCashDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الموظف غير مرتبط بعمله *** راجع كارت الموظف   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "الموظف غير مرتبط بعمله *** راجع كارت الموظف   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الموظف غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType == 36 || bsPaymentNote.RectSourceType == 37)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Prod_JobOrder";
                                            Prod_JobOrder cust = JobOrderService.GetById(CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AccCashDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AccCashDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType >= 38 && bsPaymentNote.RectSourceType <= 47)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Sr_Vehicles";
                                            Sr_Vehicles cust = VehiclesService.GetById(CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                //if (cust.CurrencyId.HasValue)
                                                //{
                                                //    MS_Currency cur = CurrencyService.GetById(tran,cust.CurrencyId.Value);
                                                //    if (cur != null)
                                                //    {
                                                //        postOrder.Rate = bsPaymentNote.Rate;
                                                //        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsPaymentNote);
                                                //        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                //    }
                                                //    else
                                                //    {
                                                //        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                //        return false;
                                                //    }
                                                //}
                                                //else
                                                //{
                                                if (LocalCurrency != null)
                                                {
                                                    postOrder.Rate = bsPaymentNote.Rate;

                                                    if (trDetails[0].AccCashDebitOrCredit == true)
                                                    {
                                                        postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsPaymentNote);
                                                        postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsPaymentNote);
                                                        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "خطأ بالعمله المحليه   ";
                                                    return false;
                                                }
                                                //}
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType >= 48 && bsPaymentNote.RectSourceType <= 50)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Sr_VehicleJobOrder";
                                            Sr_VehicleJobOrder cust = db.Sr_VehicleJobOrder.FirstOrDefault(x => x.VJOrderId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                //if (cust.CurrencyId.HasValue)
                                                //{
                                                //    MS_Currency cur = CurrencyService.GetById(tran,cust.CurrencyId.Value);
                                                //    if (cur != null)
                                                //    {
                                                //        postOrder.Rate = bsPaymentNote.Rate;
                                                //        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsPaymentNote);
                                                //        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                //    }
                                                //    else
                                                //    {
                                                //        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                //        return false;
                                                //    }
                                                //}
                                                //else
                                                //{
                                                if (LocalCurrency != null)
                                                {
                                                    postOrder.Rate = bsPaymentNote.Rate;

                                                    if (trDetails[0].AccCashDebitOrCredit == true)
                                                    {
                                                        postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsPaymentNote);
                                                        postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsPaymentNote);
                                                        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "خطأ بالعمله المحليه   ";
                                                    return false;
                                                }
                                                //}
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType >= 51 && bsPaymentNote.RectSourceType <= 60)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Ms_LetterOfGuarantee";
                                            Ms_LetterOfGuarantee cust = db.Ms_LetterOfGuarantee.FirstOrDefault(x => x.LetOfGrnteeId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AccCashDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AccCashDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType >= 61 && bsPaymentNote.RectSourceType <= 63)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Sr_JobOrder";
                                            Sr_JobOrder cust = db.Sr_JobOrder.FirstOrDefault(x => x.JorderId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AccCashDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AccCashDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType >= 64 && bsPaymentNote.RectSourceType <= 66)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Repair_JobOrder";
                                            Repair_JobOrder cust = db.Repair_JobOrder.FirstOrDefault(x => x.RepairId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AccCashDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AccCashDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType >= 67 && bsPaymentNote.RectSourceType <= 77)
                                        {
                                            if (lstAssets.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_AssetAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstAssets, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.AssetAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Asset_AssetCard";
                                            Asset_AssetCard cust = db.Asset_AssetCard.FirstOrDefault(x => x.AssetId == CusAccs.AssetId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AccCashDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AccCashDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType >= 78 && bsPaymentNote.RectSourceType <= 88)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Proj_Projects";
                                            Proj_Projects cust = db.Proj_Projects.FirstOrDefault(x => x.ProjectId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AccCashDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AccCashDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType == 34)
                                        {
                                            //postOrder.HelpAccId = CusAccs.EmpAccountId;
                                            postOrder.AccountId = chrtAccount.AccountId;
                                            postOrder.IsHelpAcc = false;
                                            //postOrder.HelpAccType = "Hr_Employees";
                                            //MS_Vendor cust = VendorService.GetById(CusAccs.EmpId.Value);
                                            if (chrtAccount != null)
                                            {
                                                if (chrtAccount.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(chrtAccount.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AccCashDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCash, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الحساب غير مرتبط بعمله *** راجع دليل الحسابات   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "الحساب غير مرتبط بعمله *** راجع دليل الحسابات   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الحساب غير موجود   ";
                                                return false;
                                            }
                                        }
                                    }
                                    post.Add(postOrder);
                                }
                            #endregion

                            //check analytical code condition
                            SkipCondition = false;
                            if (trDetails[0].AccountDiscIsFixed == 2)
                            {
                                if (AnCode == null && trDetails[0].AnalaticalCodeMust.GetValueOrDefault(false))
                                {
                                    MessageBox = "الكود التحليلي اجبارى ";
                                    return false;
                                }
                                else if (AnCode == null)
                                {
                                    SkipCondition = true;
                                }
                            }
                            if (!SkipCondition)
                                #region Disc Account
                                // manage first Discount account in doctype
                                if (trDetails[0].AccountDiscIsFixed.HasValue && !string.IsNullOrEmpty(trDetails[0].ValuAccountDisc))
                                {
                                    //if (post.Count == 0)
                                    Cal_PostOrder postOrder = new Cal_PostOrder();
                                    postOrder.IsOpenningTerm = term.IsOpenningTerm;
                                    #region Cost Center
                                    if (trDetails[0].CostCenterIdDisc.HasValue || trDetails[0].CostCenterDiscIsFixed == 2)
                                    {
                                        Cal_CostCenters center = null;
                                        if (trDetails[0].CostCenterDiscIsFixed == 1)
                                        {
                                            center = CostCentersService.GetById(trDetails[0].CostCenterIdDisc.Value);
                                            postOrder.CostCenterId = trDetails[0].CostCenterIdDisc;
                                            postOrder.HelpCostCenterId = null;
                                            postOrder.IsHelpCostCenter = false;
                                            postOrder.HelpCostCenterType = null;
                                        }
                                        else if (trDetails[0].CostCenterDiscIsFixed == 2 && AnCode != null && AnCode.CostCenterId.GetValueOrDefault(0) != 0)
                                        {
                                            center = CostCentersService.GetById(AnCode.CostCenterId.Value);
                                            postOrder.CostCenterId = AnCode.CostCenterId;
                                            postOrder.HelpCostCenterId = null;
                                            postOrder.IsHelpCostCenter = false;
                                            postOrder.HelpCostCenterType = null;
                                        }
                                        else if (trDetails[0].CostCenterDiscIsFixed == 0)
                                        {
                                            if (bsPaymentNote.RectSourceType.GetValueOrDefault(0) == 1 ||
                                  (bsPaymentNote.RectSourceType.GetValueOrDefault(0) >= 5 &&
                                  bsPaymentNote.RectSourceType.GetValueOrDefault(0) < 15))
                                            {
                                                MS_Customer cust = CustomerService.GetById(lstCusAccs[0].CustomerId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "MS_Customer";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى حساب الخصم و العميل غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار العميل أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType.GetValueOrDefault(0) == 2 ||
                                       (bsPaymentNote.RectSourceType.GetValueOrDefault(0) >= 15 &&
                                       bsPaymentNote.RectSourceType.GetValueOrDefault(0) < 25))
                                            {
                                                MS_Vendor cust = VendorService.GetById(lstVendAccs[0].VendorId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "MS_Vendor";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى حساب الخصم و المورد غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار المورد أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType == 4 || bsPaymentNote.RectSourceType == 35 ||
                                                (bsPaymentNote.RectSourceType >= 25 &&
                               bsPaymentNote.RectSourceType < 34))
                                            {
                                                Hr_Employees cust = EmpService.GetById(lstEmpAccs[0].EmpId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId1.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId1;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId1;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Hr_Employees";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى حساب الخصم و الموظف غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار الموظف أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType == 36 || bsPaymentNote.RectSourceType == 37)
                                            {
                                                Prod_JobOrder cust = JobOrderService.GetById(lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Prod_JobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى حساب الخصم و أمر الشغل غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر الشغل أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType >= 38 && bsPaymentNote.RectSourceType <= 47)
                                            {
                                                Sr_Vehicles cust = VehiclesService.GetById(lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Sr_Vehicles";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى حساب الخصم و المركبه غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار المركبه أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType >= 48 && bsPaymentNote.RectSourceType <= 50)
                                            {
                                                Sr_VehicleJobOrder cust = db.Sr_VehicleJobOrder.FirstOrDefault(x => x.VJOrderId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Sr_VehicleJobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى حساب الخصم و أمر الشغل غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر الشغل أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType >= 51 && bsPaymentNote.RectSourceType <= 60)
                                            {
                                                Ms_LetterOfGuarantee cust = db.Ms_LetterOfGuarantee.FirstOrDefault(x => x.LetOfGrnteeId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId1.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId1;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId1;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Ms_LetterOfGuarantee";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى حساب الخصم و خطاب الضمان غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار خطاب الضمان أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType >= 61 && bsPaymentNote.RectSourceType <= 63)
                                            {
                                                Sr_JobOrder cust = db.Sr_JobOrder.FirstOrDefault(x => x.JorderId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Sr_JobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى حساب الخصم و أمر صيانة مركبه غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر صيانة مركبه أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType >= 64 && bsPaymentNote.RectSourceType <= 66)
                                            {
                                                Repair_JobOrder cust = db.Repair_JobOrder.FirstOrDefault(x => x.RepairId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Repair_JobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى حساب الخصم و أمر صيانة معدات غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر صيانة معدات أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType >= 67 && bsPaymentNote.RectSourceType <= 77)
                                            {
                                                Asset_AssetCard cust = db.Asset_AssetCard.FirstOrDefault(x => x.AssetId == lstAssets[0].AssetId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Asset_AssetCard";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى حساب الخصم و الأصل الثابت غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار الأصل الثابت أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType >= 78 && bsPaymentNote.RectSourceType <= 88)
                                            {
                                                Proj_Projects cust = db.Proj_Projects.FirstOrDefault(x => x.ProjectId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId1.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId1;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId1;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Proj_Projects";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى حساب الخصم و الأصل الثابت غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار الأصل الثابت أولا";
                                                    return false;
                                                }
                                            }
                                            //if (bsPaymentNote.RectSourceType == 34)
                                            //{
                                            //    if (chrtAccount.cos.CostCenterId1.HasValue)
                                            //        {
                                            //            center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                            //            postOrder.CostCenterId = cust.CostCenterId1;
                                            //            postOrder.HelpCostCenterId = cust.CostCenterId1;
                                            //            postOrder.IsHelpCostCenter = true;
                                            //            postOrder.HelpCostCenterType = "Hr_Employees";
                                            //        }
                                            //        else
                                            //        {
                                            //            Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب  و المورد غير مرتبط بمركز تكلفه";
                                            //            return false;
                                            //        }                                               
                                            //}
                                        }

                                        if (center != null)
                                        {
                                            if (center.CurrencyId.HasValue)
                                            {
                                                ////postOrder.CurrencyId = chrt.CurrencyId;
                                                postOrder.BalancCrencyBeforDebtCostCentr = center.BalanceDebitCurncy;
                                                postOrder.BalancLocalBeforDebCostCentr = center.BalanceDebitLocal;
                                                postOrder.BalancCrencyBeforCredCostCentr = center.BalanceCreditCurncy;
                                                postOrder.BalancLocalBeforCredCostCentr = center.BalanceCreditLocal;

                                            }
                                            else
                                            {
                                                Message = "عملة مركز التكلفه الحساب الخصم غير موجود *** كود مركز التكلفه =  " + center.CostCenterCode +
                                                    " اسم مركز التكلفه = " + center.CostCenterNameA;
                                                return false;
                                            }
                                        }

                                    }
                                    #endregion
                                    postOrder.TermId = term.TermId;
                                    postOrder.TableCode = tableNameHeader;
                                    postOrder.TableEntityId = bsPaymentNote.PayId;
                                    postOrder.IsPosted = false;
                                    postOrder.CurrencyId = bsPaymentNote.CurrencyId;
                                    if (trDetails[0].AccountIdDisc.HasValue)
                                    {
                                        if (trDetails[0].AccountDiscIsFixed == 1)
                                        {
                                            Cal_AccountChart chrt = Cal_AccountChart.GetById(trDetails[0].AccountIdDisc.Value);
                                            if (chrt != null)
                                            {
                                                if (chrt.CurrencyId.HasValue)
                                                {
                                                    //postOrder.CurrencyId = chrt.CurrencyId;
                                                    //postOrder.BalaceCurrencyBefor = chrt.BalanceCurncy;
                                                    postOrder.BalaceCurrencyBeforDebit = chrt.BalanceDebitCurncy;
                                                    postOrder.BalaceLocalBeforDebit = chrt.BalanceDebitLocal;
                                                    postOrder.BalaceCurrencyBeforCredit = chrt.BalanceCreditCurncy;
                                                    postOrder.BalaceLocalBeforCredit = chrt.BalanceCreditLocal;
                                                    MS_Currency cur = CurrencyService.GetById(bsPaymentNote.CurrencyId.Value);
                                                    if (cur != null)
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                }
                                                else
                                                {
                                                    Message = "عملة الحساب  غير موجود *** كود الحساب =  " + chrt.AccountCode +
                                                        " اسم الحساب = " + chrt.AccountNameA;
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                Message = "الحساب  غير موجود . . .";
                                                return false;
                                            }
                                        }
                                        else if (trDetails[0].AccountDiscIsFixed == 2)
                                        {
                                            if (AnCode == null || !AnCode.AccountId.HasValue)
                                            {
                                                Message = "الكود التحليلى أو الحساب المرتبط به غير صحيح . . .";
                                                return false;
                                            }
                                            Cal_AccountChart chrt = Cal_AccountChart.GetById(AnCode.AccountId.Value);
                                            if (chrt != null)
                                            {
                                                if (chrt.CurrencyId.HasValue)
                                                {
                                                    //postOrder.CurrencyId = chrt.CurrencyId;
                                                    postOrder.BalaceCurrencyBeforDebit = chrt.BalanceDebitCurncy;
                                                    postOrder.BalaceLocalBeforDebit = chrt.BalanceDebitLocal;
                                                    postOrder.BalaceCurrencyBeforCredit = chrt.BalanceCreditCurncy;
                                                    postOrder.BalaceLocalBeforCredit = chrt.BalanceCreditLocal;
                                                    MS_Currency cur = CurrencyService.GetById(bsPaymentNote.CurrencyId.Value);
                                                    if (cur != null)
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                }
                                                else
                                                {
                                                    Message = "عملة الحساب  غير موجود *** كود الحساب =  " + chrt.AccountCode +
                                                        " اسم الحساب = " + chrt.AccountNameA;
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                Message = "الحساب  غير موجود . . .";
                                                return false;
                                            }
                                        }
                                    }
                                    //else if (trDetails[0].AccCashDebitOrCredit != true && trDetails[0].AccDiscDebitOrCredit != true && trDetails[0].AccTaxDebitOrCredit!=true)
                                    //{
                                    //    Message = "الحساب  غير موجود بنوع السند  ";
                                    //    return false;
                                    //}
                                    if (trDetails[0].AccountDiscIsFixed == 1)
                                    {
                                        postOrder.AccountId = trDetails[0].AccountIdDisc.Value;

                                        if (trDetails[0].AccDiscDebitOrCredit == true)
                                        {
                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsPaymentNote);
                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                        }
                                        else
                                        {
                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsPaymentNote);
                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                        }
                                        postOrder.HelpAccId = null;
                                        postOrder.IsHelpAcc = false;
                                        postOrder.HelpAccType = null;
                                    }
                                    else if (trDetails[0].AccountDiscIsFixed == 2)
                                    {
                                        postOrder.AccountId = AnCode.AccountId.Value;
                                        if (trDetails[0].AccDiscDebitOrCredit == true)
                                        {
                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsPaymentNote);
                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                        }
                                        else
                                        {
                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsPaymentNote);
                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                        }
                                        postOrder.HelpAccId = null;
                                        postOrder.IsHelpAcc = false;
                                        postOrder.HelpAccType = null;
                                    }
                                    else if (trDetails[0].AccountDiscIsFixed == 0)
                                    {
                                        if (bsPaymentNote.RectSourceType.GetValueOrDefault(0) == 1 ||
                                     (bsPaymentNote.RectSourceType.GetValueOrDefault(0) >= 5 &&
                                     bsPaymentNote.RectSourceType.GetValueOrDefault(0) < 15))
                                        {
                                            if (lstCusAccs.Count == 0)
                                            {
                                                MessageBox = "العميل غير مربوط بحساب استاذ *** راجع مستند تعريف العميل   ";
                                                return false;
                                            }
                                            Cal_CustAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstCusAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف العميل *** راجع مستند تعريف العميل   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "العميل غير مربوط بحساب استاذ *** راجع مستند تعريف العميل   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.CustAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "MS_Customer";
                                            MS_Customer cust = CustomerService.GetById(CusAccs.CustomerId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                        if (trDetails[0].AccDiscDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "العميل غير مرتبط بعمله *** راجع كارت العميل   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "العميل غير مرتبط بعمله *** راجع كارت العميل   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "العميل غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType.GetValueOrDefault(0) == 2 ||
                                            (bsPaymentNote.RectSourceType.GetValueOrDefault(0) >= 15 &&
                                            bsPaymentNote.RectSourceType.GetValueOrDefault(0) < 25))
                                        {
                                            if (lstVendAccs.Count == 0)
                                            {
                                                MessageBox = "المورد غير مربوط بحساب استاذ *** راجع مستند تعريف المورد   ";
                                                return false;
                                            }
                                            Cal_VendAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstVendAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف المورد *** راجع مستند تعريف المورد   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "المورد غير مربوط بحساب استاذ *** راجع مستند تعريف المورد   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.VendAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "MS_Vendor";
                                            MS_Vendor cust = VendorService.GetById(CusAccs.VendorId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                        if (trDetails[0].AccDiscDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "المورد غير مرتبط بعمله *** راجع كارت المورد   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "المورد غير مرتبط بعمله *** راجع كارت المورد   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "المورد غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType == 4 || bsPaymentNote.RectSourceType == 35 ||
                                            (bsPaymentNote.RectSourceType >= 25 && bsPaymentNote.RectSourceType < 34))
                                        {
                                            if (lstEmpAccs.Count == 0)
                                            {
                                                MessageBox = "الموظف غير مربوط بحساب استاذ *** راجع مستند تعريف الموظف   ";
                                                return false;
                                            }
                                            Cal_EmpAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstEmpAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الموظف *** راجع مستند تعريف الموظف   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الموظف غير مربوط بحساب استاذ *** راجع مستند تعريف الموظف   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.EmpAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Hr_Employees";
                                            Hr_Employees cust = EmpService.GetById(CusAccs.EmpId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                        if (trDetails[0].AccDiscDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الموظف غير مرتبط بعمله *** راجع كارت الموظف   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "الموظف غير مرتبط بعمله *** راجع كارت الموظف   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الموظف غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType == 36 || bsPaymentNote.RectSourceType == 37)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Prod_JobOrder";
                                            Prod_JobOrder cust = JobOrderService.GetById(CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AccDiscDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AccDiscDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType >= 38 && bsPaymentNote.RectSourceType <= 47)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Sr_Vehicles";
                                            Sr_Vehicles cust = VehiclesService.GetById(CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                //if (cust.CurrencyId.HasValue)
                                                //{
                                                //    MS_Currency cur = CurrencyService.GetById(tran,cust.CurrencyId.Value);
                                                //    if (cur != null)
                                                //    {
                                                //        postOrder.Rate = bsPaymentNote.Rate;
                                                //        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsPaymentNote);
                                                //        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                //    }
                                                //    else
                                                //    {
                                                //        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                //        return false;
                                                //    }
                                                //}
                                                //else
                                                //{
                                                if (LocalCurrency != null)
                                                {
                                                    postOrder.Rate = bsPaymentNote.Rate;

                                                    if (trDetails[0].AccDiscDebitOrCredit == true)
                                                    {
                                                        postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsPaymentNote);
                                                        postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsPaymentNote);
                                                        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "خطأ بالعمله المحليه   ";
                                                    return false;
                                                }
                                                //}
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType >= 48 && bsPaymentNote.RectSourceType <= 50)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Sr_VehicleJobOrder";
                                            Sr_VehicleJobOrder cust = db.Sr_VehicleJobOrder.FirstOrDefault(x => x.VJOrderId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                //if (cust.CurrencyId.HasValue)
                                                //{
                                                //    MS_Currency cur = CurrencyService.GetById(tran,cust.CurrencyId.Value);
                                                //    if (cur != null)
                                                //    {
                                                //        postOrder.Rate = bsPaymentNote.Rate;
                                                //        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsPaymentNote);
                                                //        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                //    }
                                                //    else
                                                //    {
                                                //        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                //        return false;
                                                //    }
                                                //}
                                                //else
                                                //{
                                                if (LocalCurrency != null)
                                                {
                                                    postOrder.Rate = bsPaymentNote.Rate;

                                                    if (trDetails[0].AccDiscDebitOrCredit == true)
                                                    {
                                                        postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsPaymentNote);
                                                        postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsPaymentNote);
                                                        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "خطأ بالعمله المحليه   ";
                                                    return false;
                                                }
                                                //}
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType >= 51 && bsPaymentNote.RectSourceType <= 60)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Ms_LetterOfGuarantee";
                                            Ms_LetterOfGuarantee cust = db.Ms_LetterOfGuarantee.FirstOrDefault(x => x.LetOfGrnteeId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AccDiscDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AccDiscDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType >= 61 && bsPaymentNote.RectSourceType <= 63)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Sr_JobOrder";
                                            Sr_JobOrder cust = db.Sr_JobOrder.FirstOrDefault(x => x.JorderId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AccDiscDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AccDiscDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType >= 64 && bsPaymentNote.RectSourceType <= 66)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Repair_JobOrder";
                                            Repair_JobOrder cust = db.Repair_JobOrder.FirstOrDefault(x => x.RepairId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AccDiscDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AccDiscDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType >= 67 && bsPaymentNote.RectSourceType <= 77)
                                        {
                                            if (lstAssets.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_AssetAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstAssets, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.AssetAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Asset_AssetCard";
                                            Asset_AssetCard cust = db.Asset_AssetCard.FirstOrDefault(x => x.AssetId == CusAccs.AssetId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AccDiscDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AccDiscDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType >= 78 && bsPaymentNote.RectSourceType <= 88)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Proj_Projects";
                                            Proj_Projects cust = db.Proj_Projects.FirstOrDefault(x => x.ProjectId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AccDiscDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AccDiscDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType == 34)
                                        {
                                            //postOrder.HelpAccId = CusAccs.EmpAccountId;
                                            postOrder.AccountId = chrtAccount.AccountId;
                                            postOrder.IsHelpAcc = false;
                                            //postOrder.HelpAccType = "Hr_Employees";
                                            //MS_Vendor cust = VendorService.GetById(CusAccs.EmpId.Value);
                                            if (chrtAccount != null)
                                            {
                                                if (chrtAccount.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(chrtAccount.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                        if (trDetails[0].AccDiscDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountDisc, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الحساب غير مرتبط بعمله *** راجع دليل الحسابات   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "الحساب غير مرتبط بعمله *** راجع دليل الحسابات   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الحساب غير موجود   ";
                                                return false;
                                            }
                                        }
                                    }
                                    post.Add(postOrder);
                                }
                            #endregion

                            SkipCondition = false;
                            if (trDetails[0].AccountTaxIsFixed == 2)
                            {
                                if (AnCode == null && trDetails[0].AnalaticalCodeMust.GetValueOrDefault(false))
                                {
                                    MessageBox = "الكود التحليلي اجبارى ";
                                    return false;
                                }
                                else if (AnCode == null)
                                {
                                    SkipCondition = true;
                                }
                            }
                            if (!SkipCondition)
                                #region Tax Account
                                // manage Tax account in doctype
                                if (trDetails[0].AccountTaxIsFixed.HasValue && !string.IsNullOrEmpty(trDetails[0].ValuAccountTax))
                                {
                                    //if (post.Count == 0)
                                    Cal_PostOrder postOrder = new Cal_PostOrder();
                                    postOrder.IsOpenningTerm = term.IsOpenningTerm;
                                    #region Cost Center
                                    if (trDetails[0].CostCenterIdTax.HasValue || trDetails[0].CostCenterTaxIsFixed == 2)
                                    {
                                        Cal_CostCenters center = null;
                                        if (trDetails[0].CostCenterTaxIsFixed == 1)
                                        {
                                            center = CostCentersService.GetById(trDetails[0].CostCenterIdTax.Value);
                                            postOrder.CostCenterId = trDetails[0].CostCenterIdTax;
                                            postOrder.HelpCostCenterId = null;
                                            postOrder.IsHelpCostCenter = false;
                                            postOrder.HelpCostCenterType = null;
                                        }
                                        else if (trDetails[0].CostCenterTaxIsFixed == 2 && AnCode != null && AnCode.CostCenterId.GetValueOrDefault(0) != 0)
                                        {
                                            center = CostCentersService.GetById(AnCode.CostCenterId.Value);
                                            postOrder.CostCenterId = AnCode.CostCenterId;
                                            postOrder.HelpCostCenterId = null;
                                            postOrder.IsHelpCostCenter = false;
                                            postOrder.HelpCostCenterType = null;
                                        }
                                        else if (trDetails[0].CostCenterTaxIsFixed == 0)
                                        {
                                            if (bsPaymentNote.RectSourceType.GetValueOrDefault(0) == 1 ||
                                (bsPaymentNote.RectSourceType.GetValueOrDefault(0) >= 5 &&
                                bsPaymentNote.RectSourceType.GetValueOrDefault(0) < 15))
                                            {
                                                MS_Customer cust = CustomerService.GetById(lstCusAccs[0].CustomerId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "MS_Customer";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى حساب الضرائب و العميل غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار العميل أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType.GetValueOrDefault(0) == 2 ||
                                        (bsPaymentNote.RectSourceType.GetValueOrDefault(0) >= 15 &&
                                        bsPaymentNote.RectSourceType.GetValueOrDefault(0) < 25))
                                            {
                                                MS_Vendor cust = VendorService.GetById(lstVendAccs[0].VendorId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "MS_Vendor";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى حساب الضرائب و المورد غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار المورد أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType == 4 || bsPaymentNote.RectSourceType == 35 ||
                                                (bsPaymentNote.RectSourceType >= 25 &&
                                                bsPaymentNote.RectSourceType < 34))
                                            {
                                                Hr_Employees cust = EmpService.GetById(lstEmpAccs[0].EmpId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId1.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId1;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId1;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Hr_Employees";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب  و الموظف غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار الموظف أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType == 36 || bsPaymentNote.RectSourceType == 37)
                                            {
                                                Prod_JobOrder cust = JobOrderService.GetById(lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Prod_JobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى حساب الضرائب و أمر الشغل غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر الشغل أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType >= 38 && bsPaymentNote.RectSourceType <= 47)
                                            {
                                                Sr_Vehicles cust = VehiclesService.GetById(lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Sr_Vehicles";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى حساب الضرائب و المركبه غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار المركبه أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType >= 48 && bsPaymentNote.RectSourceType <= 50)
                                            {
                                                Sr_VehicleJobOrder cust = db.Sr_VehicleJobOrder.FirstOrDefault(x => x.VJOrderId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Sr_VehicleJobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى حساب الضرائب و أمر الشغل غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر الشغل أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType >= 51 && bsPaymentNote.RectSourceType <= 60)
                                            {
                                                Ms_LetterOfGuarantee cust = db.Ms_LetterOfGuarantee.FirstOrDefault(x => x.LetOfGrnteeId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId1.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId1;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId1;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Ms_LetterOfGuarantee";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى حساب الضرائب و خطاب الضمان غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار خطاب الضمان أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType >= 61 && bsPaymentNote.RectSourceType <= 63)
                                            {
                                                Sr_JobOrder cust = db.Sr_JobOrder.FirstOrDefault(x => x.JorderId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Sr_JobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى حساب الضرائب و أمر صيانة مركبه غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر صيانة مركبه أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType >= 64 && bsPaymentNote.RectSourceType <= 66)
                                            {
                                                Repair_JobOrder cust = db.Repair_JobOrder.FirstOrDefault(x => x.RepairId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Repair_JobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى حساب الضرائب و أمر صيانة معدات غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر صيانة معدات أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType >= 67 && bsPaymentNote.RectSourceType <= 77)
                                            {
                                                Asset_AssetCard cust = db.Asset_AssetCard.FirstOrDefault(x => x.AssetId == lstAssets[0].AssetId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Asset_AssetCard";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى حساب الضرائب و الأصل الثابت غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار الأصل الثابت أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType >= 78 && bsPaymentNote.RectSourceType <= 88)
                                            {
                                                Proj_Projects cust = db.Proj_Projects.FirstOrDefault(x => x.ProjectId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId1.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId1;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId1;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Proj_Projects";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى حساب الضرائب و الأصل الثابت غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار الأصل الثابت أولا";
                                                    return false;
                                                }
                                            }
                                            //if (bsPaymentNote.RectSourceType == 34)
                                            //{
                                            //    if (chrtAccount.cos.CostCenterId1.HasValue)
                                            //        {
                                            //            center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                            //            postOrder.CostCenterId = cust.CostCenterId1;
                                            //            postOrder.HelpCostCenterId = cust.CostCenterId1;
                                            //            postOrder.IsHelpCostCenter = true;
                                            //            postOrder.HelpCostCenterType = "Hr_Employees";
                                            //        }
                                            //        else
                                            //        {
                                            //            Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب  و المورد غير مرتبط بمركز تكلفه";
                                            //            return false;
                                            //        }                                               
                                            //}
                                        }

                                        if (center != null)
                                        {
                                            if (center.CurrencyId.HasValue)
                                            {
                                                ////postOrder.CurrencyId = chrt.CurrencyId;
                                                postOrder.BalancCrencyBeforDebtCostCentr = center.BalanceDebitCurncy;
                                                postOrder.BalancLocalBeforDebCostCentr = center.BalanceDebitLocal;
                                                postOrder.BalancCrencyBeforCredCostCentr = center.BalanceCreditCurncy;
                                                postOrder.BalancLocalBeforCredCostCentr = center.BalanceCreditLocal;

                                            }
                                            else
                                            {
                                                Message = "عملة مركز التكلفه الحساب الضرائب غير موجود *** كود مركز التكلفه =  " + center.CostCenterCode +
                                                    " اسم مركز التكلفه = " + center.CostCenterNameA;
                                                return false;
                                            }
                                        }

                                    }
                                    #endregion

                                    postOrder.TermId = term.TermId;
                                    postOrder.TableCode = tableNameHeader;
                                    postOrder.TableEntityId = bsPaymentNote.PayId;
                                    postOrder.IsPosted = false;
                                    postOrder.CurrencyId = bsPaymentNote.CurrencyId;
                                    if (trDetails[0].AccountIdTax.HasValue)
                                    {
                                        if (trDetails[0].AccountTaxIsFixed == 1)
                                        {
                                            Cal_AccountChart chrt = Cal_AccountChart.GetById(trDetails[0].AccountIdTax.Value);
                                            if (chrt != null)
                                            {
                                                if (chrt.CurrencyId.HasValue)
                                                {
                                                    //postOrder.CurrencyId = chrt.CurrencyId;
                                                    //postOrder.BalaceCurrencyBefor = chrt.BalanceCurncy;
                                                    postOrder.BalaceCurrencyBeforDebit = chrt.BalanceDebitCurncy;
                                                    postOrder.BalaceLocalBeforDebit = chrt.BalanceDebitLocal;
                                                    postOrder.BalaceCurrencyBeforCredit = chrt.BalanceCreditCurncy;
                                                    postOrder.BalaceLocalBeforCredit = chrt.BalanceCreditLocal;
                                                    MS_Currency cur = CurrencyService.GetById(bsPaymentNote.CurrencyId.Value);
                                                    if (cur != null)
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                }
                                                else
                                                {
                                                    Message = "عملة الحساب  غير موجود *** كود الحساب =  " + chrt.AccountCode +
                                                        " اسم الحساب = " + chrt.AccountNameA;
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                Message = "الحساب  غير موجود . . .";
                                                return false;
                                            }
                                        }
                                        else if (trDetails[0].AccountTaxIsFixed == 2)
                                        {
                                            if (AnCode == null || !AnCode.AccountId.HasValue)
                                            {
                                                Message = "الكود التحليلى أو الحساب المرتبط به غير صحيح . . .";
                                                return false;
                                            }
                                            Cal_AccountChart chrt = Cal_AccountChart.GetById(AnCode.AccountId.Value);
                                            if (chrt != null)
                                            {
                                                if (chrt.CurrencyId.HasValue)
                                                {
                                                    //postOrder.CurrencyId = chrt.CurrencyId;
                                                    postOrder.BalaceCurrencyBeforDebit = chrt.BalanceDebitCurncy;
                                                    postOrder.BalaceLocalBeforDebit = chrt.BalanceDebitLocal;
                                                    postOrder.BalaceCurrencyBeforCredit = chrt.BalanceCreditCurncy;
                                                    postOrder.BalaceLocalBeforCredit = chrt.BalanceCreditLocal;
                                                    MS_Currency cur = CurrencyService.GetById(bsPaymentNote.CurrencyId.Value);
                                                    if (cur != null)
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                }
                                                else
                                                {
                                                    Message = "عملة الحساب  غير موجود *** كود الحساب =  " + chrt.AccountCode +
                                                        " اسم الحساب = " + chrt.AccountNameA;
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                Message = "الحساب  غير موجود . . .";
                                                return false;
                                            }
                                        }
                                    }
                                    //else if (trDetails[0].AccCashDebitOrCredit != true && trDetails[0].AccDiscDebitOrCredit != true && trDetails[0].AccTaxDebitOrCredit!=true)
                                    //{
                                    //    Message = "الحساب  غير موجود بنوع السند  ";
                                    //    return false;
                                    //}
                                    if (trDetails[0].AccountTaxIsFixed == 1)
                                    {
                                        postOrder.AccountId = trDetails[0].AccountIdTax.Value;
                                        if (trDetails[0].AccTaxDebitOrCredit == true)
                                        {
                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsPaymentNote);
                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                        }
                                        else
                                        {
                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsPaymentNote);
                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                        }
                                        postOrder.HelpAccId = null;
                                        postOrder.IsHelpAcc = false;
                                        postOrder.HelpAccType = null;
                                    }
                                    else if (trDetails[0].AccountTaxIsFixed == 2)
                                    {
                                        postOrder.AccountId = AnCode.AccountId.Value;
                                        if (trDetails[0].AccTaxDebitOrCredit == true)
                                        {
                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsPaymentNote);
                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                        }
                                        else
                                        {
                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsPaymentNote);
                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                        }
                                        postOrder.HelpAccId = null;
                                        postOrder.IsHelpAcc = false;
                                        postOrder.HelpAccType = null;
                                    }
                                    else if (trDetails[0].AccountTaxIsFixed == 0)
                                    {
                                        if (bsPaymentNote.RectSourceType.GetValueOrDefault(0) == 1 ||
                                     (bsPaymentNote.RectSourceType.GetValueOrDefault(0) >= 5 &&
                                     bsPaymentNote.RectSourceType.GetValueOrDefault(0) < 15))
                                        {
                                            if (lstCusAccs.Count == 0)
                                            {
                                                MessageBox = "العميل غير مربوط بحساب استاذ *** راجع مستند تعريف العميل   ";
                                                return false;
                                            }
                                            Cal_CustAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstCusAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف العميل *** راجع مستند تعريف العميل   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "العميل غير مربوط بحساب استاذ *** راجع مستند تعريف العميل   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.CustAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "MS_Customer";
                                            MS_Customer cust = CustomerService.GetById(CusAccs.CustomerId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                        if (trDetails[0].AccTaxDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "العميل غير مرتبط بعمله *** راجع كارت العميل   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "العميل غير مرتبط بعمله *** راجع كارت العميل   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "العميل غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType.GetValueOrDefault(0) == 2 ||
                                            (bsPaymentNote.RectSourceType.GetValueOrDefault(0) >= 15 &&
                                            bsPaymentNote.RectSourceType.GetValueOrDefault(0) < 25))
                                        {
                                            if (lstVendAccs.Count == 0)
                                            {
                                                MessageBox = "المورد غير مربوط بحساب استاذ *** راجع مستند تعريف المورد   ";
                                                return false;
                                            }
                                            Cal_VendAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstVendAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف المورد *** راجع مستند تعريف المورد   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "المورد غير مربوط بحساب استاذ *** راجع مستند تعريف المورد   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.VendAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "MS_Vendor";
                                            MS_Vendor cust = VendorService.GetById(CusAccs.VendorId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                        if (trDetails[0].AccTaxDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "المورد غير مرتبط بعمله *** راجع كارت المورد   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "المورد غير مرتبط بعمله *** راجع كارت المورد   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "المورد غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType == 4 || bsPaymentNote.RectSourceType == 35 ||
                                  (bsPaymentNote.RectSourceType >= 25 && bsPaymentNote.RectSourceType < 34))
                                        {
                                            if (lstEmpAccs.Count == 0)
                                            {
                                                MessageBox = "الموظف غير مربوط بحساب استاذ *** راجع مستند تعريف الموظف   ";
                                                return false;
                                            }
                                            Cal_EmpAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstEmpAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الموظف *** راجع مستند تعريف الموظف   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الموظف غير مربوط بحساب استاذ *** راجع مستند تعريف الموظف   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.EmpAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Hr_Employees";
                                            Hr_Employees cust = EmpService.GetById(CusAccs.EmpId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                        if (trDetails[0].AccTaxDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الموظف غير مرتبط بعمله *** راجع كارت الموظف   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "الموظف غير مرتبط بعمله *** راجع كارت الموظف   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الموظف غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType == 36 || bsPaymentNote.RectSourceType == 37)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Prod_JobOrder";
                                            Prod_JobOrder cust = JobOrderService.GetById(CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AccTaxDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AccTaxDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType >= 38 && bsPaymentNote.RectSourceType <= 47)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Sr_Vehicles";
                                            Sr_Vehicles cust = VehiclesService.GetById(CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                //if (cust.CurrencyId.HasValue)
                                                //{
                                                //    MS_Currency cur = CurrencyService.GetById(tran,cust.CurrencyId.Value);
                                                //    if (cur != null)
                                                //    {
                                                //        postOrder.Rate = bsPaymentNote.Rate;
                                                //        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsPaymentNote);
                                                //        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                //    }
                                                //    else
                                                //    {
                                                //        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                //        return false;
                                                //    }
                                                //}
                                                //else
                                                //{
                                                if (LocalCurrency != null)
                                                {
                                                    postOrder.Rate = bsPaymentNote.Rate;

                                                    if (trDetails[0].AccTaxDebitOrCredit == true)
                                                    {
                                                        postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsPaymentNote);
                                                        postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsPaymentNote);
                                                        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "خطأ بالعمله المحليه   ";
                                                    return false;
                                                }
                                                //}
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType >= 48 && bsPaymentNote.RectSourceType <= 50)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Sr_VehicleJobOrder";
                                            Sr_VehicleJobOrder cust = db.Sr_VehicleJobOrder.FirstOrDefault(x => x.VJOrderId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                //if (cust.CurrencyId.HasValue)
                                                //{
                                                //    MS_Currency cur = CurrencyService.GetById(tran,cust.CurrencyId.Value);
                                                //    if (cur != null)
                                                //    {
                                                //        postOrder.Rate = bsPaymentNote.Rate;
                                                //        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsPaymentNote);
                                                //        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                //    }
                                                //    else
                                                //    {
                                                //        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                //        return false;
                                                //    }
                                                //}
                                                //else
                                                //{
                                                if (LocalCurrency != null)
                                                {
                                                    postOrder.Rate = bsPaymentNote.Rate;

                                                    if (trDetails[0].AccTaxDebitOrCredit == true)
                                                    {
                                                        postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsPaymentNote);
                                                        postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsPaymentNote);
                                                        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "خطأ بالعمله المحليه   ";
                                                    return false;
                                                }
                                                //}
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType >= 51 && bsPaymentNote.RectSourceType <= 60)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Ms_LetterOfGuarantee";
                                            Ms_LetterOfGuarantee cust = db.Ms_LetterOfGuarantee.FirstOrDefault(x => x.LetOfGrnteeId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AccTaxDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AccTaxDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType >= 61 && bsPaymentNote.RectSourceType <= 63)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Sr_JobOrder";
                                            Sr_JobOrder cust = db.Sr_JobOrder.FirstOrDefault(x => x.JorderId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AccTaxDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AccTaxDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType >= 64 && bsPaymentNote.RectSourceType <= 66)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Repair_JobOrder";
                                            Repair_JobOrder cust = db.Repair_JobOrder.FirstOrDefault(x => x.RepairId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AccTaxDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AccTaxDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType >= 67 && bsPaymentNote.RectSourceType <= 77)
                                        {
                                            if (lstAssets.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_AssetAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstAssets, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.AssetAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Asset_AssetCard";
                                            Asset_AssetCard cust = db.Asset_AssetCard.FirstOrDefault(x => x.AssetId == CusAccs.AssetId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AccTaxDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AccTaxDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType >= 78 && bsPaymentNote.RectSourceType <= 88)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Proj_Projects";
                                            Proj_Projects cust = db.Proj_Projects.FirstOrDefault(x => x.ProjectId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AccTaxDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AccTaxDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType == 34)
                                        {
                                            //postOrder.HelpAccId = CusAccs.EmpAccountId;
                                            postOrder.AccountId = chrtAccount.AccountId;
                                            postOrder.IsHelpAcc = false;
                                            //postOrder.HelpAccType = "Hr_Employees";
                                            //MS_Vendor cust = VendorService.GetById(CusAccs.EmpId.Value);
                                            if (chrtAccount != null)
                                            {
                                                if (chrtAccount.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(chrtAccount.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                        if (trDetails[0].AccTaxDebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountTax, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الحساب غير مرتبط بعمله *** راجع دليل الحسابات   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "الحساب غير مرتبط بعمله *** راجع دليل الحسابات   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الحساب غير موجود   ";
                                                return false;
                                            }
                                        }
                                    }
                                    post.Add(postOrder);
                                }
                            #endregion

                            SkipCondition = false;
                            if (trDetails[0].AddAccount1IsFixed == 2)
                            {
                                if (AnCode == null && trDetails[0].AnalaticalCodeMust.GetValueOrDefault(false))
                                {
                                    MessageBox = "الكود التحليلي اجبارى ";
                                    return false;
                                }
                                else if (AnCode == null)
                                {
                                    SkipCondition = true;
                                }
                            }
                            if (!SkipCondition)
                                #region AddAccount1 Account
                                // manage Tax account in doctype
                                if (trDetails[0].AddAccount1IsFixed.HasValue && !string.IsNullOrEmpty(trDetails[0].ValuAddAccount1))
                                {
                                    //if (post.Count == 0)
                                    Cal_PostOrder postOrder = new Cal_PostOrder(); postOrder.IsOpenningTerm = term.IsOpenningTerm;
                                    #region Cost Center
                                    if (trDetails[0].AddCostCenterId1.HasValue || trDetails[0].AddCostCenter1IsFixed == 2)
                                    {
                                        Cal_CostCenters center = null;
                                        if (trDetails[0].AddCostCenter1IsFixed == 1)
                                        {
                                            center = CostCentersService.GetById(trDetails[0].AddCostCenterId1.Value);
                                            postOrder.CostCenterId = trDetails[0].AddCostCenterId1;
                                            postOrder.HelpCostCenterId = null;
                                            postOrder.IsHelpCostCenter = false;
                                            postOrder.HelpCostCenterType = null;
                                        }
                                        else if (trDetails[0].AddCostCenter1IsFixed == 2 && AnCode != null && AnCode.CostCenterId.GetValueOrDefault(0) != 0)
                                        {
                                            center = CostCentersService.GetById(AnCode.CostCenterId.Value);
                                            postOrder.CostCenterId = AnCode.CostCenterId;
                                            postOrder.HelpCostCenterId = null;
                                            postOrder.IsHelpCostCenter = false;
                                            postOrder.HelpCostCenterType = null;
                                        }
                                        else if (trDetails[0].AddCostCenter1IsFixed == 0)
                                        {
                                            if (bsPaymentNote.RectSourceType.GetValueOrDefault(0) == 1 ||
                                 (bsPaymentNote.RectSourceType.GetValueOrDefault(0) >= 5 &&
                                 bsPaymentNote.RectSourceType.GetValueOrDefault(0) < 15))
                                            {
                                                MS_Customer cust = CustomerService.GetById(lstCusAccs[0].CustomerId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "MS_Customer";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 1 و العميل غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار العميل أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType.GetValueOrDefault(0) == 2 ||
                                         (bsPaymentNote.RectSourceType.GetValueOrDefault(0) >= 15 &&
                                         bsPaymentNote.RectSourceType.GetValueOrDefault(0) < 25))
                                            {
                                                MS_Vendor cust = VendorService.GetById(lstVendAccs[0].VendorId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "MS_Vendor";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 1 و المورد غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار المورد أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType == 4 || bsPaymentNote.RectSourceType == 35 ||
                                      (bsPaymentNote.RectSourceType >= 25 &&
                                      bsPaymentNote.RectSourceType < 34))
                                            {
                                                Hr_Employees cust = EmpService.GetById(lstEmpAccs[0].EmpId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId1.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId1;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId1;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Hr_Employees";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب  و الموظف غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار الموظف أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType == 36 || bsPaymentNote.RectSourceType == 37)
                                            {
                                                Prod_JobOrder cust = JobOrderService.GetById(lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Prod_JobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 1 و أمر الشغل غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر الشغل أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType >= 38 && bsPaymentNote.RectSourceType <= 47)
                                            {
                                                Sr_Vehicles cust = VehiclesService.GetById(lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Sr_Vehicles";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 1 و المركبه غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار المركبه أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType >= 48 && bsPaymentNote.RectSourceType <= 50)
                                            {
                                                Sr_VehicleJobOrder cust = db.Sr_VehicleJobOrder.FirstOrDefault(x => x.VJOrderId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Sr_VehicleJobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 1 و أمر الشغل غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر الشغل أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType >= 51 && bsPaymentNote.RectSourceType <= 60)
                                            {
                                                Ms_LetterOfGuarantee cust = db.Ms_LetterOfGuarantee.FirstOrDefault(x => x.LetOfGrnteeId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId1.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId1;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId1;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Ms_LetterOfGuarantee";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 1 و خطاب الضمان غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار خطاب الضمان أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType >= 61 && bsPaymentNote.RectSourceType <= 63)
                                            {
                                                Sr_JobOrder cust = db.Sr_JobOrder.FirstOrDefault(x => x.JorderId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Sr_JobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 1 و أمر صيانة مركبه غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر صيانة مركبه أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType >= 64 && bsPaymentNote.RectSourceType <= 66)
                                            {
                                                Repair_JobOrder cust = db.Repair_JobOrder.FirstOrDefault(x => x.RepairId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Repair_JobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 1 و أمر صيانة معدات غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر صيانة معدات أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType >= 67 && bsPaymentNote.RectSourceType <= 77)
                                            {
                                                Asset_AssetCard cust = db.Asset_AssetCard.FirstOrDefault(x => x.AssetId == lstAssets[0].AssetId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Asset_AssetCard";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 1 و الأصل الثابت غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار الأصل الثابت أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType >= 78 && bsPaymentNote.RectSourceType <= 88)
                                            {
                                                Proj_Projects cust = db.Proj_Projects.FirstOrDefault(x => x.ProjectId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId1.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId1;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId1;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Proj_Projects";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 1 و الأصل الثابت غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار الأصل الثابت أولا";
                                                    return false;
                                                }
                                            }
                                            //if (bsPaymentNote.RectSourceType == 34)
                                            //{
                                            //    if (chrtAccount.cos.CostCenterId1.HasValue)
                                            //        {
                                            //            center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                            //            postOrder.CostCenterId = cust.CostCenterId1;
                                            //            postOrder.HelpCostCenterId = cust.CostCenterId1;
                                            //            postOrder.IsHelpCostCenter = true;
                                            //            postOrder.HelpCostCenterType = "Hr_Employees";
                                            //        }
                                            //        else
                                            //        {
                                            //            Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب  و المورد غير مرتبط بمركز تكلفه";
                                            //            return false;
                                            //        }                                               
                                            //}
                                        }

                                        if (center != null)
                                        {
                                            if (center.CurrencyId.HasValue)
                                            {
                                                ////postOrder.CurrencyId = chrt.CurrencyId;
                                                postOrder.BalancCrencyBeforDebtCostCentr = center.BalanceDebitCurncy;
                                                postOrder.BalancLocalBeforDebCostCentr = center.BalanceDebitLocal;
                                                postOrder.BalancCrencyBeforCredCostCentr = center.BalanceCreditCurncy;
                                                postOrder.BalancLocalBeforCredCostCentr = center.BalanceCreditLocal;

                                            }
                                            else
                                            {
                                                Message = "عملة مركز التكلفه الحساب الاضافى 1 غير موجود *** كود مركز التكلفه =  " + center.CostCenterCode +
                                                    " اسم مركز التكلفه = " + center.CostCenterNameA;
                                                return false;
                                            }
                                        }

                                    }
                                    #endregion
                                    postOrder.TermId = term.TermId;
                                    postOrder.TableCode = tableNameHeader;
                                    postOrder.TableEntityId = bsPaymentNote.PayId;
                                    postOrder.IsPosted = false;
                                    postOrder.CurrencyId = bsPaymentNote.CurrencyId;
                                    if (trDetails[0].AddAccountId1.HasValue)
                                    {
                                        if (trDetails[0].AddAccount1IsFixed == 1)
                                        {
                                            Cal_AccountChart chrt = Cal_AccountChart.GetById(trDetails[0].AddAccountId1.Value);
                                            if (chrt != null)
                                            {
                                                if (chrt.CurrencyId.HasValue)
                                                {
                                                    //postOrder.CurrencyId = chrt.CurrencyId;
                                                    //postOrder.BalaceCurrencyBefor = chrt.BalanceCurncy;
                                                    postOrder.BalaceCurrencyBeforDebit = chrt.BalanceDebitCurncy;
                                                    postOrder.BalaceLocalBeforDebit = chrt.BalanceDebitLocal;
                                                    postOrder.BalaceCurrencyBeforCredit = chrt.BalanceCreditCurncy;
                                                    postOrder.BalaceLocalBeforCredit = chrt.BalanceCreditLocal;
                                                    MS_Currency cur = CurrencyService.GetById(bsPaymentNote.CurrencyId.Value);
                                                    if (cur != null)
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                }
                                                else
                                                {
                                                    Message = "عملة الحساب  غير موجود *** كود الحساب =  " + chrt.AccountCode +
                                                        " اسم الحساب = " + chrt.AccountNameA;
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                Message = "الحساب  غير موجود . . .";
                                                return false;
                                            }
                                        }
                                        else if (trDetails[0].AddAccount1IsFixed == 2)
                                        {
                                            if (AnCode == null || !AnCode.AccountId.HasValue)
                                            {
                                                Message = "الكود التحليلى أو الحساب المرتبط به غير صحيح . . .";
                                                return false;
                                            }
                                            Cal_AccountChart chrt = Cal_AccountChart.GetById(AnCode.AccountId.Value);
                                            if (chrt != null)
                                            {
                                                if (chrt.CurrencyId.HasValue)
                                                {
                                                    //postOrder.CurrencyId = chrt.CurrencyId;
                                                    postOrder.BalaceCurrencyBeforDebit = chrt.BalanceDebitCurncy;
                                                    postOrder.BalaceLocalBeforDebit = chrt.BalanceDebitLocal;
                                                    postOrder.BalaceCurrencyBeforCredit = chrt.BalanceCreditCurncy;
                                                    postOrder.BalaceLocalBeforCredit = chrt.BalanceCreditLocal;
                                                    MS_Currency cur = CurrencyService.GetById(bsPaymentNote.CurrencyId.Value);
                                                    if (cur != null)
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                }
                                                else
                                                {
                                                    Message = "عملة الحساب  غير موجود *** كود الحساب =  " + chrt.AccountCode +
                                                        " اسم الحساب = " + chrt.AccountNameA;
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                Message = "الحساب  غير موجود . . .";
                                                return false;
                                            }
                                        }
                                    }
                                    //else if (trDetails[0].AccCashDebitOrCredit != true && trDetails[0].AccDiscDebitOrCredit != true && trDetails[0].AccTaxDebitOrCredit!=true)
                                    //{
                                    //    Message = "الحساب  غير موجود بنوع السند  ";
                                    //    return false;
                                    //}
                                    if (trDetails[0].AddAccount1IsFixed == 1)
                                    {
                                        postOrder.AccountId = trDetails[0].AddAccountId1.Value;
                                        if (trDetails[0].AddAcc1DebitOrCredit == true)
                                        {
                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsPaymentNote);
                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                        }
                                        else
                                        {
                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsPaymentNote);
                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                        }

                                        postOrder.HelpAccId = null;
                                        postOrder.IsHelpAcc = false;
                                        postOrder.HelpAccType = null;
                                    }
                                    else if (trDetails[0].AddAccount1IsFixed == 2)
                                    {
                                        postOrder.AccountId = AnCode.AccountId.Value;
                                        if (trDetails[0].AddAcc1DebitOrCredit == true)
                                        {
                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsPaymentNote);
                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                        }
                                        else
                                        {
                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsPaymentNote);
                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                        }

                                        postOrder.HelpAccId = null;
                                        postOrder.IsHelpAcc = false;
                                        postOrder.HelpAccType = null;
                                    }
                                    else if (trDetails[0].AddAccount1IsFixed == 0)
                                    {
                                        if (bsPaymentNote.RectSourceType.GetValueOrDefault(0) == 1 ||
                                     (bsPaymentNote.RectSourceType.GetValueOrDefault(0) >= 5 &&
                                     bsPaymentNote.RectSourceType.GetValueOrDefault(0) < 15))
                                        {
                                            if (lstCusAccs.Count == 0)
                                            {
                                                MessageBox = "العميل غير مربوط بحساب استاذ *** راجع مستند تعريف العميل   ";
                                                return false;
                                            }
                                            Cal_CustAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstCusAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف العميل *** راجع مستند تعريف العميل   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "العميل غير مربوط بحساب استاذ *** راجع مستند تعريف العميل   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.CustAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "MS_Customer";
                                            MS_Customer cust = CustomerService.GetById(CusAccs.CustomerId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                        if (trDetails[0].AddAcc1DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "العميل غير مرتبط بعمله *** راجع كارت العميل   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "العميل غير مرتبط بعمله *** راجع كارت العميل   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "العميل غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType.GetValueOrDefault(0) == 2 ||
                                           (bsPaymentNote.RectSourceType.GetValueOrDefault(0) >= 15 &&
                                           bsPaymentNote.RectSourceType.GetValueOrDefault(0) < 25))
                                        {
                                            if (lstVendAccs.Count == 0)
                                            {
                                                MessageBox = "المورد غير مربوط بحساب استاذ *** راجع مستند تعريف المورد   ";
                                                return false;
                                            }
                                            Cal_VendAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstVendAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف المورد *** راجع مستند تعريف المورد   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "المورد غير مربوط بحساب استاذ *** راجع مستند تعريف المورد   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.VendAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "MS_Vendor";
                                            MS_Vendor cust = VendorService.GetById(CusAccs.VendorId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                        if (trDetails[0].AddAcc1DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "المورد غير مرتبط بعمله *** راجع كارت المورد   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "المورد غير مرتبط بعمله *** راجع كارت المورد   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "المورد غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType == 4 || bsPaymentNote.RectSourceType == 35 ||
                              (bsPaymentNote.RectSourceType >= 25 && bsPaymentNote.RectSourceType < 34))
                                        {
                                            if (lstEmpAccs.Count == 0)
                                            {
                                                MessageBox = "الموظف غير مربوط بحساب استاذ *** راجع مستند تعريف الموظف   ";
                                                return false;
                                            }
                                            Cal_EmpAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstEmpAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الموظف *** راجع مستند تعريف الموظف   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الموظف غير مربوط بحساب استاذ *** راجع مستند تعريف الموظف   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.EmpAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Hr_Employees";
                                            Hr_Employees cust = EmpService.GetById(CusAccs.EmpId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                        if (trDetails[0].AddAcc1DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الموظف غير مرتبط بعمله *** راجع كارت الموظف   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "الموظف غير مرتبط بعمله *** راجع كارت الموظف   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الموظف غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType == 36 || bsPaymentNote.RectSourceType == 37)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Prod_JobOrder";
                                            Prod_JobOrder cust = JobOrderService.GetById(CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AddAcc1DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AddAcc1DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType >= 38 && bsPaymentNote.RectSourceType <= 47)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Sr_Vehicles";
                                            Sr_Vehicles cust = VehiclesService.GetById(CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                //if (cust.CurrencyId.HasValue)
                                                //{
                                                //    MS_Currency cur = CurrencyService.GetById(tran,cust.CurrencyId.Value);
                                                //    if (cur != null)
                                                //    {
                                                //        postOrder.Rate = bsPaymentNote.Rate;
                                                //        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsPaymentNote);
                                                //        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                //    }
                                                //    else
                                                //    {
                                                //        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                //        return false;
                                                //    }
                                                //}
                                                //else
                                                //{
                                                if (LocalCurrency != null)
                                                {
                                                    postOrder.Rate = bsPaymentNote.Rate;

                                                    if (trDetails[0].AddAcc1DebitOrCredit == true)
                                                    {
                                                        postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsPaymentNote);
                                                        postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsPaymentNote);
                                                        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "خطأ بالعمله المحليه   ";
                                                    return false;
                                                }
                                                //}
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType >= 48 && bsPaymentNote.RectSourceType <= 50)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Sr_VehicleJobOrder";
                                            Sr_VehicleJobOrder cust = db.Sr_VehicleJobOrder.FirstOrDefault(x => x.VJOrderId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                //if (cust.CurrencyId.HasValue)
                                                //{
                                                //    MS_Currency cur = CurrencyService.GetById(tran,cust.CurrencyId.Value);
                                                //    if (cur != null)
                                                //    {
                                                //        postOrder.Rate = bsPaymentNote.Rate;
                                                //        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsPaymentNote);
                                                //        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                //    }
                                                //    else
                                                //    {
                                                //        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                //        return false;
                                                //    }
                                                //}
                                                //else
                                                //{
                                                if (LocalCurrency != null)
                                                {
                                                    postOrder.Rate = bsPaymentNote.Rate;

                                                    if (trDetails[0].AddAcc1DebitOrCredit == true)
                                                    {
                                                        postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsPaymentNote);
                                                        postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsPaymentNote);
                                                        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "خطأ بالعمله المحليه   ";
                                                    return false;
                                                }
                                                //}
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType >= 51 && bsPaymentNote.RectSourceType <= 60)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Ms_LetterOfGuarantee";
                                            Ms_LetterOfGuarantee cust = db.Ms_LetterOfGuarantee.FirstOrDefault(x => x.LetOfGrnteeId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AddAcc1DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AddAcc1DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType >= 61 && bsPaymentNote.RectSourceType <= 63)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Sr_JobOrder";
                                            Sr_JobOrder cust = db.Sr_JobOrder.FirstOrDefault(x => x.JorderId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AddAcc1DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AddAcc1DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType >= 64 && bsPaymentNote.RectSourceType <= 66)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Repair_JobOrder";
                                            Repair_JobOrder cust = db.Repair_JobOrder.FirstOrDefault(x => x.RepairId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AddAcc1DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AddAcc1DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType >= 67 && bsPaymentNote.RectSourceType <= 77)
                                        {
                                            if (lstAssets.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_AssetAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstAssets, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.AssetAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Asset_AssetCard";
                                            Asset_AssetCard cust = db.Asset_AssetCard.FirstOrDefault(x => x.AssetId == CusAccs.AssetId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AddAcc1DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AddAcc1DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType >= 78 && bsPaymentNote.RectSourceType <= 88)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Proj_Projects";
                                            Proj_Projects cust = db.Proj_Projects.FirstOrDefault(x => x.ProjectId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AddAcc1DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AddAcc1DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType == 34)
                                        {
                                            //postOrder.HelpAccId = CusAccs.EmpAccountId;
                                            postOrder.AccountId = chrtAccount.AccountId;
                                            postOrder.IsHelpAcc = false;
                                            //postOrder.HelpAccType = "Hr_Employees";
                                            //MS_Vendor cust = VendorService.GetById(CusAccs.EmpId.Value);
                                            if (chrtAccount != null)
                                            {
                                                if (chrtAccount.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(chrtAccount.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                        if (trDetails[0].AddAcc1DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount1, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الحساب غير مرتبط بعمله *** راجع دليل الحسابات   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "الحساب غير مرتبط بعمله *** راجع دليل الحسابات   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الحساب غير موجود   ";
                                                return false;
                                            }
                                        }
                                    }
                                    post.Add(postOrder);
                                }
                            #endregion

                            SkipCondition = false;
                            if (trDetails[0].AddAccountIsFixed2 == 2)
                            {
                                if (AnCode == null && trDetails[0].AnalaticalCodeMust.GetValueOrDefault(false))
                                {
                                    MessageBox = "الكود التحليلي اجبارى ";
                                    return false;
                                }
                                else if (AnCode == null)
                                {
                                    SkipCondition = true;
                                }
                            }
                            if (!SkipCondition)
                                #region AddAccount2 Account
                                // manage Tax account in doctype
                                if (trDetails[0].AddAccountIsFixed2.HasValue && !string.IsNullOrEmpty(trDetails[0].ValuAddAccount2))
                                {
                                    //if (post.Count == 0)
                                    Cal_PostOrder postOrder = new Cal_PostOrder(); postOrder.IsOpenningTerm = term.IsOpenningTerm;
                                    #region Cost center
                                    if (trDetails[0].AddCostCenterId2.HasValue || trDetails[0].AddCostCenterIsFixed2 == 2)
                                    {
                                        Cal_CostCenters center = null;
                                        if (trDetails[0].AddCostCenterIsFixed2 == 1)
                                        {
                                            center = CostCentersService.GetById(trDetails[0].AddCostCenterId2.Value);
                                            postOrder.CostCenterId = trDetails[0].AddCostCenterId2;
                                            postOrder.HelpCostCenterId = null;
                                            postOrder.IsHelpCostCenter = false;
                                            postOrder.HelpCostCenterType = null;
                                        }
                                        else if (trDetails[0].AddCostCenterIsFixed2 == 2 && AnCode != null && AnCode.CostCenterId.GetValueOrDefault(0) != 0)
                                        {
                                            center = CostCentersService.GetById(AnCode.CostCenterId.Value);
                                            postOrder.CostCenterId = AnCode.CostCenterId;
                                            postOrder.HelpCostCenterId = null;
                                            postOrder.IsHelpCostCenter = false;
                                            postOrder.HelpCostCenterType = null;
                                        }
                                        else if (trDetails[0].AddCostCenterIsFixed2 == 0)
                                        {
                                            if (bsPaymentNote.RectSourceType.GetValueOrDefault(0) == 1 ||
                                 (bsPaymentNote.RectSourceType.GetValueOrDefault(0) >= 5 &&
                                 bsPaymentNote.RectSourceType.GetValueOrDefault(0) < 15))
                                            {
                                                MS_Customer cust = CustomerService.GetById(lstCusAccs[0].CustomerId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "MS_Customer";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 2 و العميل غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار العميل أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType.GetValueOrDefault(0) == 2 ||
                                         (bsPaymentNote.RectSourceType.GetValueOrDefault(0) >= 15 &&
                                         bsPaymentNote.RectSourceType.GetValueOrDefault(0) < 25))
                                            {
                                                MS_Vendor cust = VendorService.GetById(lstVendAccs[0].VendorId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "MS_Vendor";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 2 و المورد غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار المورد أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType == 4 || bsPaymentNote.RectSourceType == 35 ||
                         (bsPaymentNote.RectSourceType >= 25 &&
                         bsPaymentNote.RectSourceType < 34))
                                            {
                                                Hr_Employees cust = EmpService.GetById(lstEmpAccs[0].EmpId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId1.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId1;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId1;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Hr_Employees";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب  و الموظف غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار الموظف أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType == 36 || bsPaymentNote.RectSourceType == 37)
                                            {
                                                Prod_JobOrder cust = JobOrderService.GetById(lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Prod_JobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 2 و أمر الشغل غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر الشغل أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType >= 38 && bsPaymentNote.RectSourceType <= 47)
                                            {
                                                Sr_Vehicles cust = VehiclesService.GetById(lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Sr_Vehicles";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 2 و المركبه غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار المركبه أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType >= 48 && bsPaymentNote.RectSourceType <= 50)
                                            {
                                                Sr_VehicleJobOrder cust = db.Sr_VehicleJobOrder.FirstOrDefault(x => x.VJOrderId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Sr_VehicleJobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 2 و أمر الشغل غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر الشغل أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType >= 51 && bsPaymentNote.RectSourceType <= 60)
                                            {
                                                Ms_LetterOfGuarantee cust = db.Ms_LetterOfGuarantee.FirstOrDefault(x => x.LetOfGrnteeId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId1.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId1;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId1;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Ms_LetterOfGuarantee";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 2 و خطاب الضمان غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار خطاب الضمان أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType >= 61 && bsPaymentNote.RectSourceType <= 63)
                                            {
                                                Sr_JobOrder cust = db.Sr_JobOrder.FirstOrDefault(x => x.JorderId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Sr_JobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 2 و أمر صيانة مركبه غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر صيانة مركبه أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType >= 64 && bsPaymentNote.RectSourceType <= 66)
                                            {
                                                Repair_JobOrder cust = db.Repair_JobOrder.FirstOrDefault(x => x.RepairId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Repair_JobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 2 و أمر صيانة معدات غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر صيانة معدات أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType >= 67 && bsPaymentNote.RectSourceType <= 77)
                                            {
                                                Asset_AssetCard cust = db.Asset_AssetCard.FirstOrDefault(x => x.AssetId == lstAssets[0].AssetId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Asset_AssetCard";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 2 و الأصل الثابت غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار الأصل الثابت أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType >= 78 && bsPaymentNote.RectSourceType <= 88)
                                            {
                                                Proj_Projects cust = db.Proj_Projects.FirstOrDefault(x => x.ProjectId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId1.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId1;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId1;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Proj_Projects";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 2 و الأصل الثابت غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار الأصل الثابت أولا";
                                                    return false;
                                                }
                                            }
                                            //if (bsPaymentNote.RectSourceType == 34)
                                            //{
                                            //    if (chrtAccount.cos.CostCenterId1.HasValue)
                                            //        {
                                            //            center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                            //            postOrder.CostCenterId = cust.CostCenterId1;
                                            //            postOrder.HelpCostCenterId = cust.CostCenterId1;
                                            //            postOrder.IsHelpCostCenter = true;
                                            //            postOrder.HelpCostCenterType = "Hr_Employees";
                                            //        }
                                            //        else
                                            //        {
                                            //            Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب  و المورد غير مرتبط بمركز تكلفه";
                                            //            return false;
                                            //        }                                               
                                            //}
                                        }

                                        if (center != null)
                                        {
                                            if (center.CurrencyId.HasValue)
                                            {
                                                ////postOrder.CurrencyId = chrt.CurrencyId;
                                                postOrder.BalancCrencyBeforDebtCostCentr = center.BalanceDebitCurncy;
                                                postOrder.BalancLocalBeforDebCostCentr = center.BalanceDebitLocal;
                                                postOrder.BalancCrencyBeforCredCostCentr = center.BalanceCreditCurncy;
                                                postOrder.BalancLocalBeforCredCostCentr = center.BalanceCreditLocal;

                                            }
                                            else
                                            {
                                                Message = "عملة مركز التكلفه الحساب الاضافى 2 غير موجود *** كود مركز التكلفه =  " + center.CostCenterCode +
                                                    " اسم مركز التكلفه = " + center.CostCenterNameA;
                                                return false;
                                            }
                                        }

                                    }
                                    #endregion
                                    postOrder.TermId = term.TermId;
                                    postOrder.TableCode = tableNameHeader;
                                    postOrder.TableEntityId = bsPaymentNote.PayId;
                                    postOrder.IsPosted = false;
                                    postOrder.CurrencyId = bsPaymentNote.CurrencyId;
                                    if (trDetails[0].AddAccountId2.HasValue)
                                    {
                                        if (trDetails[0].AddAccountIsFixed2 == 1)
                                        {
                                            Cal_AccountChart chrt = Cal_AccountChart.GetById(trDetails[0].AddAccountId2.Value);
                                            if (chrt != null)
                                            {
                                                if (chrt.CurrencyId.HasValue)
                                                {
                                                    //postOrder.CurrencyId = chrt.CurrencyId;
                                                    //postOrder.BalaceCurrencyBefor = chrt.BalanceCurncy;
                                                    postOrder.BalaceCurrencyBeforDebit = chrt.BalanceDebitCurncy;
                                                    postOrder.BalaceLocalBeforDebit = chrt.BalanceDebitLocal;
                                                    postOrder.BalaceCurrencyBeforCredit = chrt.BalanceCreditCurncy;
                                                    postOrder.BalaceLocalBeforCredit = chrt.BalanceCreditLocal;
                                                    MS_Currency cur = CurrencyService.GetById(bsPaymentNote.CurrencyId.Value);
                                                    if (cur != null)
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                }
                                                else
                                                {
                                                    Message = "عملة الحساب  غير موجود *** كود الحساب =  " + chrt.AccountCode +
                                                        " اسم الحساب = " + chrt.AccountNameA;
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                Message = "الحساب  غير موجود . . .";
                                                return false;
                                            }
                                        }
                                        else if (trDetails[0].AddAccountIsFixed2 == 2)
                                        {
                                            if (AnCode == null || !AnCode.AccountId.HasValue)
                                            {
                                                Message = "الكود التحليلى أو الحساب المرتبط به غير صحيح . . .";
                                                return false;
                                            }
                                            Cal_AccountChart chrt = Cal_AccountChart.GetById(AnCode.AccountId.Value);
                                            if (chrt != null)
                                            {
                                                if (chrt.CurrencyId.HasValue)
                                                {
                                                    //postOrder.CurrencyId = chrt.CurrencyId;
                                                    postOrder.BalaceCurrencyBeforDebit = chrt.BalanceDebitCurncy;
                                                    postOrder.BalaceLocalBeforDebit = chrt.BalanceDebitLocal;
                                                    postOrder.BalaceCurrencyBeforCredit = chrt.BalanceCreditCurncy;
                                                    postOrder.BalaceLocalBeforCredit = chrt.BalanceCreditLocal;
                                                    MS_Currency cur = CurrencyService.GetById(bsPaymentNote.CurrencyId.Value);
                                                    if (cur != null)
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                }
                                                else
                                                {
                                                    Message = "عملة الحساب  غير موجود *** كود الحساب =  " + chrt.AccountCode +
                                                        " اسم الحساب = " + chrt.AccountNameA;
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                Message = "الحساب  غير موجود . . .";
                                                return false;
                                            }
                                        }
                                    }
                                    //else if (trDetails[0].AccCashDebitOrCredit != true && trDetails[0].AccDiscDebitOrCredit != true && trDetails[0].AccTaxDebitOrCredit!=true)
                                    //{
                                    //    Message = "الحساب  غير موجود بنوع السند  ";
                                    //    return false;
                                    //}
                                    if (trDetails[0].AddAccountIsFixed2 == 1)
                                    {
                                        postOrder.AccountId = trDetails[0].AddAccountId2.Value;
                                        if (trDetails[0].AddAcc2DebitOrCredit == true)
                                        {
                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsPaymentNote);
                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                        }
                                        else
                                        {
                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsPaymentNote);
                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                        }

                                        postOrder.HelpAccId = null;
                                        postOrder.IsHelpAcc = false;
                                        postOrder.HelpAccType = null;
                                    }
                                    else if (trDetails[0].AddAccountIsFixed2 == 2)
                                    {
                                        postOrder.AccountId = AnCode.AccountId.Value;
                                        if (trDetails[0].AddAcc2DebitOrCredit == true)
                                        {
                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsPaymentNote);
                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                        }
                                        else
                                        {
                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsPaymentNote);
                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                        }

                                        postOrder.HelpAccId = null;
                                        postOrder.IsHelpAcc = false;
                                        postOrder.HelpAccType = null;
                                    }
                                    else if (trDetails[0].AddAccountIsFixed2 == 0)
                                    {
                                        if (bsPaymentNote.RectSourceType.GetValueOrDefault(0) == 1 ||
                                    (bsPaymentNote.RectSourceType.GetValueOrDefault(0) >= 5 &&
                                    bsPaymentNote.RectSourceType.GetValueOrDefault(0) < 15))
                                        {
                                            if (lstCusAccs.Count == 0)
                                            {
                                                MessageBox = "العميل غير مربوط بحساب استاذ *** راجع مستند تعريف العميل   ";
                                                return false;
                                            }
                                            Cal_CustAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstCusAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف العميل *** راجع مستند تعريف العميل   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "العميل غير مربوط بحساب استاذ *** راجع مستند تعريف العميل   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.CustAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "MS_Customer";
                                            MS_Customer cust = CustomerService.GetById(CusAccs.CustomerId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                        if (trDetails[0].AddAcc2DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "العميل غير مرتبط بعمله *** راجع كارت العميل   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "العميل غير مرتبط بعمله *** راجع كارت العميل   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "العميل غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType.GetValueOrDefault(0) == 2 ||
                                            (bsPaymentNote.RectSourceType.GetValueOrDefault(0) >= 15 &&
                                            bsPaymentNote.RectSourceType.GetValueOrDefault(0) < 25))
                                        {
                                            if (lstVendAccs.Count == 0)
                                            {
                                                MessageBox = "المورد غير مربوط بحساب استاذ *** راجع مستند تعريف المورد   ";
                                                return false;
                                            }
                                            Cal_VendAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstVendAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف المورد *** راجع مستند تعريف المورد   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "المورد غير مربوط بحساب استاذ *** راجع مستند تعريف المورد   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.VendAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "MS_Vendor";
                                            MS_Vendor cust = VendorService.GetById(CusAccs.VendorId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                        if (trDetails[0].AddAcc2DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "المورد غير مرتبط بعمله *** راجع كارت المورد   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "المورد غير مرتبط بعمله *** راجع كارت المورد   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "المورد غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType == 4 || bsPaymentNote.RectSourceType == 35 ||
                          (bsPaymentNote.RectSourceType >= 25 && bsPaymentNote.RectSourceType < 34))
                                        {
                                            if (lstEmpAccs.Count == 0)
                                            {
                                                MessageBox = "الموظف غير مربوط بحساب استاذ *** راجع مستند تعريف الموظف   ";
                                                return false;
                                            }
                                            Cal_EmpAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstEmpAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الموظف *** راجع مستند تعريف الموظف   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الموظف غير مربوط بحساب استاذ *** راجع مستند تعريف الموظف   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.EmpAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Hr_Employees";
                                            Hr_Employees cust = EmpService.GetById(CusAccs.EmpId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                        if (trDetails[0].AddAcc2DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الموظف غير مرتبط بعمله *** راجع كارت الموظف   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "الموظف غير مرتبط بعمله *** راجع كارت الموظف   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الموظف غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType == 36 || bsPaymentNote.RectSourceType == 37)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Prod_JobOrder";
                                            Prod_JobOrder cust = JobOrderService.GetById(CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AddAcc2DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AddAcc2DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType >= 38 && bsPaymentNote.RectSourceType <= 47)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Sr_Vehicles";
                                            Sr_Vehicles cust = VehiclesService.GetById(CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                //if (cust.CurrencyId.HasValue)
                                                //{
                                                //    MS_Currency cur = CurrencyService.GetById(tran,cust.CurrencyId.Value);
                                                //    if (cur != null)
                                                //    {
                                                //        postOrder.Rate = bsPaymentNote.Rate;
                                                //        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsPaymentNote);
                                                //        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                //    }
                                                //    else
                                                //    {
                                                //        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                //        return false;
                                                //    }
                                                //}
                                                //else
                                                //{
                                                if (LocalCurrency != null)
                                                {
                                                    postOrder.Rate = bsPaymentNote.Rate;

                                                    if (trDetails[0].AddAcc2DebitOrCredit == true)
                                                    {
                                                        postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsPaymentNote);
                                                        postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsPaymentNote);
                                                        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "خطأ بالعمله المحليه   ";
                                                    return false;
                                                }
                                                //}
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType >= 48 && bsPaymentNote.RectSourceType <= 50)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Sr_VehicleJobOrder";
                                            Sr_VehicleJobOrder cust = db.Sr_VehicleJobOrder.FirstOrDefault(x => x.VJOrderId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                //if (cust.CurrencyId.HasValue)
                                                //{
                                                //    MS_Currency cur = CurrencyService.GetById(tran,cust.CurrencyId.Value);
                                                //    if (cur != null)
                                                //    {
                                                //        postOrder.Rate = bsPaymentNote.Rate;
                                                //        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsPaymentNote);
                                                //        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                //    }
                                                //    else
                                                //    {
                                                //        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                //        return false;
                                                //    }
                                                //}
                                                //else
                                                //{
                                                if (LocalCurrency != null)
                                                {
                                                    postOrder.Rate = bsPaymentNote.Rate;

                                                    if (trDetails[0].AddAcc2DebitOrCredit == true)
                                                    {
                                                        postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsPaymentNote);
                                                        postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsPaymentNote);
                                                        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "خطأ بالعمله المحليه   ";
                                                    return false;
                                                }
                                                //}
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType >= 51 && bsPaymentNote.RectSourceType <= 60)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Ms_LetterOfGuarantee";
                                            Ms_LetterOfGuarantee cust = db.Ms_LetterOfGuarantee.FirstOrDefault(x => x.LetOfGrnteeId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AddAcc2DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AddAcc2DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType >= 61 && bsPaymentNote.RectSourceType <= 63)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Sr_JobOrder";
                                            Sr_JobOrder cust = db.Sr_JobOrder.FirstOrDefault(x => x.JorderId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AddAcc2DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AddAcc2DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType >= 64 && bsPaymentNote.RectSourceType <= 66)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Repair_JobOrder";
                                            Repair_JobOrder cust = db.Repair_JobOrder.FirstOrDefault(x => x.RepairId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AddAcc2DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AddAcc2DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType >= 67 && bsPaymentNote.RectSourceType <= 77)
                                        {
                                            if (lstAssets.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_AssetAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstAssets, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.AssetAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Asset_AssetCard";
                                            Asset_AssetCard cust = db.Asset_AssetCard.FirstOrDefault(x => x.AssetId == CusAccs.AssetId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AddAcc2DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AddAcc2DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType >= 78 && bsPaymentNote.RectSourceType <= 88)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Proj_Projects";
                                            Proj_Projects cust = db.Proj_Projects.FirstOrDefault(x => x.ProjectId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AddAcc2DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AddAcc2DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType == 34)
                                        {
                                            //postOrder.HelpAccId = CusAccs.EmpAccountId;
                                            postOrder.AccountId = chrtAccount.AccountId;
                                            postOrder.IsHelpAcc = false;
                                            //postOrder.HelpAccType = "Hr_Employees";
                                            //MS_Vendor cust = VendorService.GetById(CusAccs.EmpId.Value);
                                            if (chrtAccount != null)
                                            {
                                                if (chrtAccount.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(chrtAccount.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                        if (trDetails[0].AddAcc2DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount2, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الحساب غير مرتبط بعمله *** راجع دليل الحسابات   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "الحساب غير مرتبط بعمله *** راجع دليل الحسابات   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الحساب غير موجود   ";
                                                return false;
                                            }
                                        }
                                    }
                                    post.Add(postOrder);
                                }
                            #endregion

                            SkipCondition = false;
                            if (trDetails[0].AddAccountIsFixed3 == 2)
                            {
                                if (AnCode == null && trDetails[0].AnalaticalCodeMust.GetValueOrDefault(false))
                                {
                                    MessageBox = "الكود التحليلي اجبارى ";
                                    return false;
                                }
                                else if (AnCode == null)
                                {
                                    SkipCondition = true;
                                }
                            }
                            if (!SkipCondition)
                                #region AddAccount3 Account
                                // manage Tax account in doctype
                                if (trDetails[0].AddAccountIsFixed3.HasValue && !string.IsNullOrEmpty(trDetails[0].ValuAddAccount3))
                                {
                                    //if (post.Count == 0)
                                    Cal_PostOrder postOrder = new Cal_PostOrder(); postOrder.IsOpenningTerm = term.IsOpenningTerm;

                                    #region Cost center
                                    if (trDetails[0].AddCostCenterId3.HasValue || trDetails[0].AddCostCenterIsFixed3 == 2)
                                    {
                                        Cal_CostCenters center = null;
                                        if (trDetails[0].AddCostCenterIsFixed3 == 1)
                                        {
                                            center = CostCentersService.GetById(trDetails[0].AddCostCenterId3.Value);
                                            postOrder.CostCenterId = trDetails[0].AddCostCenterId3;
                                            postOrder.HelpCostCenterId = null;
                                            postOrder.IsHelpCostCenter = false;
                                            postOrder.HelpCostCenterType = null;
                                        }
                                        else if (trDetails[0].AddCostCenterIsFixed3 == 2 && AnCode != null && AnCode.CostCenterId.GetValueOrDefault(0) != 0)
                                        {
                                            center = CostCentersService.GetById(AnCode.CostCenterId.Value);
                                            postOrder.CostCenterId = AnCode.CostCenterId;
                                            postOrder.HelpCostCenterId = null;
                                            postOrder.IsHelpCostCenter = false;
                                            postOrder.HelpCostCenterType = null;
                                        }
                                        else if (trDetails[0].AddCostCenterIsFixed3 == 0)
                                        {
                                            if (bsPaymentNote.RectSourceType.GetValueOrDefault(0) == 1 ||
                                 (bsPaymentNote.RectSourceType.GetValueOrDefault(0) >= 5 &&
                                 bsPaymentNote.RectSourceType.GetValueOrDefault(0) < 15))
                                            {
                                                MS_Customer cust = CustomerService.GetById(lstCusAccs[0].CustomerId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "MS_Customer";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 3 و العميل غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار العميل أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType.GetValueOrDefault(0) == 2 ||
                                         (bsPaymentNote.RectSourceType.GetValueOrDefault(0) >= 15 &&
                                         bsPaymentNote.RectSourceType.GetValueOrDefault(0) < 25))
                                            {
                                                MS_Vendor cust = VendorService.GetById(lstVendAccs[0].VendorId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "MS_Vendor";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 3 و المورد غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار المورد أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType == 4 || bsPaymentNote.RectSourceType == 35 ||
                                                (bsPaymentNote.RectSourceType >= 25 &&
                                                bsPaymentNote.RectSourceType < 34))
                                            {
                                                Hr_Employees cust = EmpService.GetById(lstEmpAccs[0].EmpId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId1.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId1;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId1;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Hr_Employees";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب  و الموظف غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار الموظف أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType == 36 || bsPaymentNote.RectSourceType == 37)
                                            {
                                                Prod_JobOrder cust = JobOrderService.GetById(lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Prod_JobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 3 و أمر الشغل غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر الشغل أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType >= 38 && bsPaymentNote.RectSourceType <= 47)
                                            {
                                                Sr_Vehicles cust = VehiclesService.GetById(lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Sr_Vehicles";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 3 و المركبه غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار المركبه أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType >= 48 && bsPaymentNote.RectSourceType <= 50)
                                            {
                                                Sr_VehicleJobOrder cust = db.Sr_VehicleJobOrder.FirstOrDefault(x => x.VJOrderId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Sr_VehicleJobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 3 و أمر الشغل غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر الشغل أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType >= 51 && bsPaymentNote.RectSourceType <= 60)
                                            {
                                                Ms_LetterOfGuarantee cust = db.Ms_LetterOfGuarantee.FirstOrDefault(x => x.LetOfGrnteeId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId1.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId1;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId1;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Ms_LetterOfGuarantee";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 3 و خطاب الضمان غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار خطاب الضمان أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType >= 61 && bsPaymentNote.RectSourceType <= 63)
                                            {
                                                Sr_JobOrder cust = db.Sr_JobOrder.FirstOrDefault(x => x.JorderId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Sr_JobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 3 و أمر صيانة مركبه غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر صيانة مركبه أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType >= 64 && bsPaymentNote.RectSourceType <= 66)
                                            {
                                                Repair_JobOrder cust = db.Repair_JobOrder.FirstOrDefault(x => x.RepairId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Repair_JobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 3 و أمر صيانة معدات غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر صيانة معدات أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType >= 67 && bsPaymentNote.RectSourceType <= 77)
                                            {
                                                Asset_AssetCard cust = db.Asset_AssetCard.FirstOrDefault(x => x.AssetId == lstAssets[0].AssetId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Asset_AssetCard";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 3 و الأصل الثابت غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار الأصل الثابت أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType >= 78 && bsPaymentNote.RectSourceType <= 88)
                                            {
                                                Proj_Projects cust = db.Proj_Projects.FirstOrDefault(x => x.ProjectId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId1.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId1;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId1;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Proj_Projects";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 3 و الأصل الثابت غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار الأصل الثابت أولا";
                                                    return false;
                                                }
                                            }
                                            //if (bsPaymentNote.RectSourceType == 34)
                                            //{
                                            //    if (chrtAccount.cos.CostCenterId1.HasValue)
                                            //        {
                                            //            center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                            //            postOrder.CostCenterId = cust.CostCenterId1;
                                            //            postOrder.HelpCostCenterId = cust.CostCenterId1;
                                            //            postOrder.IsHelpCostCenter = true;
                                            //            postOrder.HelpCostCenterType = "Hr_Employees";
                                            //        }
                                            //        else
                                            //        {
                                            //            Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب  و المورد غير مرتبط بمركز تكلفه";
                                            //            return false;
                                            //        }                                               
                                            //}
                                        }

                                        if (center != null)
                                        {
                                            if (center.CurrencyId.HasValue)
                                            {
                                                ////postOrder.CurrencyId = chrt.CurrencyId;
                                                postOrder.BalancCrencyBeforDebtCostCentr = center.BalanceDebitCurncy;
                                                postOrder.BalancLocalBeforDebCostCentr = center.BalanceDebitLocal;
                                                postOrder.BalancCrencyBeforCredCostCentr = center.BalanceCreditCurncy;
                                                postOrder.BalancLocalBeforCredCostCentr = center.BalanceCreditLocal;

                                            }
                                            else
                                            {
                                                Message = "عملة مركز التكلفه الحساب الاضافى 3 غير موجود *** كود مركز التكلفه =  " + center.CostCenterCode +
                                                    " اسم مركز التكلفه = " + center.CostCenterNameA;
                                                return false;
                                            }
                                        }

                                    }
                                    #endregion

                                    postOrder.TermId = term.TermId;
                                    postOrder.TableCode = tableNameHeader;
                                    postOrder.TableEntityId = bsPaymentNote.PayId;
                                    postOrder.IsPosted = false;
                                    postOrder.CurrencyId = bsPaymentNote.CurrencyId;
                                    if (trDetails[0].AddAccountId3.HasValue)
                                    {
                                        if (trDetails[0].AddAccountIsFixed3 == 1)
                                        {
                                            Cal_AccountChart chrt = Cal_AccountChart.GetById(trDetails[0].AddAccountId3.Value);
                                            if (chrt != null)
                                            {
                                                if (chrt.CurrencyId.HasValue)
                                                {
                                                    //postOrder.CurrencyId = chrt.CurrencyId;
                                                    //postOrder.BalaceCurrencyBefor = chrt.BalanceCurncy;
                                                    postOrder.BalaceCurrencyBeforDebit = chrt.BalanceDebitCurncy;
                                                    postOrder.BalaceLocalBeforDebit = chrt.BalanceDebitLocal;
                                                    postOrder.BalaceCurrencyBeforCredit = chrt.BalanceCreditCurncy;
                                                    postOrder.BalaceLocalBeforCredit = chrt.BalanceCreditLocal;
                                                    MS_Currency cur = CurrencyService.GetById(bsPaymentNote.CurrencyId.Value);
                                                    if (cur != null)
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                }
                                                else
                                                {
                                                    Message = "عملة الحساب  غير موجود *** كود الحساب =  " + chrt.AccountCode +
                                                        " اسم الحساب = " + chrt.AccountNameA;
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                Message = "الحساب  غير موجود . . .";
                                                return false;
                                            }
                                        }
                                        else if (trDetails[0].AddAccountIsFixed3 == 2)
                                        {
                                            if (AnCode == null || !AnCode.AccountId.HasValue)
                                            {
                                                Message = "الكود التحليلى أو الحساب المرتبط به غير صحيح . . .";
                                                return false;
                                            }
                                            Cal_AccountChart chrt = Cal_AccountChart.GetById(AnCode.AccountId.Value);
                                            if (chrt != null)
                                            {
                                                if (chrt.CurrencyId.HasValue)
                                                {
                                                    //postOrder.CurrencyId = chrt.CurrencyId;
                                                    postOrder.BalaceCurrencyBeforDebit = chrt.BalanceDebitCurncy;
                                                    postOrder.BalaceLocalBeforDebit = chrt.BalanceDebitLocal;
                                                    postOrder.BalaceCurrencyBeforCredit = chrt.BalanceCreditCurncy;
                                                    postOrder.BalaceLocalBeforCredit = chrt.BalanceCreditLocal;
                                                    MS_Currency cur = CurrencyService.GetById(bsPaymentNote.CurrencyId.Value);
                                                    if (cur != null)
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                }
                                                else
                                                {
                                                    Message = "عملة الحساب  غير موجود *** كود الحساب =  " + chrt.AccountCode +
                                                        " اسم الحساب = " + chrt.AccountNameA;
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                Message = "الحساب  غير موجود . . .";
                                                return false;
                                            }
                                        }
                                    }
                                    //else if (trDetails[0].AccCashDebitOrCredit != true && trDetails[0].AccDiscDebitOrCredit != true && trDetails[0].AccTaxDebitOrCredit!=true)
                                    //{
                                    //    Message = "الحساب  غير موجود بنوع السند  ";
                                    //    return false;
                                    //}
                                    if (trDetails[0].AddAccountIsFixed3 == 1)
                                    {
                                        postOrder.AccountId = trDetails[0].AddAccountId3.Value;
                                        if (trDetails[0].AddAcc3DebitOrCredit == true)
                                        {
                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsPaymentNote);
                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                        }
                                        else
                                        {
                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsPaymentNote);
                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                        }

                                        postOrder.HelpAccId = null;
                                        postOrder.IsHelpAcc = false;
                                        postOrder.HelpAccType = null;
                                    }
                                    else if (trDetails[0].AddAccountIsFixed3 == 2)
                                    {
                                        postOrder.AccountId = AnCode.AccountId.Value;
                                        if (trDetails[0].AddAcc3DebitOrCredit == true)
                                        {
                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsPaymentNote);
                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                        }
                                        else
                                        {
                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsPaymentNote);
                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                        }

                                        postOrder.HelpAccId = null;
                                        postOrder.IsHelpAcc = false;
                                        postOrder.HelpAccType = null;
                                    }
                                    else if (trDetails[0].AddAccountIsFixed3 == 0)
                                    {
                                        if (bsPaymentNote.RectSourceType.GetValueOrDefault(0) == 1 ||
                                    (bsPaymentNote.RectSourceType.GetValueOrDefault(0) >= 5 &&
                                    bsPaymentNote.RectSourceType.GetValueOrDefault(0) < 15))
                                        {
                                            if (lstCusAccs.Count == 0)
                                            {
                                                MessageBox = "العميل غير مربوط بحساب استاذ *** راجع مستند تعريف العميل   ";
                                                return false;
                                            }
                                            Cal_CustAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstCusAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف العميل *** راجع مستند تعريف العميل   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "العميل غير مربوط بحساب استاذ *** راجع مستند تعريف العميل   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.CustAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "MS_Customer";
                                            MS_Customer cust = CustomerService.GetById(CusAccs.CustomerId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                        if (trDetails[0].AddAcc3DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "العميل غير مرتبط بعمله *** راجع كارت العميل   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "العميل غير مرتبط بعمله *** راجع كارت العميل   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "العميل غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType.GetValueOrDefault(0) == 2 ||
                                            (bsPaymentNote.RectSourceType.GetValueOrDefault(0) >= 15 &&
                                            bsPaymentNote.RectSourceType.GetValueOrDefault(0) < 25))
                                        {
                                            if (lstVendAccs.Count == 0)
                                            {
                                                MessageBox = "المورد غير مربوط بحساب استاذ *** راجع مستند تعريف المورد   ";
                                                return false;
                                            }
                                            Cal_VendAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstVendAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف المورد *** راجع مستند تعريف المورد   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "المورد غير مربوط بحساب استاذ *** راجع مستند تعريف المورد   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.VendAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "MS_Vendor";
                                            MS_Vendor cust = VendorService.GetById(CusAccs.VendorId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                        if (trDetails[0].AddAcc3DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "المورد غير مرتبط بعمله *** راجع كارت المورد   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "المورد غير مرتبط بعمله *** راجع كارت المورد   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "المورد غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType == 4 || bsPaymentNote.RectSourceType == 35 ||
                                            (bsPaymentNote.RectSourceType >= 25 && bsPaymentNote.RectSourceType < 34))
                                        {
                                            if (lstEmpAccs.Count == 0)
                                            {
                                                MessageBox = "الموظف غير مربوط بحساب استاذ *** راجع مستند تعريف الموظف   ";
                                                return false;
                                            }
                                            Cal_EmpAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstEmpAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الموظف *** راجع مستند تعريف الموظف   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الموظف غير مربوط بحساب استاذ *** راجع مستند تعريف الموظف   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.EmpAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Hr_Employees";
                                            Hr_Employees cust = EmpService.GetById(CusAccs.EmpId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                        if (trDetails[0].AddAcc3DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الموظف غير مرتبط بعمله *** راجع كارت الموظف   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "الموظف غير مرتبط بعمله *** راجع كارت الموظف   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الموظف غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType == 36 || bsPaymentNote.RectSourceType == 37)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Prod_JobOrder";
                                            Prod_JobOrder cust = JobOrderService.GetById(CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AddAcc3DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AddAcc3DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType >= 38 && bsPaymentNote.RectSourceType <= 47)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Sr_Vehicles";
                                            Sr_Vehicles cust = VehiclesService.GetById(CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                //if (cust.CurrencyId.HasValue)
                                                //{
                                                //    MS_Currency cur = CurrencyService.GetById(tran,cust.CurrencyId.Value);
                                                //    if (cur != null)
                                                //    {
                                                //        postOrder.Rate = bsPaymentNote.Rate;
                                                //        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsPaymentNote);
                                                //        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                //    }
                                                //    else
                                                //    {
                                                //        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                //        return false;
                                                //    }
                                                //}
                                                //else
                                                //{
                                                if (LocalCurrency != null)
                                                {
                                                    postOrder.Rate = bsPaymentNote.Rate;

                                                    if (trDetails[0].AddAcc3DebitOrCredit == true)
                                                    {
                                                        postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsPaymentNote);
                                                        postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsPaymentNote);
                                                        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "خطأ بالعمله المحليه   ";
                                                    return false;
                                                }
                                                //}
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType >= 48 && bsPaymentNote.RectSourceType <= 50)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Sr_VehicleJobOrder";
                                            Sr_VehicleJobOrder cust = db.Sr_VehicleJobOrder.FirstOrDefault(x => x.VJOrderId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                //if (cust.CurrencyId.HasValue)
                                                //{
                                                //    MS_Currency cur = CurrencyService.GetById(tran,cust.CurrencyId.Value);
                                                //    if (cur != null)
                                                //    {
                                                //        postOrder.Rate = bsPaymentNote.Rate;
                                                //        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsPaymentNote);
                                                //        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                //    }
                                                //    else
                                                //    {
                                                //        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                //        return false;
                                                //    }
                                                //}
                                                //else
                                                //{
                                                if (LocalCurrency != null)
                                                {
                                                    postOrder.Rate = bsPaymentNote.Rate;

                                                    if (trDetails[0].AddAcc3DebitOrCredit == true)
                                                    {
                                                        postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsPaymentNote);
                                                        postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsPaymentNote);
                                                        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "خطأ بالعمله المحليه   ";
                                                    return false;
                                                }
                                                //}
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType >= 51 && bsPaymentNote.RectSourceType <= 60)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Ms_LetterOfGuarantee";
                                            Ms_LetterOfGuarantee cust = db.Ms_LetterOfGuarantee.FirstOrDefault(x => x.LetOfGrnteeId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AddAcc3DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AddAcc3DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType >= 61 && bsPaymentNote.RectSourceType <= 63)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Sr_JobOrder";
                                            Sr_JobOrder cust = db.Sr_JobOrder.FirstOrDefault(x => x.JorderId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AddAcc3DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AddAcc3DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType >= 64 && bsPaymentNote.RectSourceType <= 66)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Repair_JobOrder";
                                            Repair_JobOrder cust = db.Repair_JobOrder.FirstOrDefault(x => x.RepairId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AddAcc3DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AddAcc3DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType >= 67 && bsPaymentNote.RectSourceType <= 77)
                                        {
                                            if (lstAssets.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_AssetAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstAssets, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.AssetAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Asset_AssetCard";
                                            Asset_AssetCard cust = db.Asset_AssetCard.FirstOrDefault(x => x.AssetId == CusAccs.AssetId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AddAcc3DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AddAcc3DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType >= 78 && bsPaymentNote.RectSourceType <= 88)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Proj_Projects";
                                            Proj_Projects cust = db.Proj_Projects.FirstOrDefault(x => x.ProjectId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AddAcc3DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AddAcc3DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType == 34)
                                        {
                                            //postOrder.HelpAccId = CusAccs.EmpAccountId;
                                            postOrder.AccountId = chrtAccount.AccountId;
                                            postOrder.IsHelpAcc = false;
                                            //postOrder.HelpAccType = "Hr_Employees";
                                            //MS_Vendor cust = VendorService.GetById(CusAccs.EmpId.Value);
                                            if (chrtAccount != null)
                                            {
                                                if (chrtAccount.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(chrtAccount.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                        if (trDetails[0].AddAcc3DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount3, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الحساب غير مرتبط بعمله *** راجع دليل الحسابات   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "الحساب غير مرتبط بعمله *** راجع دليل الحسابات   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الحساب غير موجود   ";
                                                return false;
                                            }
                                        }
                                    }
                                    post.Add(postOrder);
                                }
                            #endregion

                            SkipCondition = false;
                            if (trDetails[0].AddAccountIsFixed4 == 2)
                            {
                                if (AnCode == null && trDetails[0].AnalaticalCodeMust.GetValueOrDefault(false))
                                {
                                    MessageBox = "الكود التحليلي اجبارى ";
                                    return false;
                                }
                                else if (AnCode == null)
                                {
                                    SkipCondition = true;
                                }
                            }
                            if (!SkipCondition)
                                #region AddAccount4 Account
                                // manage Tax account in doctype
                                if (trDetails[0].AddAccountIsFixed4.HasValue && !string.IsNullOrEmpty(trDetails[0].ValuAddAccount4))
                                {
                                    //if (post.Count == 0)
                                    Cal_PostOrder postOrder = new Cal_PostOrder(); postOrder.IsOpenningTerm = term.IsOpenningTerm;
                                    #region Cost Center
                                    if (trDetails[0].AddCostCenterId4.HasValue || trDetails[0].AddCostCenterIsFixed4 == 2)
                                    {
                                        Cal_CostCenters center = null;
                                        if (trDetails[0].AddCostCenterIsFixed4 == 1)
                                        {
                                            center = CostCentersService.GetById(trDetails[0].AddCostCenterId4.Value);
                                            postOrder.CostCenterId = trDetails[0].AddCostCenterId4;
                                            postOrder.HelpCostCenterId = null;
                                            postOrder.IsHelpCostCenter = false;
                                            postOrder.HelpCostCenterType = null;
                                        }
                                        else if (trDetails[0].AddCostCenterIsFixed4 == 2 && AnCode != null && AnCode.CostCenterId.GetValueOrDefault(0) != 0)
                                        {
                                            center = CostCentersService.GetById(AnCode.CostCenterId.Value);
                                            postOrder.CostCenterId = AnCode.CostCenterId;
                                            postOrder.HelpCostCenterId = null;
                                            postOrder.IsHelpCostCenter = false;
                                            postOrder.HelpCostCenterType = null;
                                        }
                                        else if (trDetails[0].AddCostCenterIsFixed4 == 0)
                                        {
                                            if (bsPaymentNote.RectSourceType.GetValueOrDefault(0) == 1 ||
                                 (bsPaymentNote.RectSourceType.GetValueOrDefault(0) >= 5 &&
                                 bsPaymentNote.RectSourceType.GetValueOrDefault(0) < 15))
                                            {
                                                MS_Customer cust = CustomerService.GetById(lstCusAccs[0].CustomerId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "MS_Customer";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 4 و العميل غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار العميل أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType.GetValueOrDefault(0) == 2 ||
                                          (bsPaymentNote.RectSourceType.GetValueOrDefault(0) >= 15 &&
                                          bsPaymentNote.RectSourceType.GetValueOrDefault(0) < 25))
                                            {
                                                MS_Vendor cust = VendorService.GetById(lstVendAccs[0].VendorId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "MS_Vendor";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 4 و المورد غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار المورد أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType == 4 || bsPaymentNote.RectSourceType == 35 ||
                                            (bsPaymentNote.RectSourceType >= 25 &&
                                            bsPaymentNote.RectSourceType < 34))
                                            {
                                                Hr_Employees cust = EmpService.GetById(lstEmpAccs[0].EmpId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId1.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId1;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId1;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Hr_Employees";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب  و الموظف غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار الموظف أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType == 36 || bsPaymentNote.RectSourceType == 37)
                                            {
                                                Prod_JobOrder cust = JobOrderService.GetById(lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Prod_JobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 4 و أمر الشغل غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر الشغل أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType >= 38 && bsPaymentNote.RectSourceType <= 47)
                                            {
                                                Sr_Vehicles cust = VehiclesService.GetById(lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Sr_Vehicles";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 4 و المركبه غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار المركبه أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType >= 48 && bsPaymentNote.RectSourceType <= 50)
                                            {
                                                Sr_VehicleJobOrder cust = db.Sr_VehicleJobOrder.FirstOrDefault(x => x.VJOrderId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Sr_VehicleJobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 4 و أمر الشغل غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر الشغل أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType >= 51 && bsPaymentNote.RectSourceType <= 60)
                                            {
                                                Ms_LetterOfGuarantee cust = db.Ms_LetterOfGuarantee.FirstOrDefault(x => x.LetOfGrnteeId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId1.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId1;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId1;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Ms_LetterOfGuarantee";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 4 و خطاب الضمان غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار خطاب الضمان أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType >= 61 && bsPaymentNote.RectSourceType <= 63)
                                            {
                                                Sr_JobOrder cust = db.Sr_JobOrder.FirstOrDefault(x => x.JorderId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Sr_JobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 4 و أمر صيانة مركبه غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر صيانة مركبه أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType >= 64 && bsPaymentNote.RectSourceType <= 66)
                                            {
                                                Repair_JobOrder cust = db.Repair_JobOrder.FirstOrDefault(x => x.RepairId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Repair_JobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 4 و أمر صيانة معدات غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر صيانة معدات أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType >= 67 && bsPaymentNote.RectSourceType <= 77)
                                            {
                                                Asset_AssetCard cust = db.Asset_AssetCard.FirstOrDefault(x => x.AssetId == lstAssets[0].AssetId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Asset_AssetCard";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 4 و الأصل الثابت غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار الأصل الثابت أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType >= 78 && bsPaymentNote.RectSourceType <= 88)
                                            {
                                                Proj_Projects cust = db.Proj_Projects.FirstOrDefault(x => x.ProjectId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId1.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId1;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId1;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Proj_Projects";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 4 و الأصل الثابت غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار الأصل الثابت أولا";
                                                    return false;
                                                }
                                            }
                                            //if (bsPaymentNote.RectSourceType == 34)
                                            //{
                                            //    if (chrtAccount.cos.CostCenterId1.HasValue)
                                            //        {
                                            //            center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                            //            postOrder.CostCenterId = cust.CostCenterId1;
                                            //            postOrder.HelpCostCenterId = cust.CostCenterId1;
                                            //            postOrder.IsHelpCostCenter = true;
                                            //            postOrder.HelpCostCenterType = "Hr_Employees";
                                            //        }
                                            //        else
                                            //        {
                                            //            Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب  و المورد غير مرتبط بمركز تكلفه";
                                            //            return false;
                                            //        }                                               
                                            //}
                                        }

                                        if (center != null)
                                        {
                                            if (center.CurrencyId.HasValue)
                                            {
                                                ////postOrder.CurrencyId = chrt.CurrencyId;
                                                postOrder.BalancCrencyBeforDebtCostCentr = center.BalanceDebitCurncy;
                                                postOrder.BalancLocalBeforDebCostCentr = center.BalanceDebitLocal;
                                                postOrder.BalancCrencyBeforCredCostCentr = center.BalanceCreditCurncy;
                                                postOrder.BalancLocalBeforCredCostCentr = center.BalanceCreditLocal;

                                            }
                                            else
                                            {
                                                Message = "عملة مركز التكلفه الحساب الاضافى 4 غير موجود *** كود مركز التكلفه =  " + center.CostCenterCode +
                                                    " اسم مركز التكلفه = " + center.CostCenterNameA;
                                                return false;
                                            }
                                        }

                                    }
                                    #endregion
                                    postOrder.TermId = term.TermId;
                                    postOrder.TableCode = tableNameHeader;
                                    postOrder.TableEntityId = bsPaymentNote.PayId;
                                    postOrder.IsPosted = false;
                                    postOrder.CurrencyId = bsPaymentNote.CurrencyId;
                                    if (trDetails[0].AddAccountId4.HasValue)
                                    {
                                        if (trDetails[0].AddAccountIsFixed4 == 1)
                                        {
                                            Cal_AccountChart chrt = Cal_AccountChart.GetById(trDetails[0].AddAccountId4.Value);
                                            if (chrt != null)
                                            {
                                                if (chrt.CurrencyId.HasValue)
                                                {
                                                    //postOrder.CurrencyId = chrt.CurrencyId;
                                                    //postOrder.BalaceCurrencyBefor = chrt.BalanceCurncy;
                                                    postOrder.BalaceCurrencyBeforDebit = chrt.BalanceDebitCurncy;
                                                    postOrder.BalaceLocalBeforDebit = chrt.BalanceDebitLocal;
                                                    postOrder.BalaceCurrencyBeforCredit = chrt.BalanceCreditCurncy;
                                                    postOrder.BalaceLocalBeforCredit = chrt.BalanceCreditLocal;
                                                    MS_Currency cur = CurrencyService.GetById(bsPaymentNote.CurrencyId.Value);
                                                    if (cur != null)
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                }
                                                else
                                                {
                                                    Message = "عملة الحساب  غير موجود *** كود الحساب =  " + chrt.AccountCode +
                                                        " اسم الحساب = " + chrt.AccountNameA;
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                Message = "الحساب  غير موجود . . .";
                                                return false;
                                            }
                                        }
                                        else if (trDetails[0].AddAccountIsFixed4 == 2)
                                        {
                                            if (AnCode == null || !AnCode.AccountId.HasValue)
                                            {
                                                Message = "الكود التحليلى أو الحساب المرتبط به غير صحيح . . .";
                                                return false;
                                            }
                                            Cal_AccountChart chrt = Cal_AccountChart.GetById(AnCode.AccountId.Value);
                                            if (chrt != null)
                                            {
                                                if (chrt.CurrencyId.HasValue)
                                                {
                                                    //postOrder.CurrencyId = chrt.CurrencyId;
                                                    postOrder.BalaceCurrencyBeforDebit = chrt.BalanceDebitCurncy;
                                                    postOrder.BalaceLocalBeforDebit = chrt.BalanceDebitLocal;
                                                    postOrder.BalaceCurrencyBeforCredit = chrt.BalanceCreditCurncy;
                                                    postOrder.BalaceLocalBeforCredit = chrt.BalanceCreditLocal;
                                                    MS_Currency cur = CurrencyService.GetById(bsPaymentNote.CurrencyId.Value);
                                                    if (cur != null)
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                }
                                                else
                                                {
                                                    Message = "عملة الحساب  غير موجود *** كود الحساب =  " + chrt.AccountCode +
                                                        " اسم الحساب = " + chrt.AccountNameA;
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                Message = "الحساب  غير موجود . . .";
                                                return false;
                                            }
                                        }
                                    }
                                    //else if (trDetails[0].AccCashDebitOrCredit != true && trDetails[0].AccDiscDebitOrCredit != true && trDetails[0].AccTaxDebitOrCredit!=true)
                                    //{
                                    //    Message = "الحساب  غير موجود بنوع السند  ";
                                    //    return false;
                                    //}
                                    if (trDetails[0].AddAccountIsFixed4 == 1)
                                    {
                                        postOrder.AccountId = trDetails[0].AddAccountId4.Value;
                                        if (trDetails[0].AddAcc4DebitOrCredit == true)
                                        {
                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsPaymentNote);
                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                        }
                                        else
                                        {
                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsPaymentNote);
                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                        }

                                        postOrder.HelpAccId = null;
                                        postOrder.IsHelpAcc = false;
                                        postOrder.HelpAccType = null;
                                    }
                                    else if (trDetails[0].AddAccountIsFixed4 == 2)
                                    {
                                        postOrder.AccountId = AnCode.AccountId.Value;
                                        if (trDetails[0].AddAcc4DebitOrCredit == true)
                                        {
                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsPaymentNote);
                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                        }
                                        else
                                        {
                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsPaymentNote);
                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                        }

                                        postOrder.HelpAccId = null;
                                        postOrder.IsHelpAcc = false;
                                        postOrder.HelpAccType = null;
                                    }
                                    else if (trDetails[0].AddAccountIsFixed4 == 0)
                                    {
                                        if (bsPaymentNote.RectSourceType.GetValueOrDefault(0) == 1 ||
                                    (bsPaymentNote.RectSourceType.GetValueOrDefault(0) >= 5 &&
                                    bsPaymentNote.RectSourceType.GetValueOrDefault(0) < 15))
                                        {
                                            if (lstCusAccs.Count == 0)
                                            {
                                                MessageBox = "العميل غير مربوط بحساب استاذ *** راجع مستند تعريف العميل   ";
                                                return false;
                                            }
                                            Cal_CustAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstCusAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف العميل *** راجع مستند تعريف العميل   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "العميل غير مربوط بحساب استاذ *** راجع مستند تعريف العميل   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.CustAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "MS_Customer";
                                            MS_Customer cust = CustomerService.GetById(CusAccs.CustomerId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                        if (trDetails[0].AddAcc4DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "العميل غير مرتبط بعمله *** راجع كارت العميل   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "العميل غير مرتبط بعمله *** راجع كارت العميل   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "العميل غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType.GetValueOrDefault(0) == 2 ||
                                            (bsPaymentNote.RectSourceType.GetValueOrDefault(0) >= 15 &&
                                            bsPaymentNote.RectSourceType.GetValueOrDefault(0) < 25))
                                        {
                                            if (lstVendAccs.Count == 0)
                                            {
                                                MessageBox = "المورد غير مربوط بحساب استاذ *** راجع مستند تعريف المورد   ";
                                                return false;
                                            }
                                            Cal_VendAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstVendAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف المورد *** راجع مستند تعريف المورد   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "المورد غير مربوط بحساب استاذ *** راجع مستند تعريف المورد   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.VendAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "MS_Vendor";
                                            MS_Vendor cust = VendorService.GetById(CusAccs.VendorId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                        if (trDetails[0].AddAcc4DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "المورد غير مرتبط بعمله *** راجع كارت المورد   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "المورد غير مرتبط بعمله *** راجع كارت المورد   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "المورد غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType == 4 || bsPaymentNote.RectSourceType == 35 ||
                                        (bsPaymentNote.RectSourceType >= 25 && bsPaymentNote.RectSourceType < 34))
                                        {
                                            if (lstEmpAccs.Count == 0)
                                            {
                                                MessageBox = "الموظف غير مربوط بحساب استاذ *** راجع مستند تعريف الموظف   ";
                                                return false;
                                            }
                                            Cal_EmpAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstEmpAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الموظف *** راجع مستند تعريف الموظف   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الموظف غير مربوط بحساب استاذ *** راجع مستند تعريف الموظف   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.EmpAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Hr_Employees";
                                            Hr_Employees cust = EmpService.GetById(CusAccs.EmpId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                        if (trDetails[0].AddAcc4DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الموظف غير مرتبط بعمله *** راجع كارت الموظف   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "الموظف غير مرتبط بعمله *** راجع كارت الموظف   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الموظف غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType == 36 || bsPaymentNote.RectSourceType == 37)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Prod_JobOrder";
                                            Prod_JobOrder cust = JobOrderService.GetById(CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AddAcc4DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AddAcc4DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType >= 38 && bsPaymentNote.RectSourceType <= 47)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Sr_Vehicles";
                                            Sr_Vehicles cust = VehiclesService.GetById(CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                //if (cust.CurrencyId.HasValue)
                                                //{
                                                //    MS_Currency cur = CurrencyService.GetById(tran,cust.CurrencyId.Value);
                                                //    if (cur != null)
                                                //    {
                                                //        postOrder.Rate = bsPaymentNote.Rate;
                                                //        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsPaymentNote);
                                                //        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                //    }
                                                //    else
                                                //    {
                                                //        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                //        return false;
                                                //    }
                                                //}
                                                //else
                                                //{
                                                if (LocalCurrency != null)
                                                {
                                                    postOrder.Rate = bsPaymentNote.Rate;

                                                    if (trDetails[0].AddAcc4DebitOrCredit == true)
                                                    {
                                                        postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsPaymentNote);
                                                        postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsPaymentNote);
                                                        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "خطأ بالعمله المحليه   ";
                                                    return false;
                                                }
                                                //}
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType >= 48 && bsPaymentNote.RectSourceType <= 50)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Sr_VehicleJobOrder";
                                            Sr_VehicleJobOrder cust = db.Sr_VehicleJobOrder.FirstOrDefault(x => x.VJOrderId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                //if (cust.CurrencyId.HasValue)
                                                //{
                                                //    MS_Currency cur = CurrencyService.GetById(tran,cust.CurrencyId.Value);
                                                //    if (cur != null)
                                                //    {
                                                //        postOrder.Rate = bsPaymentNote.Rate;
                                                //        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsPaymentNote);
                                                //        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                //    }
                                                //    else
                                                //    {
                                                //        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                //        return false;
                                                //    }
                                                //}
                                                //else
                                                //{
                                                if (LocalCurrency != null)
                                                {
                                                    postOrder.Rate = bsPaymentNote.Rate;

                                                    if (trDetails[0].AddAcc4DebitOrCredit == true)
                                                    {
                                                        postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsPaymentNote);
                                                        postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsPaymentNote);
                                                        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "خطأ بالعمله المحليه   ";
                                                    return false;
                                                }
                                                //}
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType >= 51 && bsPaymentNote.RectSourceType <= 60)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Ms_LetterOfGuarantee";
                                            Ms_LetterOfGuarantee cust = db.Ms_LetterOfGuarantee.FirstOrDefault(x => x.LetOfGrnteeId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AddAcc4DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AddAcc4DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType >= 61 && bsPaymentNote.RectSourceType <= 63)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Sr_JobOrder";
                                            Sr_JobOrder cust = db.Sr_JobOrder.FirstOrDefault(x => x.JorderId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AddAcc4DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AddAcc4DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType >= 64 && bsPaymentNote.RectSourceType <= 66)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Repair_JobOrder";
                                            Repair_JobOrder cust = db.Repair_JobOrder.FirstOrDefault(x => x.RepairId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AddAcc4DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AddAcc4DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType >= 67 && bsPaymentNote.RectSourceType <= 77)
                                        {
                                            if (lstAssets.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_AssetAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstAssets, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.AssetAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Asset_AssetCard";
                                            Asset_AssetCard cust = db.Asset_AssetCard.FirstOrDefault(x => x.AssetId == CusAccs.AssetId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AddAcc4DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AddAcc4DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType >= 78 && bsPaymentNote.RectSourceType <= 88)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Proj_Projects";
                                            Proj_Projects cust = db.Proj_Projects.FirstOrDefault(x => x.ProjectId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AddAcc4DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AddAcc4DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType == 34)
                                        {
                                            //postOrder.HelpAccId = CusAccs.EmpAccountId;
                                            postOrder.AccountId = chrtAccount.AccountId;
                                            postOrder.IsHelpAcc = false;
                                            //postOrder.HelpAccType = "Hr_Employees";
                                            //MS_Vendor cust = VendorService.GetById(CusAccs.EmpId.Value);
                                            if (chrtAccount != null)
                                            {
                                                if (chrtAccount.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(chrtAccount.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                        if (trDetails[0].AddAcc4DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount4, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الحساب غير مرتبط بعمله *** راجع دليل الحسابات   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "الحساب غير مرتبط بعمله *** راجع دليل الحسابات   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الحساب غير موجود   ";
                                                return false;
                                            }
                                        }
                                    }
                                    post.Add(postOrder);
                                }
                            #endregion

                            SkipCondition = false;
                            if (trDetails[0].AddAccountIsFixed5 == 2)
                            {
                                if (AnCode == null && trDetails[0].AnalaticalCodeMust.GetValueOrDefault(false))
                                {
                                    MessageBox = "الكود التحليلي اجبارى ";
                                    return false;
                                }
                                else if (AnCode == null)
                                {
                                    SkipCondition = true;
                                }
                            }
                            if (!SkipCondition)
                                #region AddAccount5 Account
                                // manage Tax account in doctype
                                if (trDetails[0].AddAccountIsFixed5.HasValue && !string.IsNullOrEmpty(trDetails[0].ValuAddAccount5))
                                {
                                    //if (post.Count == 0)
                                    Cal_PostOrder postOrder = new Cal_PostOrder(); postOrder.IsOpenningTerm = term.IsOpenningTerm;
                                    #region Cost Center
                                    if (trDetails[0].AddCostCenterId5.HasValue || trDetails[0].AddCostCenterIsFixed5 == 2)
                                    {
                                        Cal_CostCenters center = null;
                                        if (trDetails[0].AddCostCenterIsFixed5 == 1)
                                        {
                                            center = CostCentersService.GetById(trDetails[0].AddCostCenterId5.Value);
                                            postOrder.CostCenterId = trDetails[0].AddCostCenterId5;
                                            postOrder.HelpCostCenterId = null;
                                            postOrder.IsHelpCostCenter = false;
                                            postOrder.HelpCostCenterType = null;
                                        }
                                        else if (trDetails[0].AddCostCenterIsFixed5 == 2 && AnCode != null && AnCode.CostCenterId.GetValueOrDefault(0) != 0)
                                        {
                                            center = CostCentersService.GetById(AnCode.CostCenterId.Value);
                                            postOrder.CostCenterId = AnCode.CostCenterId;
                                            postOrder.HelpCostCenterId = null;
                                            postOrder.IsHelpCostCenter = false;
                                            postOrder.HelpCostCenterType = null;
                                        }
                                        else if (trDetails[0].AddCostCenterIsFixed5 == 0)
                                        {
                                            if (bsPaymentNote.RectSourceType.GetValueOrDefault(0) == 1 ||
                                  (bsPaymentNote.RectSourceType.GetValueOrDefault(0) >= 5 &&
                                  bsPaymentNote.RectSourceType.GetValueOrDefault(0) < 15))
                                            {
                                                MS_Customer cust = CustomerService.GetById(lstCusAccs[0].CustomerId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "MS_Customer";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 5 و العميل غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار العميل أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType.GetValueOrDefault(0) == 2 ||
                                        (bsPaymentNote.RectSourceType.GetValueOrDefault(0) >= 15 &&
                                        bsPaymentNote.RectSourceType.GetValueOrDefault(0) < 25))
                                            {
                                                MS_Vendor cust = VendorService.GetById(lstVendAccs[0].VendorId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "MS_Vendor";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 5 و المورد غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار المورد أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType == 4 || bsPaymentNote.RectSourceType == 35 ||
                                   (bsPaymentNote.RectSourceType >= 25 &&
                                   bsPaymentNote.RectSourceType < 34))
                                            {
                                                Hr_Employees cust = EmpService.GetById(lstEmpAccs[0].EmpId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId1.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId1;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId1;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Hr_Employees";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب  و الموظف غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار الموظف أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType == 36 || bsPaymentNote.RectSourceType == 37)
                                            {
                                                Prod_JobOrder cust = JobOrderService.GetById(lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Prod_JobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 5 و أمر الشغل غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر الشغل أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType >= 38 && bsPaymentNote.RectSourceType <= 47)
                                            {
                                                Sr_Vehicles cust = VehiclesService.GetById(lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Sr_Vehicles";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 5 و المركبه غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار المركبه أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType >= 48 && bsPaymentNote.RectSourceType <= 50)
                                            {
                                                Sr_VehicleJobOrder cust = db.Sr_VehicleJobOrder.FirstOrDefault(x => x.VJOrderId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Sr_VehicleJobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 5 و أمر الشغل غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر الشغل أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType >= 51 && bsPaymentNote.RectSourceType <= 60)
                                            {
                                                Ms_LetterOfGuarantee cust = db.Ms_LetterOfGuarantee.FirstOrDefault(x => x.LetOfGrnteeId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId1.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId1;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId1;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Ms_LetterOfGuarantee";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 5 و خطاب الضمان غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار خطاب الضمان أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType >= 61 && bsPaymentNote.RectSourceType <= 63)
                                            {
                                                Sr_JobOrder cust = db.Sr_JobOrder.FirstOrDefault(x => x.JorderId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Sr_JobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 5 و أمر صيانة مركبه غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر صيانة مركبه أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType >= 64 && bsPaymentNote.RectSourceType <= 66)
                                            {
                                                Repair_JobOrder cust = db.Repair_JobOrder.FirstOrDefault(x => x.RepairId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Repair_JobOrder";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 5 و أمر صيانة معدات غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار أمر صيانة معدات أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType >= 67 && bsPaymentNote.RectSourceType <= 77)
                                            {
                                                Asset_AssetCard cust = db.Asset_AssetCard.FirstOrDefault(x => x.AssetId == lstAssets[0].AssetId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Asset_AssetCard";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 5 و الأصل الثابت غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار الأصل الثابت أولا";
                                                    return false;
                                                }
                                            }
                                            if (bsPaymentNote.RectSourceType >= 78 && bsPaymentNote.RectSourceType <= 88)
                                            {
                                                Proj_Projects cust = db.Proj_Projects.FirstOrDefault(x => x.ProjectId == lstBusPartnerAccs[0].TableEntityId.Value);
                                                if (cust != null)
                                                {
                                                    if (cust.CostCenterId1.HasValue)
                                                    {
                                                        center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                                        postOrder.CostCenterId = cust.CostCenterId1;
                                                        postOrder.HelpCostCenterId = cust.CostCenterId1;
                                                        postOrder.IsHelpCostCenter = true;
                                                        postOrder.HelpCostCenterType = "Proj_Projects";
                                                    }
                                                    else
                                                    {
                                                        Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الحساب الاضافى 5 و الأصل الثابت غير مرتبط بمركز تكلفه";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    Message = "لابد من اختيار الأصل الثابت أولا";
                                                    return false;
                                                }
                                            }
                                            //if (bsPaymentNote.RectSourceType == 34)
                                            //{
                                            //    if (chrtAccount.cos.CostCenterId1.HasValue)
                                            //        {
                                            //            center = CostCentersService.GetById(cust.CostCenterId1.Value);
                                            //            postOrder.CostCenterId = cust.CostCenterId1;
                                            //            postOrder.HelpCostCenterId = cust.CostCenterId1;
                                            //            postOrder.IsHelpCostCenter = true;
                                            //            postOrder.HelpCostCenterType = "Hr_Employees";
                                            //        }
                                            //        else
                                            //        {
                                            //            Message = "نوع المستند مرتبط بمركز تكلفه مساعد فى الجانب  و المورد غير مرتبط بمركز تكلفه";
                                            //            return false;
                                            //        }                                               
                                            //}
                                        }

                                        if (center != null)
                                        {
                                            if (center.CurrencyId.HasValue)
                                            {
                                                ////postOrder.CurrencyId = chrt.CurrencyId;
                                                postOrder.BalancCrencyBeforDebtCostCentr = center.BalanceDebitCurncy;
                                                postOrder.BalancLocalBeforDebCostCentr = center.BalanceDebitLocal;
                                                postOrder.BalancCrencyBeforCredCostCentr = center.BalanceCreditCurncy;
                                                postOrder.BalancLocalBeforCredCostCentr = center.BalanceCreditLocal;

                                            }
                                            else
                                            {
                                                Message = "عملة مركز التكلفه الحساب الاضافى 5 غير موجود *** كود مركز التكلفه =  " + center.CostCenterCode +
                                                    " اسم مركز التكلفه = " + center.CostCenterNameA;
                                                return false;
                                            }
                                        }

                                    }
                                    #endregion

                                    postOrder.TermId = term.TermId;
                                    postOrder.TableCode = tableNameHeader;
                                    postOrder.TableEntityId = bsPaymentNote.PayId;
                                    postOrder.IsPosted = false;
                                    postOrder.CurrencyId = bsPaymentNote.CurrencyId;
                                    if (trDetails[0].AddAccountId5.HasValue)
                                    {
                                        if (trDetails[0].AddAccountIsFixed5 == 1)
                                        {
                                            Cal_AccountChart chrt = Cal_AccountChart.GetById(trDetails[0].AddAccountId5.Value);
                                            if (chrt != null)
                                            {
                                                if (chrt.CurrencyId.HasValue)
                                                {
                                                    //postOrder.CurrencyId = chrt.CurrencyId;
                                                    //postOrder.BalaceCurrencyBefor = chrt.BalanceCurncy;
                                                    postOrder.BalaceCurrencyBeforDebit = chrt.BalanceDebitCurncy;
                                                    postOrder.BalaceLocalBeforDebit = chrt.BalanceDebitLocal;
                                                    postOrder.BalaceCurrencyBeforCredit = chrt.BalanceCreditCurncy;
                                                    postOrder.BalaceLocalBeforCredit = chrt.BalanceCreditLocal;
                                                    MS_Currency cur = CurrencyService.GetById(bsPaymentNote.CurrencyId.Value);
                                                    if (cur != null)
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                }
                                                else
                                                {
                                                    Message = "عملة الحساب  غير موجود *** كود الحساب =  " + chrt.AccountCode +
                                                        " اسم الحساب = " + chrt.AccountNameA;
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                Message = "الحساب  غير موجود . . .";
                                                return false;
                                            }
                                        }
                                        else if (trDetails[0].AddAccountIsFixed5 == 2)
                                        {
                                            if (AnCode == null || !AnCode.AccountId.HasValue)
                                            {
                                                Message = "الكود التحليلى أو الحساب المرتبط به غير صحيح . . .";
                                                return false;
                                            }
                                            Cal_AccountChart chrt = Cal_AccountChart.GetById(AnCode.AccountId.Value);
                                            if (chrt != null)
                                            {
                                                if (chrt.CurrencyId.HasValue)
                                                {
                                                    //postOrder.CurrencyId = chrt.CurrencyId;
                                                    postOrder.BalaceCurrencyBeforDebit = chrt.BalanceDebitCurncy;
                                                    postOrder.BalaceLocalBeforDebit = chrt.BalanceDebitLocal;
                                                    postOrder.BalaceCurrencyBeforCredit = chrt.BalanceCreditCurncy;
                                                    postOrder.BalaceLocalBeforCredit = chrt.BalanceCreditLocal;
                                                    MS_Currency cur = CurrencyService.GetById(bsPaymentNote.CurrencyId.Value);
                                                    if (cur != null)
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                }
                                                else
                                                {
                                                    Message = "عملة الحساب  غير موجود *** كود الحساب =  " + chrt.AccountCode +
                                                        " اسم الحساب = " + chrt.AccountNameA;
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                Message = "الحساب  غير موجود . . .";
                                                return false;
                                            }
                                        }
                                    }
                                    //else if (trDetails[0].AccCashDebitOrCredit != true && trDetails[0].AccDiscDebitOrCredit != true && trDetails[0].AccTaxDebitOrCredit!=true)
                                    //{
                                    //    Message = "الحساب  غير موجود بنوع السند  ";
                                    //    return false;
                                    //}
                                    if (trDetails[0].AddAccountIsFixed5 == 1)
                                    {
                                        postOrder.AccountId = trDetails[0].AddAccountId5.Value;
                                        if (trDetails[0].AddAcc5DebitOrCredit == true)
                                        {
                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsPaymentNote);
                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                        }
                                        else
                                        {
                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsPaymentNote);
                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                        }

                                        postOrder.HelpAccId = null;
                                        postOrder.IsHelpAcc = false;
                                        postOrder.HelpAccType = null;
                                    }
                                    else if (trDetails[0].AddAccountIsFixed5 == 2)
                                    {
                                        postOrder.AccountId = AnCode.AccountId.Value;
                                        if (trDetails[0].AddAcc5DebitOrCredit == true)
                                        {
                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsPaymentNote);
                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                        }
                                        else
                                        {
                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsPaymentNote);
                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                        }

                                        postOrder.HelpAccId = null;
                                        postOrder.IsHelpAcc = false;
                                        postOrder.HelpAccType = null;
                                    }
                                    else if (trDetails[0].AddAccountIsFixed5 == 0)
                                    {
                                        if (bsPaymentNote.RectSourceType.GetValueOrDefault(0) == 1 ||
                                   (bsPaymentNote.RectSourceType.GetValueOrDefault(0) >= 5 &&
                                   bsPaymentNote.RectSourceType.GetValueOrDefault(0) < 15))
                                        {
                                            if (lstCusAccs.Count == 0)
                                            {
                                                MessageBox = "العميل غير مربوط بحساب استاذ *** راجع مستند تعريف العميل   ";
                                                return false;
                                            }
                                            Cal_CustAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstCusAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف العميل *** راجع مستند تعريف العميل   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "العميل غير مربوط بحساب استاذ *** راجع مستند تعريف العميل   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.CustAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "MS_Customer";
                                            MS_Customer cust = CustomerService.GetById(CusAccs.CustomerId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                        if (trDetails[0].AddAcc5DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "العميل غير مرتبط بعمله *** راجع كارت العميل   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "العميل غير مرتبط بعمله *** راجع كارت العميل   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "العميل غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType.GetValueOrDefault(0) == 2 ||
                                           (bsPaymentNote.RectSourceType.GetValueOrDefault(0) >= 15 &&
                                           bsPaymentNote.RectSourceType.GetValueOrDefault(0) < 25))
                                        {
                                            if (lstVendAccs.Count == 0)
                                            {
                                                MessageBox = "المورد غير مربوط بحساب استاذ *** راجع مستند تعريف المورد   ";
                                                return false;
                                            }
                                            Cal_VendAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstVendAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف المورد *** راجع مستند تعريف المورد   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "المورد غير مربوط بحساب استاذ *** راجع مستند تعريف المورد   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.VendAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "MS_Vendor";
                                            MS_Vendor cust = VendorService.GetById(CusAccs.VendorId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                        if (trDetails[0].AddAcc5DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "المورد غير مرتبط بعمله *** راجع كارت المورد   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "المورد غير مرتبط بعمله *** راجع كارت المورد   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "المورد غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType == 4 || bsPaymentNote.RectSourceType == 35 ||
                                          (bsPaymentNote.RectSourceType >= 25 && bsPaymentNote.RectSourceType < 34))
                                        {
                                            if (lstEmpAccs.Count == 0)
                                            {
                                                MessageBox = "الموظف غير مربوط بحساب استاذ *** راجع مستند تعريف الموظف   ";
                                                return false;
                                            }
                                            Cal_EmpAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstEmpAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الموظف *** راجع مستند تعريف الموظف   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الموظف غير مربوط بحساب استاذ *** راجع مستند تعريف الموظف   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.EmpAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Hr_Employees";
                                            Hr_Employees cust = EmpService.GetById(CusAccs.EmpId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                        if (trDetails[0].AddAcc5DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الموظف غير مرتبط بعمله *** راجع كارت الموظف   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "الموظف غير مرتبط بعمله *** راجع كارت الموظف   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الموظف غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType == 36 || bsPaymentNote.RectSourceType == 37)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Prod_JobOrder";
                                            Prod_JobOrder cust = JobOrderService.GetById(CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AddAcc5DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AddAcc5DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType >= 38 && bsPaymentNote.RectSourceType <= 47)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Sr_Vehicles";
                                            Sr_Vehicles cust = VehiclesService.GetById(CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                //if (cust.CurrencyId.HasValue)
                                                //{
                                                //    MS_Currency cur = CurrencyService.GetById(tran,cust.CurrencyId.Value);
                                                //    if (cur != null)
                                                //    {
                                                //        postOrder.Rate = bsPaymentNote.Rate;
                                                //        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsPaymentNote);
                                                //        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                //    }
                                                //    else
                                                //    {
                                                //        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                //        return false;
                                                //    }
                                                //}
                                                //else
                                                //{
                                                if (LocalCurrency != null)
                                                {
                                                    postOrder.Rate = bsPaymentNote.Rate;

                                                    if (trDetails[0].AddAcc5DebitOrCredit == true)
                                                    {
                                                        postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsPaymentNote);
                                                        postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsPaymentNote);
                                                        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "خطأ بالعمله المحليه   ";
                                                    return false;
                                                }
                                                //}
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType >= 48 && bsPaymentNote.RectSourceType <= 50)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Sr_VehicleJobOrder";
                                            Sr_VehicleJobOrder cust = db.Sr_VehicleJobOrder.FirstOrDefault(x => x.VJOrderId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                //if (cust.CurrencyId.HasValue)
                                                //{
                                                //    MS_Currency cur = CurrencyService.GetById(tran,cust.CurrencyId.Value);
                                                //    if (cur != null)
                                                //    {
                                                //        postOrder.Rate = bsPaymentNote.Rate;
                                                //        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAccountCredit, bsPaymentNote);
                                                //        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                //    }
                                                //    else
                                                //    {
                                                //        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                //        return false;
                                                //    }
                                                //}
                                                //else
                                                //{
                                                if (LocalCurrency != null)
                                                {
                                                    postOrder.Rate = bsPaymentNote.Rate;

                                                    if (trDetails[0].AddAcc5DebitOrCredit == true)
                                                    {
                                                        postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsPaymentNote);
                                                        postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                    else
                                                    {
                                                        postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsPaymentNote);
                                                        postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "خطأ بالعمله المحليه   ";
                                                    return false;
                                                }
                                                //}
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType >= 51 && bsPaymentNote.RectSourceType <= 60)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Ms_LetterOfGuarantee";
                                            Ms_LetterOfGuarantee cust = db.Ms_LetterOfGuarantee.FirstOrDefault(x => x.LetOfGrnteeId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AddAcc5DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AddAcc5DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType >= 61 && bsPaymentNote.RectSourceType <= 63)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Sr_JobOrder";
                                            Sr_JobOrder cust = db.Sr_JobOrder.FirstOrDefault(x => x.JorderId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AddAcc5DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AddAcc5DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType >= 64 && bsPaymentNote.RectSourceType <= 66)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Repair_JobOrder";
                                            Repair_JobOrder cust = db.Repair_JobOrder.FirstOrDefault(x => x.RepairId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AddAcc5DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AddAcc5DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType >= 67 && bsPaymentNote.RectSourceType <= 77)
                                        {
                                            if (lstAssets.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_AssetAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstAssets, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.AssetAccountId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Asset_AssetCard";
                                            Asset_AssetCard cust = db.Asset_AssetCard.FirstOrDefault(x => x.AssetId == CusAccs.AssetId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AddAcc5DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AddAcc5DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType >= 78 && bsPaymentNote.RectSourceType <= 88)
                                        {
                                            if (lstBusPartnerAccs.Count == 0)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            Cal_BusinessPartnerAccounts CusAccs = GetCustHelpEntity(bsPaymentNote.RectSourceType.GetValueOrDefault(0), lstBusPartnerAccs, bsPaymentNote);
                                            if (CusAccs == null)
                                            {
                                                MessageBox = "الحساب المساعد غير موجود بتعريف الجهه *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            if (!CusAccs.AccountId.HasValue)
                                            {
                                                MessageBox = "الجهه غير مربوط بحساب استاذ *** راجع مستند تعريف الجهه   ";
                                                return false;
                                            }
                                            postOrder.HelpAccId = CusAccs.BusinessPartnerAccId;
                                            postOrder.AccountId = CusAccs.AccountId;
                                            postOrder.IsHelpAcc = true;
                                            postOrder.HelpAccType = "Proj_Projects";
                                            Proj_Projects cust = db.Proj_Projects.FirstOrDefault(x => x.ProjectId == CusAccs.TableEntityId.Value);
                                            if (cust != null)
                                            {
                                                if (cust.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(cust.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AddAcc5DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الجهه غير مرتبط بعمله *** راجع كارت الجهه   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    if (LocalCurrency != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;

                                                        if (trDetails[0].AddAcc5DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "خطأ بالعمله المحليه   ";
                                                        return false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الجهه غير موجود   ";
                                                return false;
                                            }
                                        }
                                        else if (bsPaymentNote.RectSourceType == 34)
                                        {
                                            //postOrder.HelpAccId = CusAccs.EmpAccountId;
                                            postOrder.AccountId = chrtAccount.AccountId;
                                            postOrder.IsHelpAcc = false;
                                            //postOrder.HelpAccType = "Hr_Employees";
                                            //MS_Vendor cust = VendorService.GetById(CusAccs.EmpId.Value);
                                            if (chrtAccount != null)
                                            {
                                                if (chrtAccount.CurrencyId.HasValue)
                                                {
                                                    MS_Currency cur = CurrencyService.GetById(chrtAccount.CurrencyId.Value);
                                                    if (cur != null)
                                                    {
                                                        postOrder.Rate = bsPaymentNote.Rate;
                                                        if (trDetails[0].AddAcc5DebitOrCredit == true)
                                                        {
                                                            postOrder.DebitCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsPaymentNote);
                                                            postOrder.DebitLocal = postOrder.DebitCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                        else
                                                        {
                                                            postOrder.CreditCurrency = GetValuNameValu(trDetails[0].ValuAddAccount5, bsPaymentNote);
                                                            postOrder.CreditLocal = postOrder.CreditCurrency.GetValueOrDefault(0) * postOrder.Rate.GetValueOrDefault(1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox = "الحساب غير مرتبط بعمله *** راجع دليل الحسابات   ";
                                                        return false;
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox = "الحساب غير مرتبط بعمله *** راجع دليل الحسابات   ";
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox = "الحساب غير موجود   ";
                                                return false;
                                            }
                                        }
                                    }
                                    post.Add(postOrder);
                                }
                            #endregion
                        }
                    }
                }
            }

            //}
            if (post.Count > 0)
            {
                decimal totaldebit = 0;
                decimal totalredit = 0;
                for (int i = 0; i < post.Count; i++)
                {
                    totaldebit += post[i].DebitLocal.GetValueOrDefault(0);
                    totalredit += post[i].CreditLocal.GetValueOrDefault(0);
                    if (!post[i].CurrencyId.HasValue)
                        if (bsPaymentNote.CurrencyId.HasValue)
                            post[i].CurrencyId = bsPaymentNote.CurrencyId;
                        else post[i].CurrencyId = LocalCurrency.CurrencyId;
                }
                //if (totaldebit != 0 && totalredit != 0)
                //{
                //    if (Math.Floor(totalredit) == Math.Floor(totaldebit))
                //        valid = true;
                //    else
                //    {
                //        Message = "الجانب المدين و الدائن غير متساويان*** راجع نوع المستند";
                //        //MessageBox = "حساب المورد غير موجود   ";
                //        return false;
                //    }
                //}

                for (int i = 0; i < post.Count; i++)
                {
                    if (post[i].CostCenterId.HasValue && post[i].CostCenterId != 0)
                    {
                        if (post[i].DebitLocal.GetValueOrDefault(0) > 0)
                        {
                            bsPaymentNote.TermCostCenterId = post[i].CostCenterId;
                            bsPaymentNote.TermCostCenterValue = post[i].DebitLocal;

                            //////// Edit By Abdulrahman
                            //DataRepository.MsPaymentNoteProvider.Save(bsPaymentNote as MS_PaymentNote);
                            break;
                        }
                        if (post[i].CreditLocal.GetValueOrDefault(0) > 0)
                        {
                            bsPaymentNote.TermCostCenterId = post[i].CostCenterId;
                            bsPaymentNote.TermCostCenterValue = post[i].CreditLocal;

                            //////// Edit By Abdulrahman
                            //DataRepository.MsPaymentNoteProvider.Save(bsPaymentNote as MS_PaymentNote);
                            break;
                        }
                    }
                }
                if (totaldebit != 0 && totalredit != 0)
                {
                    //decimal num1 = Math.Floor(totalredit);
                    //decimal num2 = Math.Floor(totaldebit);
                    //if (Math.Floor(totalredit) == Math.Floor(totaldebit))
                    //    valid = true;
                    if (totalredit == totaldebit)
                        valid = true;
                    else
                    {
                        decimal diff = 0;
                        //bool ValidEquality = false;
                        if (totaldebit > totalredit)
                        {
                            diff = totaldebit - totalredit;
                            decimal converted = Convert.ToDecimal(0.5);
                            if (diff > converted)
                            {
                                Message = "الجانب المدين و الدائن غير متساويان*** راجع نوع المستند" + "\n\n" + " اجمالى مدين = " + decimal.Round(totaldebit, (int)Setting.AccountsDecimals).ToString() +
                                                   "\n\n" + "اجمالى دائن = " + decimal.Round(totalredit, (int)Setting.AccountsDecimals).ToString();
                                return false;
                                //ValidEquality = false;
                            }
                            else
                            {
                                for (int i = 0; i < post.Count; i++)
                                {
                                    if (post[i].CreditLocal.GetValueOrDefault(0) > 0)
                                    {
                                        post[i].CreditLocal += diff;
                                        Message = "قام البرنامج بعمل تسويه بقيمة " + decimal.Round(diff, (int)Setting.AccountsDecimals).ToString() + "  من العمله المحليه فى الجانب الدائن";
                                        valid = true;
                                        break;
                                    }
                                }
                            }
                        }
                        else if (totalredit > totaldebit)
                        {
                            diff = totalredit - totaldebit;
                            decimal converted = Convert.ToDecimal(0.5);
                            if (diff > converted)
                            {
                                Message = "الجانب المدين و الدائن غير متساويان*** راجع نوع المستند" + "\n\n" + " اجمالى مدين = " + decimal.Round(totaldebit, (int)Setting.AccountsDecimals).ToString() +
                                                   "\n\n" + "اجمالى دائن = " + decimal.Round(totalredit, (int)Setting.AccountsDecimals).ToString();
                                return false;
                                //ValidEquality = false;
                            }
                            else
                            {
                                for (int i = 0; i < post.Count; i++)
                                {
                                    if (post[i].DebitLocal.GetValueOrDefault(0) > 0)
                                    {
                                        post[i].DebitLocal += diff;
                                        Message = "قام البرنامج بعمل تسويه بقيمة " + decimal.Round(diff, (int)Setting.AccountsDecimals).ToString() + "  من العمله المحليه فى الجانب المدين";
                                        valid = true;
                                        break;
                                    }
                                }
                            }
                        }
                        //else ValidEquality = true;                      
                    }
                }
                else
                {
                    Message = "الجانب المدين و الدائن = 0";
                    //MessageBox = "حساب المورد غير موجود   ";
                    return false;
                }
            }
            //if (SaveAccounts(post) == null)
            //    valid = false;

            //Edit By Abdulrahman
            //post = AccountingEngine.SaveAccounts(post, bsPaymentNote.CurrencyId.HasValue ? bsPaymentNote.CurrencyId : LocalCurrency.CurrencyId);
            //End Edit By Abdulrahman

            if (post == null) return false;
            if (post.Count == 0) return false;
            for (int Ipost = 0; Ipost < post.Count; Ipost++)
            {
                post[Ipost].FinancialIntervalsId = FinancialIntervalsId;
                if (post[Ipost].CreditLocal.GetValueOrDefault(0) == 0 && post[Ipost].DebitLocal.GetValueOrDefault(0) == 0)
                {
                    post.Remove(post[Ipost]);
                    Ipost--;
                }
            }
            //foreach (Cal_PostOrder cal in post)
            //{
            //    if (cal.CreditLocal.GetValueOrDefault(0) == 0 && cal.DebitLocal.GetValueOrDefault(0) == 0)
            //        post.Remove(cal);
            //}

            PostOrderService.InsertList(post);
            return valid;
        }

        private Cal_AssetAccounts GetCustHelpEntity(int ResourcType, List<Cal_AssetAccounts> lstAssetAcc, MS_PaymentNote bsPaymentNote)
        {
            Cal_AssetAccounts NewCustAccount = null;
            switch (ResourcType)
            {
                case 67:
                    NewCustAccount = lstAssetAcc.Find(MatchEntityCalAsset("BasicAccCode"));
                    break;
                case 68:
                    NewCustAccount = lstAssetAcc.Find(MatchEntityCalAsset("AddAccountCode1"));
                    break;
                case 69:
                    NewCustAccount = lstAssetAcc.Find(MatchEntityCalAsset("AddAccountCode2"));
                    break;
                case 70:
                    NewCustAccount = lstAssetAcc.Find(MatchEntityCalAsset("AddAccountCode3"));
                    break;
                case 71:
                    NewCustAccount = lstAssetAcc.Find(MatchEntityCalAsset("AddAccountCode4"));
                    break;
                case 72:
                    NewCustAccount = lstAssetAcc.Find(MatchEntityCalAsset("AddAccountCode5"));
                    break;
                case 73:
                    NewCustAccount = lstAssetAcc.Find(MatchEntityCalAsset("AddAccountCode6"));
                    break;
                case 74:
                    NewCustAccount = lstAssetAcc.Find(MatchEntityCalAsset("AddAccountCode7"));
                    break;
                case 75:
                    NewCustAccount = lstAssetAcc.Find(MatchEntityCalAsset("AddAccountCode8"));
                    break;
                case 76:
                    NewCustAccount = lstAssetAcc.Find(MatchEntityCalAsset("AddAccountCode9"));
                    break;
                case 77:
                    NewCustAccount = lstAssetAcc.Find(MatchEntityCalAsset("AddAccountCode10"));
                    break;
            }
            if (NewCustAccount != null && bsPaymentNote != null)
            {
                bsPaymentNote.DBTableName = "Cal_AssetAccounts";
                bsPaymentNote.DBTableId = NewCustAccount.AssetAccountId;
            }
            return NewCustAccount;
        }

        private Cal_BusinessPartnerAccounts GetCustHelpEntity(int ResourcType, List<Cal_BusinessPartnerAccounts> lstBusinessPartner, MS_PaymentNote bsPaymentNote)
        {
            Cal_BusinessPartnerAccounts NewCustAccount = null;
            switch (ResourcType)
            {
                case 36:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("BasicAccCode"));
                    break;
                case 37:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("AddAccountCode1"));
                    break;
                case 38:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("BasicAccCode"));
                    break;
                case 39:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("AddAccountCode1"));
                    break;
                case 40:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("AddAccountCode2"));
                    break;
                case 41:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("AddAccountCode3"));
                    break;
                case 42:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("AddAccountCode4"));
                    break;
                case 43:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("AddAccountCode5"));
                    break;
                case 44:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("AddAccountCode6"));
                    break;
                case 45:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("AddAccountCode7"));
                    break;
                case 46:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("AddAccountCode8"));
                    break;
                case 47:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("AddAccountCode9"));
                    break;
                case 48:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("BasicAccCode"));
                    break;
                case 49:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("AddAccountCode1"));
                    break;
                case 50:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("AddAccountCode2"));
                    break;
                case 51:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("BasicAccCode"));
                    break;
                case 52:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("AddAccountCode1"));
                    break;
                case 53:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("AddAccountCode2"));
                    break;
                case 54:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("AddAccountCode3"));
                    break;
                case 55:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("AddAccountCode4"));
                    break;
                case 56:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("AddAccountCode5"));
                    break;
                case 57:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("AddAccountCode6"));
                    break;
                case 58:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("AddAccountCode7"));
                    break;
                case 59:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("AddAccountCode8"));
                    break;
                case 60:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("AddAccountCode9"));
                    break;
                case 61:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("BasicAccCode"));
                    break;
                case 62:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("AddAccountCode1"));
                    break;
                case 63:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("AddAccountCode2"));
                    break;
                case 64:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("BasicAccCode"));
                    break;
                case 65:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("AddAccountCode1"));
                    break;
                case 66:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("AddAccountCode2"));
                    break;
                case 78:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("BasicAccCode"));
                    break;
                case 79:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("AddAccountCode1"));
                    break;
                case 80:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("AddAccountCode2"));
                    break;
                case 81:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("AddAccountCode3"));
                    break;
                case 82:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("AddAccountCode4"));
                    break;
                case 83:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("AddAccountCode5"));
                    break;
                case 84:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("AddAccountCode6"));
                    break;
                case 85:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("AddAccountCode7"));
                    break;
                case 86:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("AddAccountCode8"));
                    break;
                case 87:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("AddAccountCode9"));
                    break;
                case 88:
                    NewCustAccount = lstBusinessPartner.Find(MatchEntityCalBusinessPartner("AddAccountCode10"));
                    break;
            }
            if (NewCustAccount != null && bsPaymentNote != null)
            {
                bsPaymentNote.DBTableName = "Cal_BusinessPartnerAccounts";
                bsPaymentNote.DBTableId = NewCustAccount.BusinessPartnerAccId;
            }
            return NewCustAccount;
        }

        private Cal_CustAccounts GetCustHelpEntity(int ResourcType, List<Cal_CustAccounts> lstCalCust, MS_PaymentNote bsPaymentNote)
        {
            Cal_CustAccounts NewCustAccount = null;
            switch (ResourcType)
            {
                case 1:
                    NewCustAccount = lstCalCust.Find(MatchEntityCalCust("BasicAccCode"));
                    break;
                case 5:
                    NewCustAccount = lstCalCust.Find(MatchEntityCalCust("AddAccountCode1"));
                    break;
                case 6:
                    NewCustAccount = lstCalCust.Find(MatchEntityCalCust("AddAccountCode2"));
                    break;
                case 7:
                    NewCustAccount = lstCalCust.Find(MatchEntityCalCust("AddAccountCode3"));
                    break;
                case 8:
                    NewCustAccount = lstCalCust.Find(MatchEntityCalCust("AddAccountCode4"));
                    break;
                case 9:
                    NewCustAccount = lstCalCust.Find(MatchEntityCalCust("AddAccountCode5"));
                    break;
                case 10:
                    NewCustAccount = lstCalCust.Find(MatchEntityCalCust("AddAccountCode6"));
                    break;
                case 11:
                    NewCustAccount = lstCalCust.Find(MatchEntityCalCust("AddAccountCode7"));
                    break;
                case 12:
                    NewCustAccount = lstCalCust.Find(MatchEntityCalCust("AddAccountCode8"));
                    break;
                case 13:
                    NewCustAccount = lstCalCust.Find(MatchEntityCalCust("AddAccountCode9"));
                    break;
                case 14:
                    NewCustAccount = lstCalCust.Find(MatchEntityCalCust("AddAccountCode10"));
                    break;
            }
            if (NewCustAccount != null && bsPaymentNote != null)
            {
                bsPaymentNote.DBTableName = "Cal_CustAccounts";
                bsPaymentNote.DBTableId = NewCustAccount.CustAccountId;
            }
            return NewCustAccount;
        }

        private Cal_VendAccounts GetCustHelpEntity(int ResourcType, List<Cal_VendAccounts> lstCalVend, MS_PaymentNote bsPaymentNote)
        {
            Cal_VendAccounts NewCustAccount = null;
            switch (ResourcType)
            {
                case 2:
                    NewCustAccount = lstCalVend.Find(MatchEntityCalVend("BasicAccCode"));
                    break;
                case 15:
                    NewCustAccount = lstCalVend.Find(MatchEntityCalVend("AddAccountCode1"));
                    break;
                case 16:
                    NewCustAccount = lstCalVend.Find(MatchEntityCalVend("AddAccountCode2"));
                    break;
                case 17:
                    NewCustAccount = lstCalVend.Find(MatchEntityCalVend("AddAccountCode3"));
                    break;
                case 18:
                    NewCustAccount = lstCalVend.Find(MatchEntityCalVend("AddAccountCode4"));
                    break;
                case 19:
                    NewCustAccount = lstCalVend.Find(MatchEntityCalVend("AddAccountCode5"));
                    break;
                case 20:
                    NewCustAccount = lstCalVend.Find(MatchEntityCalVend("AddAccountCode6"));
                    break;
                case 21:
                    NewCustAccount = lstCalVend.Find(MatchEntityCalVend("AddAccountCode7"));
                    break;
                case 22:
                    NewCustAccount = lstCalVend.Find(MatchEntityCalVend("AddAccountCode8"));
                    break;
                case 23:
                    NewCustAccount = lstCalVend.Find(MatchEntityCalVend("AddAccountCode9"));
                    break;
                case 24:
                    NewCustAccount = lstCalVend.Find(MatchEntityCalVend("AddAccountCode10"));
                    break;
            }
            if (NewCustAccount != null && bsPaymentNote != null)
            {
                bsPaymentNote.DBTableName = "Cal_VendAccounts";
                bsPaymentNote.DBTableId = NewCustAccount.VendAccountId;
            }
            return NewCustAccount;
        }

        private Cal_EmpAccounts GetCustHelpEntity(int ResourcType, List<Cal_EmpAccounts> lstCalEmp, MS_PaymentNote bsPaymentNote)
        {
            Cal_EmpAccounts NewCustAccount = null;
            switch (ResourcType)
            {
                case 4:
                    NewCustAccount = lstCalEmp.Find(MatchEntityCalEmp("BasicAccCode"));

                    break;
                case 25:
                    NewCustAccount = lstCalEmp.Find(MatchEntityCalEmp("AddAccountCode1"));
                    break;
                case 26:
                    NewCustAccount = lstCalEmp.Find(MatchEntityCalEmp("AddAccountCode2"));
                    break;
                case 27:
                    NewCustAccount = lstCalEmp.Find(MatchEntityCalEmp("AddAccountCode3"));
                    break;
                case 28:
                    NewCustAccount = lstCalEmp.Find(MatchEntityCalEmp("AddAccountCode4"));
                    break;
                case 29:
                    NewCustAccount = lstCalEmp.Find(MatchEntityCalEmp("AddAccountCode5"));
                    break;
                case 30:
                    NewCustAccount = lstCalEmp.Find(MatchEntityCalEmp("AddAccountCode6"));
                    break;
                case 31:
                    NewCustAccount = lstCalEmp.Find(MatchEntityCalEmp("AddAccountCode7"));
                    break;
                case 32:
                    NewCustAccount = lstCalEmp.Find(MatchEntityCalEmp("AddAccountCode8"));
                    break;
                case 33:
                    NewCustAccount = lstCalEmp.Find(MatchEntityCalEmp("AddAccountCode9"));
                    break;
                case 35:
                    NewCustAccount = lstCalEmp.Find(MatchEntityCalEmp("AddAccountCode10"));
                    break;
            }
            if (NewCustAccount != null && bsPaymentNote != null)
            {
                bsPaymentNote.DBTableName = "Cal_EmpAccounts";
                bsPaymentNote.DBTableId = NewCustAccount.EmpAccountId;
            }
            return NewCustAccount;
        }

        private decimal GetValuNameValu(string ValuName, MS_PaymentNote bsPaymentNote)
        {
            decimal valu = 0;
            switch (ValuName)
            {
                case "PaidPrice":
                    valu = bsPaymentNote.ValueBeforeRate.GetValueOrDefault(0);
                    break;
                //case "Commision":
                //    //Edit By Abdulrahman
                //    //valu = bsPaymentNote.Commision.GetValueOrDefault(0);
                //    break;
                case "PriceAfterCommision":
                    //Edit By Abdulrahman
                    valu = GetPriceAfterCommision(bsPaymentNote);
                    break;
                case "Value1BeforeRate":
                    valu = bsPaymentNote.Value1BeforeRate.GetValueOrDefault(0);
                    break;
                case "Value2BeforeRate":
                    valu = bsPaymentNote.Value2BeforeRate.GetValueOrDefault(0);
                    break;
                case "Value3BeforeRate":
                    valu = bsPaymentNote.Value3BeforeRate.GetValueOrDefault(0);
                    break;
                case "Value4BeforeRate":
                    valu = bsPaymentNote.Value4BeforeRate.GetValueOrDefault(0);
                    break;
                case "Value5BeforeRate":
                    valu = bsPaymentNote.Value5BeforeRate.GetValueOrDefault(0);
                    break;
                case "Value6BeforeRate":
                    valu = bsPaymentNote.Value6BeforeRate.GetValueOrDefault(0);
                    break;
                case "Value7BeforeRate":
                    valu = bsPaymentNote.Value7BeforeRate.GetValueOrDefault(0);
                    break;
                case "Value8BeforeRate":
                    valu = bsPaymentNote.Value8BeforeRate.GetValueOrDefault(0);
                    break;
                case "Value9BeforeRate":
                    valu = bsPaymentNote.Value9BeforeRate.GetValueOrDefault(0);
                    break;
                case "Value10BeforeRate":
                    valu = bsPaymentNote.Value10BeforeRate.GetValueOrDefault(0);
                    break;
                case "TotalValue":
                    //Edit By Abdulrahman
                    valu = GetTotalValue(bsPaymentNote);
                    break;
                    //case "Value1":
                    //    valu = bsPaymentNote.Value1.GetValueOrDefault(0);
                    //    break;
                    //case "Value2":
                    //    valu = bsPaymentNote.Value2.GetValueOrDefault(0);
                    //    break;
                    //case "Value3":
                    //    valu = bsPaymentNote.Value3.GetValueOrDefault(0);
                    //    break;
                    //case "Value4":
                    //    valu = bsPaymentNote.Value4.GetValueOrDefault(0);
                    //    break;
                    //case "Value5":
                    //    valu = bsPaymentNote.Value5.GetValueOrDefault(0);
                    //    break;
                    //case "Value6":
                    //    valu = bsPaymentNote.Value6.GetValueOrDefault(0);
                    //    break;
            }
            return valu;
        }
        #endregion

        #region Save From Cal_JurnalEntry To Cal_PostOrder
        public bool AccountingSave(int? FinancialIntervalsId, List<Cal_JurnalDetail> jurnalDetail, Cal_JurnalEntry jurnalEntry, FormMode formMode)
        {
            MS_Settings Setting = redis.GetOrSetSettings();
            MS_Currency LocalCurrency = redis.GetOrSetLocalCurrency();
            Cal_CostCenters center = null;

            bool valid = false;
            List<Cal_PostOrder> post = new List<Cal_PostOrder>();
            if (!jurnalDetail.Any(x=>x.CurrencyId.HasValue))
            {
                Message = " لابد من اختيار العملة اولا لكل البنود ";
                return false;
            }
           
            if (formMode == FormMode.Edit)
            {
                #region Remove Old Post
                if (jurnalEntry != null)
                {
                    List<Cal_PostOrder> OldPost = PostOrderService.GetAll(x => x.TableCode == tableNameHeader && x.TableEntityId == jurnalEntry.JurnalId);
                    int cont = OldPost.Count();
                    if (OldPost.Count > 0)
                    {
                        int deletedCount = PostOrderService.DeleteList(OldPost);
                        if (deletedCount <= 0)
                        {
                            Message = "لم ينجح تحديث الأرصده السابقه *** حاول مره اخرى   ";
                            return false;
                        }
                    }
                }
                else return false;
                #endregion
            }
            
            if (jurnalEntry != null)
            {
                if (jurnalEntry.TermId.HasValue)
                {
                    foreach (Cal_JurnalDetail item in jurnalDetail)
                    {
                        if(item.CostCenterId1.HasValue)
                            center = CostCentersService.GetById(item.CostCenterId1.Value);

                        Cal_PostOrder PostOrder = new Cal_PostOrder() { 
                            AccountId = item.AccountId,
                            CostCenterId = item.CostCenterId1,
                            TermId = jurnalEntry.TermId,
                            CurrencyId = item.CurrencyId,
                            FinancialIntervalsId = jurnalEntry.FinancialIntervalsId,
                            Rate = item.Rate,
                            TableCode = "Cal_JurnalEntry",
                            TableEntityId = jurnalEntry.JurnalId,
                            
                            DebitLocal = item.DebitLocal,
                            CreditLocal = item.CreditLocal,
                            DebitCurrency = item.DebitCurrency,
                            CreditCurrency = item.CreditCurrency,
                            IsOpenningTerm = jurnalEntry.IsOpenning,
                        };

                        //set value for IsHelpAcc and HelpAccId
                        GetVAlueIsHelpAcc(PostOrder, item);

                        //Get Balace From AccountChart
                        if(!GetBalaceFromAccountChart(PostOrder, item))
                            return false;

                        //Get Balace From CostCenters
                        if (!GetBalaceFromCostCenters(PostOrder, center))
                            return false;
                        
                        post.Add(PostOrder);
                    }
                }
                else
                {
                    Message = " لابد من اختيار نوع السند ";
                    return false;
                }
            }

            if (post.Count > 0)
            {
                decimal totaldebit = 0;
                decimal totalredit = 0;
                for (int i = 0; i < post.Count; i++)
                {
                    totaldebit += post[i].DebitLocal.GetValueOrDefault(0);
                    totalredit += post[i].CreditLocal.GetValueOrDefault(0);
                    if (!post[i].CurrencyId.HasValue)
                        post[i].CurrencyId = LocalCurrency.CurrencyId;
                }
                
                if (totaldebit != 0 && totalredit != 0)
                {
                    if (totalredit == totaldebit)
                        valid = true;
                    else
                    {
                        decimal diff = 0;
                        if (totaldebit > totalredit)
                        {
                            diff = totaldebit - totalredit;
                            decimal converted = Convert.ToDecimal(0.5);
                            if (diff > converted)
                            {
                                Message = "الجانب المدين و الدائن غير متساويان*** راجع نوع المستند" + "\n\n" + " اجمالى مدين = " + decimal.Round(totaldebit, (int)Setting.AccountsDecimals).ToString() +
                                                   "\n\n" + "اجمالى دائن = " + decimal.Round(totalredit, (int)Setting.AccountsDecimals).ToString();
                                return false;
                            }
                            else
                            {
                                for (int i = 0; i < post.Count; i++)
                                {
                                    if (post[i].CreditLocal.GetValueOrDefault(0) > 0)
                                    {
                                        post[i].CreditLocal += diff;
                                        Message = "قام البرنامج بعمل تسويه بقيمة " + decimal.Round(diff, (int)Setting.AccountsDecimals).ToString() + "  من العمله المحليه فى الجانب الدائن";
                                        valid = true;
                                        break;
                                    }
                                }
                            }
                        }
                        else if (totalredit > totaldebit)
                        {
                            diff = totalredit - totaldebit;
                            decimal converted = Convert.ToDecimal(0.5);
                            if (diff > converted)
                            {
                                Message = "الجانب المدين و الدائن غير متساويان*** راجع نوع المستند" + "\n\n" + " اجمالى مدين = " + decimal.Round(totaldebit, (int)Setting.AccountsDecimals).ToString() +
                                                   "\n\n" + "اجمالى دائن = " + decimal.Round(totalredit, (int)Setting.AccountsDecimals).ToString();
                                return false;
                            }
                            else
                            {
                                for (int i = 0; i < post.Count; i++)
                                {
                                    if (post[i].DebitLocal.GetValueOrDefault(0) > 0)
                                    {
                                        post[i].DebitLocal += diff;
                                        Message = "قام البرنامج بعمل تسويه بقيمة " + decimal.Round(diff, (int)Setting.AccountsDecimals).ToString() + "  من العمله المحليه فى الجانب المدين";
                                        valid = true;
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    Message = "الجانب المدين و الدائن = 0";
                    return false;
                }
            }
            
            if (post == null) return false;
            
            if (post.Count == 0) return false;
            
            for (int Ipost = 0; Ipost < post.Count; Ipost++)
            {
                post[Ipost].FinancialIntervalsId = FinancialIntervalsId;
                if (post[Ipost].CreditLocal.GetValueOrDefault(0) == 0 && post[Ipost].DebitLocal.GetValueOrDefault(0) == 0)
                {
                    post.Remove(post[Ipost]);
                    Ipost--;
                }
            }

            PostOrderService.InsertList(post);
            return valid;
        }

        public void GetVAlueIsHelpAcc(Cal_PostOrder postOrder, Cal_JurnalDetail jurnalDetail)
        {
            if (jurnalDetail.CustAccountId.HasValue)
            {
                postOrder.IsHelpAcc = true;
                postOrder.HelpAccId = jurnalDetail.CustAccountId;
                postOrder.HelpAccType = "MS_Customer";
            }
            else if (jurnalDetail.VendAccountId.HasValue)
            {
                postOrder.IsHelpAcc = true;
                postOrder.HelpAccId = jurnalDetail.VendAccountId;
                postOrder.HelpAccType = "MS_Vendor";
            }
            else if (jurnalDetail.EmpAccountId.HasValue)
            {
                postOrder.IsHelpAcc = true;
                postOrder.HelpAccId = jurnalDetail.EmpAccountId;
                postOrder.HelpAccType = "Hr_Employees";
            }
            else if (jurnalDetail.AssetAccountId.HasValue)
            {
                postOrder.IsHelpAcc = true;
                postOrder.HelpAccId = jurnalDetail.AssetAccountId;
                postOrder.HelpAccType = "Asset_AssetCard";
            }
            else if (jurnalDetail.BusinessPartnerAccId.HasValue)
            {
                Cal_BusinessPartnerAccounts partnerAccounts = BusinessService.GetById(jurnalDetail.BusinessPartnerAccId.Value);
                postOrder.IsHelpAcc = true;
                postOrder.HelpAccId = jurnalDetail.BusinessPartnerAccId;
                postOrder.HelpAccType = partnerAccounts.TableCode;
            }
        }

        public bool GetBalaceFromAccountChart(Cal_PostOrder postOrder, Cal_JurnalDetail jurnalDetail)
        {
            Cal_AccountChart chrt = Cal_AccountChart.GetById(jurnalDetail.AccountId.Value);
            if (chrt != null)
            {
                if (chrt.CurrencyId.HasValue)
                {
                    postOrder.BalaceCurrencyBeforDebit = chrt.BalanceDebitCurncy;
                    postOrder.BalaceLocalBeforDebit = chrt.BalanceDebitLocal;
                    postOrder.BalaceCurrencyBeforCredit = chrt.BalanceCreditCurncy;
                    postOrder.BalaceLocalBeforCredit = chrt.BalanceCreditLocal;
                }
                else
                {
                    Message = "عملة الحساب  غير موجود *** كود الحساب =  " + chrt.AccountCode + " اسم الحساب = " + chrt.AccountNameA;
                    return false;
                }
            }
            else
            {
                Message = "الحساب  غير موجود . . .";
                return false;
            }

            return true;
        }
        
        public bool GetBalaceFromCostCenters(Cal_PostOrder postOrder, Cal_CostCenters center)
        {
            if (center != null)
            {
                if (center.CurrencyId.HasValue)
                {
                    postOrder.BalancCrencyBeforDebtCostCentr = center.BalanceDebitCurncy;
                    postOrder.BalancLocalBeforDebCostCentr = center.BalanceDebitLocal;
                    postOrder.BalancCrencyBeforCredCostCentr = center.BalanceCreditCurncy;
                    postOrder.BalancLocalBeforCredCostCentr = center.BalanceCreditLocal;
                }
                else
                {
                    Message = "عملة مركز التكلفه المدين غير موجود *** كود مركز التكلفه =  " + center.CostCenterCode +
                        " اسم مركز التكلفه = " + center.CostCenterNameA;
                    return false;
                }
            }
            return true;
        }
        #endregion

        #region Shared Method Cal_PostOrder
        private Sys_AnalyticalCodes GetAnalyticalCode(int id)
        {
            return AnalyticalCodesService.GetById(id);
        }

        private Predicate<Cal_CustAccounts> MatchEntityCalCust(string AccountDescription)
        {
            return delegate (Cal_CustAccounts newMatch)
            {
                return newMatch.AccountDescription == AccountDescription &&
                newMatch.IsInUse == true;
            };
        }

        private Predicate<Cal_VendAccounts> MatchEntityCalVend(string AccountDescription)
        {
            return delegate (Cal_VendAccounts newMatch)
            {
                return newMatch.AccountDescription == AccountDescription &&
                newMatch.IsInUse == true;
            };
        }

        private Predicate<Cal_EmpAccounts> MatchEntityCalEmp(string AccountDescription)
        {
            return delegate (Cal_EmpAccounts newMatch)
            {
                return newMatch.AccountDescription == AccountDescription &&
                newMatch.IsInUse == true;
            };
        }

        private Predicate<Cal_BusinessPartnerAccounts> MatchEntityCalBusinessPartner(string AccountDescription)
        {
            return delegate (Cal_BusinessPartnerAccounts newMatch)
            {
                return newMatch.AccountDescription == AccountDescription &&
                newMatch.IsInUse == true;
            };
        }

        private Predicate<Cal_AssetAccounts> MatchEntityCalAsset(string AccountDescription)
        {
            return delegate (Cal_AssetAccounts newMatch)
            {
                return newMatch.AccountDescription == AccountDescription &&
                newMatch.IsInUse == true;
            };
        }

        public decimal GetPriceAfterCommision<T>(T model)
        {
            decimal PriceAfterCommision = GetPropertyValue(model, "PaidPrice") - GetPropertyValue(model, "Commision"); ;
            return PriceAfterCommision;
        }

        public decimal GetTotalValue<T>(T model)
        {
            decimal TotalValue = GetPropertyValue(model, "ValueBeforeRate") + GetPropertyValue(model, "Value1BeforeRate") +
                GetPropertyValue(model, "Value2BeforeRate") + GetPropertyValue(model, "Value3BeforeRate") + GetPropertyValue(model, "Value4BeforeRate") +
                GetPropertyValue(model, "Value5BeforeRate") + GetPropertyValue(model, "Value6BeforeRate") + GetPropertyValue(model, "Value7BeforeRate") +
                GetPropertyValue(model, "Value8BeforeRate") + GetPropertyValue(model, "Value9BeforeRate") + GetPropertyValue(model, "Value10BeforeRate");

            return TotalValue;
        }

        public decimal GetPropertyValue<T>(T model, string key)
        {
            var Value = model.GetType().GetProperty(key).GetValue(model);
            return Value == null ? 0 : (decimal)Value;
        }
        #endregion
    }
}